{
  "openapi": "3.0.1",
  "info": {
    "title": "Backend REST API",
    "description": "Backend API for our product",
    "version": "1.0",
    "license": {
      "name": "Terms of service",
      "url": "https://yoop.app/empty"
    }
  },
  "servers": [
    {
      "url": "https://api.dev.yoop.app",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/admin/client": {
      "post": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_PROFILE') }",
        "operationId": "createClient_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreateRequestOld"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/client/list": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_READ_PROFILE') }",
        "operationId": "listClients",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientProfileResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/client/whitelabel": {
      "post": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_MANAGE_WHITELABEL') }",
        "operationId": "setWhitelabelDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "favicon16": {
                    "type": "string",
                    "format": "binary"
                  },
                  "favicon32": {
                    "type": "string",
                    "format": "binary"
                  },
                  "logo": {
                    "type": "string",
                    "format": "binary"
                  },
                  "requestData": {
                    "$ref": "#/components/schemas/ClientWhitelabelRequest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sponsor": {
      "post": {
        "tags": [
          "Sponsor Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'SPONSOR_CREATE') }",
        "operationId": "createSponsor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSponsorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/sponsor/list": {
      "get": {
        "tags": [
          "Sponsor Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'SPONSOR_READ') }",
        "operationId": "listSponsors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SponsorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/advertisementData/public/client": {
      "get": {
        "tags": [
          "Advertisement Tracking Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "adRedirectForEvent_1",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementTrackingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction-draw/claim/checkout": {
      "get": {
        "tags": [
          "Auction and Draw Controller"
        ],
        "description": "Gets checkout details for a user attempting to claim an offer for the given offerId. The claim flow is typically triggered when a user wins an auction or draw but their payment could not be processed.,\n\n@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getCheckoutDetailsForOfferClaim",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction/checkout": {
      "put": {
        "tags": [
          "Auction Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "privateCheckout_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuctionOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction/makeAuctionOffer": {
      "post": {
        "tags": [
          "Auction Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "makeAuctionOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuctionOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction/offerGroupDetails": {
      "get": {
        "tags": [
          "Auction Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getChanceMapperAuthenticated",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleChanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction/public/chance": {
      "get": {
        "tags": [
          "Auction Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getChanceMapper",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleChanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auction/public/checkout": {
      "put": {
        "tags": [
          "Auction Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "checkout_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuctionOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/createAdmin": {
      "post": {
        "tags": [
          "Yoop Internal Administration Controller"
        ],
        "description": "Creates a Yoop Administrator account,\n\n@PreAuthorize={ hasPermission(null, 'ADMIN_USER_CREATE_PROFILE') }",
        "operationId": "createAdminAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/hasPermissions": {
      "post": {
        "tags": [
          "Yoop Internal Administration Controller"
        ],
        "description": "Determines if a Yoop Administrator has access to given privileges,\n\n@PreAuthorize={ hasPermission(null,'ADMIN_USER_READ_PROFILE') }",
        "operationId": "hasPermissions_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HasPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HasPermissionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/login": {
      "post": {
        "tags": [
          "Yoop Internal Administration Controller"
        ],
        "description": "Allows a Yoop Administrator to login,\n\n@PreAuthorize={ none }",
        "operationId": "adminLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/logout": {
      "post": {
        "tags": [
          "Yoop Internal Administration Controller"
        ],
        "description": "Allows a Yoop Administrator to logout,\n\n@PreAuthorize={ hasPermission(null,'ADMIN_USER_LOGOUT') }",
        "operationId": "logout_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/roles": {
      "get": {
        "tags": [
          "Yoop Internal Administration Controller"
        ],
        "description": "Retrieves the roles of a Yoop Administrator,\n\n@PreAuthorize={ hasPermission(null, 'ADMIN_USER_READ_PROFILE') }",
        "operationId": "getAdminRoles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminRoleResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/changePassword": {
      "put": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to change their password through the email link,\n\n@PreAuthorize={ none }",
        "operationId": "changePassword_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/login": {
      "post": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "login_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/logout": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_LOGOUT') }",
        "operationId": "logout_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/profile": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_READ_PROFILE') }",
        "operationId": "getClientProfile_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/public/changePassword": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "changePassword_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/public/initiateResetPassword": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "initiateResetPassword_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateResetPasswordClientUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/public/verifyResetPasswordEmail": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "verifyResetPasswordEmail_2",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthEmailVerificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/user/createAccount": {
      "post": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_CREATE_PROFILE') }",
        "operationId": "createClientUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserCreateRequestOld"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/user/firebase": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getFirebaseLogin_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserFirebaseLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/user/profile": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_READ_PROFILE') }",
        "operationId": "getClientUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/user/setPassword": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_SET_PASSWORD') }",
        "operationId": "setPassword_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserSetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/client/user/updateAccount": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_UPDATE_PROFILE') }",
        "operationId": "updateClientUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserUpdateRequestOld"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/createAccount": {
      "post": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to create their Yoop account,\n\n@PreAuthorize={ none }",
        "operationId": "createAccount_1",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          },
          {
            "name": "device-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-token",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/deleteAccount": {
      "delete": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to delete their Yoop account,\n\n@PreAuthorize={ none }",
        "operationId": "deleteAccount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/externalAuthenticatedServiceProvider/generateToken": {
      "post": {
        "tags": [
          "Yoop Administration Controller for external authenticated service providers"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_USER_CREATE') }",
        "operationId": "createExternalServiceProvider",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "X2O"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/initiateResetPassword": {
      "put": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to begin the reset password flow,\n\n@PreAuthorize={ none }",
        "operationId": "initiateResetPassword_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/isEmailAddressAvailable": {
      "get": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Operation to check if an email address already exists in the system,\n\n@PreAuthorize={ none }",
        "operationId": "assertEmailAddressAvailable",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to login,\n\n@PreAuthorize={ none }",
        "operationId": "userLogin_1",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          },
          {
            "name": "device-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-token",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to logout and delete their device token,\n\n@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "logout_2",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          },
          {
            "name": "device-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/public/completePartialUserAccount": {
      "post": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to create their Yoop account,\n\n@PreAuthorize={ none }",
        "operationId": "completePartialUserAccount",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          },
          {
            "name": "device-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-token",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletePartialAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/resendVerificationLink": {
      "put": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to resend the email verification code, this will send an email to the user,\n\n@PreAuthorize={ none }",
        "operationId": "resendVerificationLink",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/setPassword": {
      "put": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to change their password with a current auth token and old password,\n\n@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "setPassword_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verifyAccountEmail": {
      "get": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to verify their email address,\n\n@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "verifyAccountEmail_1",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verifyResetPasswordEmail": {
      "get": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Verifies the users code for resetting their password,\n\n@PreAuthorize={ none }",
        "operationId": "verifyResetPasswordEmail_1",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthEmailVerificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/acquisition/public/request-demo": {
      "post": {
        "tags": [
          "client-acquisition-controller"
        ],
        "description": "Request demo from Yoop for a new potential client,\n\n@PreAuthorize={ none }",
        "operationId": "requestDemo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientApiRequestDemoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/attendee/list": {
      "get": {
        "tags": [
          "Client API Attendee Controller"
        ],
        "description": "Get attendee list,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_DATA') }",
        "operationId": "getAttendeesList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchPrefix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DECLINED",
                "ENTERED",
                "NOT_ENTERED"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "previousPageKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TokenManifestSortColumn.ORDER_ID",
                "TokenManifestSortColumn.ATTENDEE_NAME",
                "TokenManifestSortColumn.TRUE_YOOP",
                "TokenManifestSortColumn.TOKEN_ASSIGNMENT_STATUS"
              ]
            }
          },
          {
            "name": "sortAscending",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAttendeeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/attendee/list/download": {
      "get": {
        "tags": [
          "Client API Attendee Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','REPORTING_ACCESS_CONTROL_DATA') }",
        "operationId": "generateAttendeeList_2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/attendee/summary": {
      "get": {
        "tags": [
          "Client API Attendee Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','READ_ACCESS_CONTROL_SUMMARY_DATA') }",
        "operationId": "getAttendeesSummary",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessControlScanTimeRangeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAttendeeListSummary"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/hasPermissions": {
      "post": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "hasPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HasPermissionsRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HasPermissionsResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/login": {
      "post": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/logout": {
      "put": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/public/changePassword": {
      "put": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/public/initiateResetPassword": {
      "put": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "initiateResetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateResetPasswordClientUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/public/verifyResetPasswordEmail": {
      "get": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "verifyResetPasswordEmail",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthEmailVerificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/user/firebase": {
      "get": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getFirebaseLogin",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserFirebaseLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/auth/user/setPassword": {
      "put": {
        "tags": [
          "Client API Auth Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "setPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUserSetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/availableInventory/inventory": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getClientInventoryItems_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sectionCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "inventoryCategoryTypeFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EVENT_ACCESS",
                  "MERCHANDISE",
                  "ADD_ON",
                  "CHARITY",
                  "COLLECTIBLE"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventInventoryDataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/availableInventory/inventory/latest": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getLatestInventoryItemList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/client/availableInventory/inventoryCategory": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getAvailableCategoryList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientAvailableCategoryListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/availableInventory/section": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getAvailableSectionsList_2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/cart/cash-payment/v2": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getPurchaseToken(), 'PURCHASE_TOKEN', 'BOX_OFFICE_SALE') }",
        "operationId": "processCashPaymentForBoxOffice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashPaymentBoxOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessExternalPaymentBoxOfficeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/cart/checkout": {
      "put": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupIds(), 'OFFER_GROUP', 'BOX_OFFICE_SALE') }",
        "operationId": "checkout_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockingCartCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LockingCartPurchaseCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/cart/clear": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getPurchaseToken(), 'PURCHASE_TOKEN', 'BOX_OFFICE_SALE') }",
        "operationId": "clearCart_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/cart/initiate-external-payment": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getPurchaseToken(), 'PURCHASE_TOKEN', 'BOX_OFFICE_SALE') }",
        "operationId": "initiateExternalPaymentForBoxOffice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateExternalPaymentBoxOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateExternalPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/config": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'BOX_OFFICE_CONFIG_READ') }",
        "operationId": "getBoxOfficeConfig",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficeConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/config/set": {
      "put": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'BOX_OFFICE_CONFIG_SET') }",
        "operationId": "setBoxOfficeConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBoxOfficeConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficeConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/mev/add": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "addMevDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMevDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMevDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/mev/delete": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "deleteMevDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMevDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/box-office/device/mev/invoice/create": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getCustomerOrderId(), 'CUSTOMER_ORDER', 'BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "createMevInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMevInvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMevInvoiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/mev/invoice/reprint": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#customerOrderId, 'CUSTOMER_ORDER', 'BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "reprintMevInvoice",
        "parameters": [
          {
            "name": "customerOrderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "serialNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMevInvoiceResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getCustomerOrderId(), 'CUSTOMER_ORDER', 'BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "reprintMevInvoiceDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReprintMevInvoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMevInvoiceResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/box-office/device/mev/list": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','BOX_OFFICE_READ_DEVICES') }",
        "operationId": "listMevDevices",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListMevDevicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/mev/update": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "updateMevDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMevDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMevDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/payment": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','BOX_OFFICE_READ_DEVICES') }",
        "operationId": "getBoxOfficePaymentDevice",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pairingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficePaymentDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/payment/add": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "addBoxOfficePaymentDeviceDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSquareTerminalDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/box-office/device/payment/add/v2": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "addBoxOfficePaymentDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSquareTerminalDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AddSquareTerminalDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/payment/delete": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "deleteBoxOfficePaymentDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSquareTerminalDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/box-office/device/payment/list": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','BOX_OFFICE_READ_DEVICES') }",
        "operationId": "listBoxOfficePaymentDevices",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBoxOfficePaymentDevicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/payment/update": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "updateBoxOfficePaymentDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSquareTerminalDeviceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficePaymentDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/printer/add": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "addBoxOfficePrinter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBoxOfficePrinterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficePrinterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/printer/delete": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "deleteBoxOfficePrinter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBoxOfficePrinterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/box-office/device/printer/list": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','BOX_OFFICE_READ_DEVICES') }",
        "operationId": "listBoxOfficePrinters",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBoxOfficePrintersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/device/printer/update": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT','BOX_OFFICE_MANAGE_DEVICES') }",
        "operationId": "updateBoxOfficePrinter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoxOfficePrinterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficePrinterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/events/list": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','EVENT_LIST') }",
        "operationId": "getEventsForBoxOfficeSale",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficeEventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/offer-group/list": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "Returns a paginated list of offer groups for a given list of marketplace IDs.,\n\n@PreAuthorize={ (hasPermission(#request.getMarketplaceIds(), 'MARKETPLACE', 'MARKETPLACE_READ') AND (#request.getMarketplaceCodeRequests() == null OR #request.getMarketplaceCodeRequests().isEmpty() OR hasPermission(#request.getMarketplaceCodeRequests().![eventId], 'EVENT', 'MARKETPLACE_READ'))) }",
        "operationId": "getOfferGroupListBoxOfficeContent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleOfferGroupListRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/payment/complete": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getCustomerOrderId(), 'CUSTOMER_ORDER', 'BOX_OFFICE_SALE') }",
        "operationId": "processBoxOfficePurchase_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessExternalPaymentBoxOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessExternalPaymentBoxOfficeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/preconfiguration": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'BOX_OFFICE_CONFIG_READ') }",
        "operationId": "getPreconfiguredClientBoxOfficeConfiguration",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientPreconfiguredBoxOfficeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/preconfiguration/create": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId, 'CLIENT', 'BOX_OFFICE_CONFIG_SET') }",
        "operationId": "createPreconfiguredClientBoxOfficeConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientPreconfiguredBoxOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientPreconfiguredBoxOfficeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/qr": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'BOX_OFFICE_SALE') }",
        "operationId": "generateQRCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlQrCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalPurchaseQrCodeDataResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/sales/download": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','BOX_OFFICE_REPORTING') }",
        "operationId": "generateBoxOfficeClientUserSales",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/box-office/salesGroupTree": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ (hasPermission(#request.getMarketplaceIds(), 'MARKETPLACE', 'MARKETPLACE_READ') AND (#request.getMarketplaceCodeRequests() == null OR #request.getMarketplaceCodeRequests().isEmpty() OR hasPermission(#request.getMarketplaceCodeRequests().![eventId], 'EVENT', 'MARKETPLACE_READ'))) }",
        "operationId": "getSalesGroupTreeForBoxOffice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSalesGroupTreeRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/seatChartData/list": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ (hasPermission(#request.getMarketplaceIds(), 'MARKETPLACE', 'MARKETPLACE_READ') AND (#request.getMarketplaceCodeRequests() == null OR #request.getMarketplaceCodeRequests().isEmpty() OR hasPermission(#request.getMarketplaceCodeRequests().![eventId], 'EVENT', 'MARKETPLACE_READ'))) }",
        "operationId": "listAvailableSeatDataForBoxOffice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAvailableSeatDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SeatingChartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/terminal/checkout/cancel": {
      "post": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getCustomerOrderId(), 'CUSTOMER_ORDER', 'BOX_OFFICE_SALE') }",
        "operationId": "cancelTerminalCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelTerminalCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSquareTerminalCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/box-office/user/account": {
      "get": {
        "tags": [
          "client-api-box-office-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'BOX_OFFICE_USER_SEARCH') }",
        "operationId": "getUserAccount_1",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/accept/public": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Create a user account and accept an invite in one step.,\n\n@PreAuthorize={ none }",
        "operationId": "createAccountAndAcceptInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountAndAcceptEventCollabInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabPublicAcceptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/check-account-existence/public": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Use your invite code to check account existence. Only works while the invite is pending.,\n\n@PreAuthorize={ none }",
        "operationId": "checkAccountExistence_1",
        "parameters": [
          {
            "name": "inviteId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "acceptanceCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/create": {
      "post": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT','EVENT_DRAFT_CREATE') }",
        "operationId": "createDraft",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartEventCreationDraftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventDraftResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/delete": {
      "delete": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT', 'EVENT_DRAFT_DELETE') }",
        "operationId": "deleteDraft",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveEventDraftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/get": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'EVENT_DRAFT', 'EVENT_DRAFT_READ') }",
        "operationId": "getDraft",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventDraftResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/list": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT','EVENT_DRAFT_LIST') }",
        "operationId": "listDrafts",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventDraftResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/review/approve": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Approve the event draft review.,\n\n@PreAuthorize={ hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_DRAFT_REVIEW_APPROVE') }",
        "operationId": "approveDraftReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveEventDraftReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventDraftResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/review/cancel": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Cancel the review process for the draft,\n\n@PreAuthorize={ hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_DRAFT_REVIEW_CANCEL') }",
        "operationId": "cancelEventDraftReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitEventDraftForReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventDraftResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/draft/review/submit": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Submit the draft for review.,\n\n@PreAuthorize={ hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_DRAFT_REVIEW_SUBMIT') }",
        "operationId": "createEventDraftReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitEventDraftForReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventDraftResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/accept": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Accept an invite using a code.,\n\n@PreAuthorize={ hasPermission(#request.getInvitedClientId(), 'CLIENT','EVENT_COLLAB_INVITE_ACCEPT') }",
        "operationId": "acceptInvite_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptClientUserEventCollabInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/approve": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Approve an invite for event collaboration.,\n\n@PreAuthorize={ hasPermission(#request.getApproverClientId(), 'CLIENT', 'EVENT_COLLAB_INVITE_APPROVE') }",
        "operationId": "approveInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveClientUserEventCollabRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/create": {
      "post": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Creates an invite for event collaboration.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_COLLAB_INVITE_CREATE') or hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_COLLAB_INVITE_CREATE') }",
        "operationId": "createInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientUserEventCollabInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/decline/public": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Decline an invite for event collaboration.,\n\n@PreAuthorize={ none }",
        "operationId": "declineInvite_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineClientUserEventCollabInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/get/public": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Retrieve a specific event collab invite using your acceptance code.,\n\n@PreAuthorize={ none }",
        "operationId": "getInvitePublic_1",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "acceptanceCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/list": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Retrieve list of invites for the given event or event draft. Only one parameter at a time is supported.,\n\n@PreAuthorize={ (#eventId != null AND hasPermission(#eventId, 'EVENT', 'EVENT_COLLAB_INVITE_LIST')) OR (#eventDraftId != null AND hasPermission(#eventDraftId, 'EVENT_DRAFT', 'EVENT_COLLAB_INVITE_LIST')) }",
        "operationId": "listInvites",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventDraftId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/reject": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Reject an invite for event collaboration.,\n\n@PreAuthorize={ hasPermission(#request.getApproverClientId(), 'CLIENT', 'EVENT_COLLAB_INVITE_REJECT') }",
        "operationId": "rejectInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectClientUserEventCollabRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/invite/revoke": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Revoke an invite for event collaboration.,\n\n@PreAuthorize={ hasPermission(#request.getInviteId(), 'EVENT_COLLAB_INVITE', 'EVENT_COLLAB_INVITE_REVOKE') }",
        "operationId": "revokeInvite_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeClientUserEventCollabInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/resend": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Re-sends an invitation for a client user to join an event.,\n\n@PreAuthorize={ hasPermission(#id, 'EVENT_COLLAB_INVITE', 'EVENT_COLLAB_INVITE_RESEND') }",
        "operationId": "resend",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/add": {
      "post": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Add an internal team member to the event. eventId and eventDraftId cannot be used at the same time. Returns back the entire list of event collaborators, not just the ones that were added.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_COLLAB_USERS_INTERNAL_ADD') or hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT', 'EVENT_COLLAB_USERS_INTERNAL_ADD') }",
        "operationId": "addMembers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddInternalEventCollaboratorsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventCollaboratorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/get": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Gets your event collaboration info.,\n\n@PreAuthorize={ none }",
        "operationId": "getPersonalCollaborationInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventDraftId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonalEventCollaboratorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/list": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "List users with access to the event. Only one filter at a time is supported.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT','EVENT_COLLAB_USERS_LIST') or hasPermission(#eventDraftId, 'EVENT_DRAFT','EVENT_COLLAB_USERS_LIST') }",
        "operationId": "listEventCollaborators",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventDraftId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventCollaboratorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/list/addable": {
      "get": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Returns the list internal team members that you can add to the event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT','EVENT_COLLAB_USERS_INTERNAL_ADD') or hasPermission(#eventDraftId, 'EVENT_DRAFT','EVENT_COLLAB_USERS_INTERNAL_ADD') }",
        "operationId": "listAddableEventCollaborators",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventDraftId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientUserClientInfoListItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/remove": {
      "delete": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Remove team member access to the event. Returns back the remaining list of collaborators for the event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_COLLAB_USER_REMOVE') or hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_COLLAB_USER_REMOVE') }",
        "operationId": "removeTeamMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveEventCollaboratorsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventCollaboratorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/collab/event/user/update": {
      "put": {
        "tags": [
          "Client API Collaboration Controller"
        ],
        "description": "Updates the collaborator roles. Returns back the entire list of collaborators for the event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_COLLAB_USER_UPDATE') or hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT','EVENT_COLLAB_USER_UPDATE') }",
        "operationId": "updateTeamMembers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventCollaboratorsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventCollaboratorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/create": {
      "post": {
        "tags": [
          "Client API Controller"
        ],
        "description": "YOOP_ADMIN endpoint for creating new Clients.,\n\n@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_PROFILE') }",
        "operationId": "createClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/customer/paymentMethods/fingerprint/update": {
      "post": {
        "tags": [
          "client-api-payment-controller"
        ],
        "description": "Update payment method usage limits per event.,\n\n@PreAuthorize={ hasPermission(null,'USER_PAYMENT_MEANS_UPDATE') }",
        "operationId": "updatePaymentMethodsFingerprintLimit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUpdatePaymentMethodsFingerprintLimitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/customer/transactions/list": {
      "get": {
        "tags": [
          "client-api-payment-controller"
        ],
        "description": "Fetches list of transactions for a given user,\n\n@PreAuthorize={ hasPermission(null,'USER_TRANSACTIONS_READ') }",
        "operationId": "getUserTransactions",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserTransactionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/archive": {
      "post": {
        "tags": [
          "client-api-discount-controller"
        ],
        "description": "Archives a discount.,\n\n@PreAuthorize={ hasPermission(#discountId, 'DISCOUNT', 'DISCOUNT_UPDATE') }",
        "operationId": "archiveDiscount_1",
        "parameters": [
          {
            "name": "discountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/archive": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Archives a discount.,\n\n@PreAuthorize={ hasPermission(#discountId, 'DISCOUNT', 'DISCOUNT_UPDATE') }",
        "operationId": "archiveDiscount",
        "parameters": [
          {
            "name": "discountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/auto-generate/list": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Auto generate promo code texts.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'DISCOUNT_CREATE') }",
        "operationId": "listDiscountTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateDiscountCodeStringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/create": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Creates an discount promo code for an event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'DISCOUNT_CREATE') }",
        "operationId": "createPromoCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientPromoCodeDiscountRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreateDiscountCodeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/exists": {
      "get": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Validates that a promo code already exists.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'DISCOUNT_CREATE') }",
        "operationId": "existsPromoCode",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/discount/code/exists/list": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Validates that a promo code already exists.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'DISCOUNT_CREATE') }",
        "operationId": "existsPromoCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateDuplicatedDiscountCodesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/list": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Creates an discount for an event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'DISCOUNT_READ') }",
        "operationId": "getPromoCodeDataList_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClientPromoCodeDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoCodeClientDataListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/list/download": {
      "get": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','DISCOUNT_REPORTING') }",
        "operationId": "generateDiscountCodesList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/discount/code/unarchive": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Unarchives a discount.,\n\n@PreAuthorize={ hasPermission(#discountId, 'DISCOUNT', 'DISCOUNT_UPDATE') }",
        "operationId": "unarchiveDiscount",
        "parameters": [
          {
            "name": "discountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/update": {
      "put": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Creates an discount promo code for an event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'DISCOUNT_CREATE') }",
        "operationId": "updatePromoCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientPromoCodeDiscountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiscountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/code/validateCode": {
      "post": {
        "tags": [
          "client-api-discount-code-controller"
        ],
        "description": "Creates an discount for an event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'DISCOUNT_READ') }",
        "operationId": "getPromoCodeDataList",
        "parameters": [
          {
            "name": "discountCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/get": {
      "get": {
        "tags": [
          "client-api-discount-controller"
        ],
        "description": "Retrieves the discount info.,\n\n@PreAuthorize={ hasPermission(#discountId, 'DISCOUNT', 'DISCOUNT_READ') }",
        "operationId": "getDiscount",
        "parameters": [
          {
            "name": "discountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiscountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/list": {
      "get": {
        "tags": [
          "client-api-discount-controller"
        ],
        "description": "Retrieves all the discounts from an event the client user has access to.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'DISCOUNT_READ') }",
        "operationId": "listDiscount",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDiscountResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/translation/create": {
      "post": {
        "tags": [
          "client-api-discount-controller"
        ],
        "description": "Add a translation to a discount.,\n\n@PreAuthorize={ hasPermission(#request.getDiscountId(), 'DISCOUNT', 'DISCOUNT_UPDATE') }",
        "operationId": "createOrUpdateDiscountTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscountTranslationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/discount/translation/list": {
      "get": {
        "tags": [
          "client-api-discount-controller"
        ],
        "description": "Retrieves translation info from a discount.,\n\n@PreAuthorize={ hasPermission(#discountId, 'DISCOUNT', 'DISCOUNT_READ') }",
        "operationId": "listDiscountTranslation_1",
        "parameters": [
          {
            "name": "discountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountTranslation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/affiliateCode/create": {
      "post": {
        "tags": [
          "Client API Event Affiliate Code Controller"
        ],
        "description": "Creates an event for a client. Optionally performing the request as a dry run.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'EVENT_AFFILIATE_CODE_CREATE') }",
        "operationId": "createEventAffiliateCode_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAffiliateCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/affiliateCode/edit": {
      "put": {
        "tags": [
          "Client API Event Affiliate Code Controller"
        ],
        "description": "Edits an affiliate code.,\n\n@PreAuthorize={ hasPermission(#request.getCodeId(), 'AFFILIATE_CODE', 'EVENT_AFFILIATE_CODE_UPDATE') }",
        "operationId": "createEventAffiliateCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAffiliateCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/affiliateCode/get": {
      "get": {
        "tags": [
          "Client API Event Affiliate Code Controller"
        ],
        "description": "Retrieves the event affiliate code data.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EVENT_AFFILIATE_CODE_READ') }",
        "operationId": "getEventAffiliateCodeData",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateCodeDataListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/affiliateCode/get/download": {
      "get": {
        "tags": [
          "Client API Event Affiliate Code Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EVENT_AFFILIATE_CODE_READ') }",
        "operationId": "generateAttendeeList_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/event/analyticsTracker/list/set": {
      "put": {
        "tags": [
          "Client API Event Analytics Tracker  Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventAnalyticsTrackersRequest.getEventId(), 'EVENT', 'EVENT_ANALYTICS_TRACKER_UPDATE') }",
        "operationId": "setEventAnalyticsTrackers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventAnalyticsTrackerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventAnalyticsTrackerResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/base-info/update": {
      "patch": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Updates the Base Info page for the given event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_UPDATE_PROFILE') }",
        "operationId": "updateEventBaseInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventBaseInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/clone/get": {
      "get": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Clones the setup for an event.,\n\n@PreAuthorize={ hasPermission(#id, 'EVENT','EVENT_CLONE') }",
        "operationId": "cloneEvent",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventRequest"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/create": {
      "post": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Creates an event for a client. Optionally performing the request as a dry run.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'EVENT_CREATE_PROFILE') AND (#request.getEventDraftId() == null      OR hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT', 'EVENT_CREATE_PROFILE')) }",
        "operationId": "createEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/create/async": {
      "post": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Creates an event for a client asynchronously. Dry run not supported.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'EVENT_CREATE_PROFILE') AND (#request.getEventDraftId() == null      OR hasPermission(#request.getEventDraftId(), 'EVENT_DRAFT', 'EVENT_CREATE_PROFILE')) }",
        "operationId": "createEventAsync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/get": {
      "get": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Retrieves the event info.,\n\n@PreAuthorize={ hasPermission(#id, 'EVENT','EVENT_READ_PROFILE') }",
        "operationId": "getEvent_1",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/get/exists/vanityName": {
      "get": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Retrieves weather a vanity name has been used for any event.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT','EVENT_READ_PROFILE') }",
        "operationId": "checkVanityNameExists",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vanityName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/list": {
      "get": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Lists all events the user has access to for the given client.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT','EVENT_LIST') }",
        "operationId": "listEvents",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/list/byDate": {
      "get": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "Lists all events and the drafts the user has access to in the given time window.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT','EVENT_LIST') }",
        "operationId": "listEventsByDate",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventCalendarResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/media/list/set": {
      "put": {
        "tags": [
          "client-api-event-media-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'EVENT_MEDIA_UPDATE') }",
        "operationId": "setEventMedia",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventMediaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventMediaResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/notifications/create": {
      "post": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationRequest.getEventId(), 'EVENT', 'EVENT_NOTIFICATIONS_CREATE') }",
        "operationId": "createNotificationSubscriptionForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventExternalNotificationSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetExternalNotificationSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/notifications/delete": {
      "delete": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationSubscriptionId, 'EVENT_NOTIFICATION', 'EVENT_NOTIFICATIONS_DELETE') }",
        "operationId": "deleteNotificationSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/event/notifications/list/set": {
      "put": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationRequest.getEventId(), 'EVENT', 'EVENT_NOTIFICATIONS_UPDATE') }",
        "operationId": "setNotificationSubscriptionsForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetExternalNotificationSubscriptionsForEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetExternalNotificationSubscriptionResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/notifications/subscriptions/subscribers/list": {
      "get": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "Gets the list of subscribers for a given subscriptionId,\n\n@PreAuthorize={ hasPermission(#externalNotificationSubscriptionId, 'EVENT_NOTIFICATION', 'EVENT_NOTIFICATIONS_READ') }",
        "operationId": "getSubscribers",
        "parameters": [
          {
            "name": "externalNotificationSubscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetExternalNotificationSubscriberListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/notifications/subscriptions/subscribers/list/download": {
      "get": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "Returns the list of subscribers for a given subscriptionId as an excel,\n\n@PreAuthorize={ hasPermission(#externalNotificationSubscriptionId, 'EVENT_NOTIFICATION', 'EVENT_NOTIFICATIONS_READ') }",
        "operationId": "generateExternalNotificationSubscriberList",
        "parameters": [
          {
            "name": "externalNotificationSubscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/event/notifications/update": {
      "put": {
        "tags": [
          "Client API Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationRequest.getId(), 'EVENT_NOTIFICATION', 'EVENT_NOTIFICATIONS_UPDATE') }",
        "operationId": "updateNotificationSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalNotificationSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetExternalNotificationSubscriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/postpone": {
      "post": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_UPDATE_PROFILE') }",
        "operationId": "postponeEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPostponeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/refund/offer/process": {
      "put": {
        "tags": [
          "client-api-refund-controller"
        ],
        "description": "Refunds owned token for a particular offer,\n\n@PreAuthorize={ hasPermission(#request.getOfferId(), 'OFFER', 'MARKETPLACE_OFFER_OWNED_TOKEN_REFUND') }",
        "operationId": "issueRefundForOffer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRefundOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/refund/order/checkout": {
      "put": {
        "tags": [
          "client-api-refund-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'MARKETPLACE_OFFER_OWNED_TOKEN_REFUND') }",
        "operationId": "refundCheckoutForOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRefundCustomerOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrderRefundCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/refund/order/process": {
      "put": {
        "tags": [
          "client-api-refund-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'MARKETPLACE_OFFER_OWNED_TOKEN_REFUND') }",
        "operationId": "issueRefundForOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRefundCustomerOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrderRefundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/refund/order/process/v2": {
      "put": {
        "tags": [
          "client-api-refund-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'MARKETPLACE_OFFER_OWNED_TOKEN_REFUND') }",
        "operationId": "issueRefundForOrder_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRefundClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/refund/retry": {
      "put": {
        "tags": [
          "client-api-refund-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'MARKETPLACE_OFFER_OWNED_TOKEN_REFUND') }",
        "operationId": "retryRefundForOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryRefundClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/reschedule": {
      "put": {
        "tags": [
          "Client API Event Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_UPDATE_PROFILE') }",
        "operationId": "rescheduleEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRescheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/sponsor/group/list/set": {
      "put": {
        "tags": [
          "Client API Event Sponsor Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'SPONSOR_GROUP_SET') }",
        "operationId": "setEventSponsorGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventSponsorGroupsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSponsorGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/sponsor/list": {
      "get": {
        "tags": [
          "Client API Event Sponsor Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'SPONSOR_READ') }",
        "operationId": "listSponsorsForClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSponsorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/sub-detail/create": {
      "post": {
        "tags": [
          "Client API Event Sub-Details Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#subDetailRequest.getEventId(), 'EVENT', 'SUB_DETAIL_CREATE') }",
        "operationId": "createSubDetailForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventSubDetailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/sub-detail/delete": {
      "delete": {
        "tags": [
          "Client API Event Sub-Details Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'SUB_DETAIL', 'SUB_DETAIL_DELETE') }",
        "operationId": "deleteEventSubDetail",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/event/sub-detail/list/set": {
      "put": {
        "tags": [
          "Client API Event Sub-Details Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#subDetailRequest.getEventId(), 'EVENT', 'SUB_DETAIL_CREATE') }",
        "operationId": "setEventSubDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventSubDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSubDetailResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/event/sub-detail/update": {
      "put": {
        "tags": [
          "Client API Event Sub-Details Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#subDetailRequest.getId(), 'SUB_DETAIL', 'SUB_DETAIL_UPDATE') }",
        "operationId": "updateEventSubDetail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubDetailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/timeline/group/item/create": {
      "post": {
        "tags": [
          "Client API Event Timeline Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventTimelineRequest.getEventId(), 'EVENT', 'EVENT_TIMELINE_CREATE') }",
        "operationId": "createEventTimeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventTimelineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTimelineResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/timeline/group/item/delete": {
      "delete": {
        "tags": [
          "Client API Event Timeline Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'EVENT_TIMELINE', 'EVENT_TIMELINE_DELETE') }",
        "operationId": "deleteEventTimeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/event/timeline/group/item/update": {
      "put": {
        "tags": [
          "Client API Event Timeline Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventTimelineRequest.getTimelineId(), 'EVENT_TIMELINE', 'EVENT_TIMELINE_UPDATE') }",
        "operationId": "updateEventTimeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventTimelineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventTimelineResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/event/timeline/group/list/set": {
      "put": {
        "tags": [
          "Client API Event Timeline Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventTimelineGroupsRequest.getEventId(), 'EVENT', 'EVENT_TIMELINE_GROUP_UPDATE') }",
        "operationId": "setEventTimelineGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventTimelineGroupsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventTimelineGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bid/list": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "listBids_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "OPEN",
                  "FAILED",
                  "CANCELLED",
                  "FILLED",
                  "EXPIRED"
                ]
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBidsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/cancel": {
      "delete": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'BULK_PRIMARY_FILL', 'EXCHANGE_PRIMARY_BULK_FILL_WRITE') }",
        "operationId": "cancelBulkFill",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBulkPrimaryFillResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/create": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getInventoryCategoryId(), 'INVENTORY_CATEGORY', 'EXCHANGE_PRIMARY_BULK_FILL_WRITE') }",
        "operationId": "bulkFill",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPrimaryFillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBulkPrimaryFillResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/create/async": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getInventoryCategoryId(), 'INVENTORY_CATEGORY', 'EXCHANGE_PRIMARY_BULK_FILL_WRITE') }",
        "operationId": "bulkFillAsync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPrimaryFillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBulkPrimaryFillResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/get": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'BULK_PRIMARY_FILL', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "getBulkFill",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBulkPrimaryFillResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/list": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "listBulkFills",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBulkPrimaryFillResultsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/preview/list": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "listBulkPrimaryFillSims",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBulkPrimaryFillPreviewsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/sim/get": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getInventoryCategoryId(), 'INVENTORY_CATEGORY', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "getBulkFillSim",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkPrimaryFillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBulkPrimaryFillSimResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/bulk-fill/sim/list": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getInventoryCategoryIds(), 'INVENTORY_CATEGORY', 'EXCHANGE_PRIMARY_BULK_FILL_READ') }",
        "operationId": "listBulkFillSims",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListBulkPrimaryFillSimsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBulkPrimaryFillSimsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/categorySalesData": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EXCHANGE_CONFIG_READ') }",
        "operationId": "getCategorySalesData",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientExchangeMarketplaceCategorySalesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/client-guest/accept": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "Allows a Client to allow users whose offers were processed for the given batch id to retry payment for their market offer through the client-guest flow.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','PROMOTER_ASSIGN') }",
        "operationId": "acceptBulkPrimaryFillPaymentRetryForInventoryCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptOrRejectBulkPrimaryFillClientGuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/client-guest/reject": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "Allows a Client to notify users whose offers were processed for the given batch id that their offers have been rejected due to payment failure.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','PROMOTER_ASSIGN') }",
        "operationId": "rejectBulkPrimaryFillPaymentRetryForInventoryCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptOrRejectBulkPrimaryFillClientGuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/config/get": {
      "get": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'EXCHANGE_CONFIG_READ') }",
        "operationId": "getConfig",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventExchangeConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/exchange/config/set": {
      "post": {
        "tags": [
          "Client API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'EXCHANGE_CONFIG_WRITE') }",
        "operationId": "createConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventExchangeConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventExchangeConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/features/update": {
      "put": {
        "tags": [
          "Client API Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_UPDATE_FEATURES') }",
        "operationId": "updateClientFeatures",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientFeaturesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/buyer-price/get": {
      "post": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Retrieves the price a buyer would see after calculation of fees from an existing event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'FEE_SET') }",
        "operationId": "getClientFeeBuyerPriceFromEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClientFeeBuyerPriceFromEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientFeeBuyerPriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/clientRefundFee/set": {
      "put": {
        "tags": [
          "Client API Client Refund Fee Controller"
        ],
        "description": "Update event's client refund fee with preconfigured value,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_REFUND_FEE_SET') }",
        "operationId": "setClientRefundFeeForEventFromPreconfigured",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientRefundFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/create": {
      "post": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Sets up preconfigured fees for clients.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_PRECONFIGURED_FEE_CREATE') }",
        "operationId": "createClientPreconfiguredFee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientPreconfiguredFeeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPreconfiguredFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/customFeeName/validate": {
      "get": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validateCustomFeeName",
        "parameters": [
          {
            "name": "customFeeName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/draft/buyer-price/get": {
      "post": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Retrieves the price a buyer would see after calculation of given fees,\n\n@PreAuthorize={ hasPermission(#request.getDraftEventId(), 'EVENT_DRAFT', 'FEE_SET') }",
        "operationId": "getClientFeeBuyerPriceFromFees",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClientFeeBuyerPriceFromFeesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientFeeBuyerPriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/get": {
      "get": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Retrieves the preconfigured client fees.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'CLIENT_PRECONFIGURED_FEE_READ') }",
        "operationId": "getPreconfiguredClientFees",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filterTaxes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPreconfiguredFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/list/set": {
      "put": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Sets fees for an event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'FEE_SET') }",
        "operationId": "setFeesForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEventFeesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFeeResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/fee/resaleProfitShare/set": {
      "put": {
        "tags": [
          "Client API Fee Controller"
        ],
        "description": "Sets resale profit fee for an event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'FEE_SET') }",
        "operationId": "setResaleProfitFeeForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/get": {
      "get": {
        "tags": [
          "Client API Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'CLIENT_READ_PROFILE') }",
        "operationId": "getClientProfile",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/assign": {
      "post": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','PROMOTER_ASSIGN') }",
        "operationId": "assignInventoryToUser_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientGuestOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientGuestInvitationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/assign/async": {
      "post": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','PROMOTER_ASSIGN') }",
        "operationId": "assignInventoryToUser_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkClientGuestOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientGuestBulkSendResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/assign/status": {
      "get": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','PROMOTER_ASSIGN') }",
        "operationId": "assignInventoryToUser_3",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientGuestBulkSendStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/list": {
      "get": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getAssignmentsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "isFree",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientGuestAssignmentListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/list/download": {
      "get": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "generateGuestList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "isFree",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/guest/marketplace": {
      "get": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'MARKETPLACE_READ') }",
        "operationId": "getMarketplaceDetails_2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/refund": {
      "post": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#offerGroupId, 'OFFER_GROUP', 'PROMOTER_ASSIGN') }",
        "operationId": "refundAndRevokeInventoryForOfferGroup",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/resend": {
      "post": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#offerGroupId, 'OFFER_GROUP', 'PROMOTER_ASSIGN') }",
        "operationId": "resendOfferGroupAssignment",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/guest/revoke": {
      "post": {
        "tags": [
          "Client Guest Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#offerGroupId, 'OFFER_GROUP', 'PROMOTER_ASSIGN') }",
        "operationId": "revokeInventoryForOfferGroup",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/all": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getAllEventInventory",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sectionCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventInventoryDataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/create": {
      "post": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Creates an inventory category with optional choices for extras.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','INVENTORY_CATEGORY_WRITE') }",
        "operationId": "createInventoryCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/get": {
      "get": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Read an inventory category.,\n\n@PreAuthorize={ hasPermission(#id, 'INVENTORY_CATEGORY', 'INVENTORY_CATEGORY_READ') }",
        "operationId": "getInventoryCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/list": {
      "get": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Read all inventory categories with the give criteria.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_CATEGORY_READ') }",
        "operationId": "listInventoryCategories",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInventoryCategoryResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/template/create": {
      "post": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Create new or update a Inventory Category with Choice Set template.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'INVENTORY_CATEGORY_WRITE') }",
        "operationId": "createInventoryCategoryTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryCategoryTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryCategoryTemplateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/template/list": {
      "get": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "List inventory category templates with the given criteria.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'INVENTORY_CATEGORY_READ') }",
        "operationId": "getInventoryCategoryTemplates",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "nameLike",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInventoryCategoryTemplateResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/category/update": {
      "patch": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "A nested PATCH style endpoint to update an inventory category.,\n\n@PreAuthorize={ hasPermission(#request.getId(), 'INVENTORY_CATEGORY', 'INVENTORY_CATEGORY_WRITE') }",
        "operationId": "updateInventoryCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/item/create": {
      "post": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Creates inventory items,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','INVENTORY_WRITE') }",
        "operationId": "createInventoryItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/inventory/marketplaceData": {
      "get": {
        "tags": [
          "client-inventory-availability-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_READ') }",
        "operationId": "getClientInventoryItemsForMarketplaces",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "inventoryCategoryTypeFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EVENT_ACCESS",
                  "MERCHANDISE",
                  "ADD_ON",
                  "CHARITY",
                  "COLLECTIBLE"
                ]
              }
            }
          },
          {
            "name": "marketplaceIdFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "includeResaleMarketplace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventMarketplaceAllocatedInventoryResponseList"
                }
              }
            }
          }
        }
      }
    },
    "/client/inventory/section/item/create": {
      "post": {
        "tags": [
          "Client API Inventory Controller"
        ],
        "description": "Creates the section/row and inventory items assigned to them. If existing section/row codes are provided, new seats will be created in the corresponding section/row.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','INVENTORY_WRITE') }",
        "operationId": "createEventSectionInventory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventorySectionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/leave": {
      "post": {
        "tags": [
          "Client API Controller"
        ],
        "description": "Leave an organization.,\n\n@PreAuthorize={ none }",
        "operationId": "leaveOrg",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/list": {
      "get": {
        "tags": [
          "Client API Controller"
        ],
        "description": "YOOP_ADMIN endpoint for listing all clients.,\n\n@PreAuthorize={ hasPermission(null, 'CLIENT_LIST_ALL') }",
        "operationId": "listAllUnarchived",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientProfileResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/city/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_CITY_CREATE') }",
        "operationId": "createCity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/city/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_CITY_READ') }",
        "operationId": "getCity",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/city/list": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_CITY_READ') }",
        "operationId": "listCities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListCitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCityResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/country/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_COUNTRY_CREATE') }",
        "operationId": "createCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCountryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCountryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/country/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_COUNTRY_READ') }",
        "operationId": "getCountry",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCountryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/country/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_COUNTRY_READ') }",
        "operationId": "listCities_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCountryResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/geo-region/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_GEO_REGION_CREATE') }",
        "operationId": "createGeoRegion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGeoRegionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetGeoRegionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/geo-region/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_GEO_REGION_READ') }",
        "operationId": "getGeoRegion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetGeoRegionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/geo-region/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_GEO_REGION_READ') }",
        "operationId": "listGeoRegions",
        "parameters": [
          {
            "name": "countryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGeoRegionResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/places-data/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "Retrieves data for a Place by google placeId,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'LOCATION_PROFILE_CREATE') }",
        "operationId": "getPlaceLookupByPlaceId",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "googlePlaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlaceLookupByPlaceIdResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/profile/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'LOCATION_PROFILE_CREATE') }",
        "operationId": "createLocationProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/profile/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'LOCATION_PROFILE', 'LOCATION_PROFILE_READ') }",
        "operationId": "getLocationProfile_1",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/profile/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'LOCATION_PROFILE_READ') }",
        "operationId": "listLocationProfiles",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationProfileResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/profile/translations/update": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getId(), 'LOCATION_PROFILE', 'LOCATION_PROFILE_SET_TRANSLATIONS') }",
        "operationId": "updateLocationProfileTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationProfileTranslationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationProfileResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/location/profile/update": {
      "put": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getId(), 'LOCATION_PROFILE', 'LOCATION_PROFILE_UPDATE') }",
        "operationId": "updateLocationProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-chart/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getLocationProfileId(), 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_CREATE') }",
        "operationId": "createSeatChart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSeatChartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatChartResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/location/seat-chart/seats-io/create-seat-config": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getLocationProfileId(), 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_CREATE') }",
        "operationId": "createSeatsIOChartWithDefaultSeatConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSeatChartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-config/chart-create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getLocationProfileId(), 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_CREATE') }",
        "operationId": "createSeatConfigWithChartTypeSeatIO",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSeatConfigFromChartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-config/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getLocationProfileId(), 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_CREATE') }",
        "operationId": "createSeatConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSeatConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-config/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'SEAT_CONFIG', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "getSeatConfig",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-config/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#locationProfileId, 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "listSeatConfigs",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "seatConfigId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locationProfileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "seatChartId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSeatConfigResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seat-config/update": {
      "put": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getSeatConfigId(), 'SEAT_CONFIG', 'LOCATION_SEAT_CONFIG_UPDATE') }",
        "operationId": "updateSeatConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSeatConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seatChart/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#locationProfileId, 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "getSeatsChartListV2",
        "parameters": [
          {
            "name": "locationProfileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "seatChartId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSeatChartResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seatChart/seatingData": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#seatChartId, 'SEAT_CHART', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "getSeatingDataForChart",
        "parameters": [
          {
            "name": "seatChartId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatChartSeatConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seatChart/v2/seatingData": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getSeatChartId(), 'SEAT_CHART', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "getSeatingDataForChartV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSeatChartSeatConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSeatChartSeatConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/seats-io-chart/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#locationProfileId, 'LOCATION_PROFILE', 'LOCATION_SEAT_CONFIG_READ') }",
        "operationId": "getSeatsChartList",
        "parameters": [
          {
            "name": "locationProfileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "seatChartId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSeatChartResponse"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/location/type/create": {
      "post": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_TYPE_CREATE') }",
        "operationId": "createLocationType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/type/get": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_TYPE_READ') }",
        "operationId": "getLocationType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/location/type/list": {
      "get": {
        "tags": [
          "Client API Location Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LOCATION_TYPE_READ') }",
        "operationId": "listLocationTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationTypeResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/activity/status/list": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','EVENT_READ_PROFILE') }",
        "operationId": "getMarketplaceActivityStatusForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventActivityStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/category-offer-group/create": {
      "post": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getMarketplaceId(), 'MARKETPLACE', 'INVENTORY_CATEGORY_WRITE') }",
        "operationId": "createCategoryOfferGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCategoryOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/category-offer-group/delete": {
      "delete": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#inventoryCategoryId, 'INVENTORY_CATEGORY', 'INVENTORY_CATEGORY_WRITE') }",
        "operationId": "deleteCategoryOfferGroup",
        "parameters": [
          {
            "name": "inventoryCategoryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/category-offer-group/get": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#inventoryCategoryId, 'INVENTORY_CATEGORY', 'INVENTORY_CATEGORY_READ') }",
        "operationId": "getCategoryOfferGroup",
        "parameters": [
          {
            "name": "inventoryCategoryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCategoryOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/category-offer-group/list": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'INVENTORY_CATEGORY_READ') }",
        "operationId": "listCategoryOfferGroups",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "inventoryCategoryType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCategoryOfferGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/category-offer-group/update": {
      "patch": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getInventoryCategory().getId(), 'INVENTORY_CATEGORY', 'INVENTORY_CATEGORY_WRITE') }",
        "operationId": "updateCategoryOfferGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetCategoryOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/create": {
      "post": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'MARKETPLACE_CREATE') }",
        "operationId": "createMarketplace_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMarketplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/delete": {
      "delete": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'MARKETPLACE', 'MARKETPLACE_DELETE') }",
        "operationId": "deleteMarketplace",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/marketplace/get": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'MARKETPLACE', 'MARKETPLACE_READ') }",
        "operationId": "getMarketplace",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/list": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'MARKETPLACE_READ') }",
        "operationId": "listMarketplacesForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DRAW",
                  "AUCTION",
                  "PURCHASE",
                  "PROMOTER",
                  "CLIENT_GUEST",
                  "SECONDARY_EXCHANGE"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMarketplaceResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/offer-group/bulk/update": {
      "patch": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupIds(), 'OFFER_GROUP', 'OFFER_GROUP_UPDATE') }",
        "operationId": "updateOfferGroup_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOfferGroupBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOfferGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/offer-group/create": {
      "post": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getMarketplaceId(), 'MARKETPLACE', 'OFFER_GROUP_CREATE') }",
        "operationId": "createOfferGroup_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/offer-group/delete": {
      "delete": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'OFFER_GROUP', 'OFFER_GROUP_DELETE') }",
        "operationId": "deleteOfferGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/marketplace/offer-group/list": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#marketplaceId, 'MARKETPLACE', 'MARKETPLACE_READ') }",
        "operationId": "listOfferGroups",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOfferGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/offer-group/update": {
      "patch": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupId(), 'OFFER_GROUP', 'OFFER_GROUP_UPDATE') }",
        "operationId": "updateOfferGroup_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/reschedule": {
      "put": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "Reschedules a marketplace,\n\n@PreAuthorize={ hasPermission(#request.getId(), 'MARKETPLACE', 'MARKETPLACE_UPDATE') }",
        "operationId": "rescheduleMarketplace_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceRescheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/marketplace/seatChartData/list": {
      "get": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#marketplaceIds, 'MARKETPLACE', 'MARKETPLACE_READ') }",
        "operationId": "listAvailableSeatData_1",
        "parameters": [
          {
            "name": "marketplaceIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "fetchEventSeatMap",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SeatingChartResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/marketplace/update": {
      "patch": {
        "tags": [
          "Client API Marketplace Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getMarketplaceId(), 'MARKETPLACE', 'MARKETPLACE_UPDATE') }",
        "operationId": "updateMarketplace_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMarketplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/media/upload": {
      "post": {
        "tags": [
          "client-api-media-controller"
        ],
        "description": "Uploads a static asset to the client's media folder and returns the url. This is usually done before trying to create Media objects for during event creation.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'MEDIA_CREATE') }",
        "operationId": "uploadMedia",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "isBase64Encoded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/order/detail": {
      "get": {
        "tags": [
          "Client API Order Controller"
        ],
        "description": "retrieves order detail,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT','CUSTOMER_ORDER_LIST_READ') }",
        "operationId": "getOrderDetail",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "orderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientCustomerOrderDetailItemResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/order/list": {
      "get": {
        "tags": [
          "Client API Order Controller"
        ],
        "description": "Retrieves order list for the given event,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT','CUSTOMER_ORDER_LIST_READ') }",
        "operationId": "getOrdersList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterOption",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CustomerOrderListFilterOption.CREATOR_LISTING(marketplaceTypesFilter=[DRAW, AUCTION, PURCHASE, PROMOTER, CLIENT_GUEST], transactionActionFilter=null, shouldFilterByMarketplaceType=true, isRefundAction=false, externalPaymentTransactionProviderTypeFilter=com.enovlab.util.sql.OptionalParam@543e15b5)",
                "CustomerOrderListFilterOption.BOX_OFFICE_ONLY(marketplaceTypesFilter=[PURCHASE], transactionActionFilter=[EXTERNAL_PAYMENT_VALIDATION_SUCCESS], shouldFilterByMarketplaceType=true, isRefundAction=false, externalPaymentTransactionProviderTypeFilter=com.enovlab.util.sql.OptionalParam@7f8cc2ec)",
                "CustomerOrderListFilterOption.RESALE(marketplaceTypesFilter=[SECONDARY_EXCHANGE], transactionActionFilter=null, shouldFilterByMarketplaceType=true, isRefundAction=false, externalPaymentTransactionProviderTypeFilter=com.enovlab.util.sql.OptionalParam@6cbcab27)",
                "CustomerOrderListFilterOption.REFUND(marketplaceTypesFilter=[DRAW, AUCTION, PURCHASE, PROMOTER, CLIENT_GUEST], transactionActionFilter=[REFUND_SUCCESS, REFUND_SUCCESS_FORCED_WITH_FAILURE, REFUND_FAILURE], shouldFilterByMarketplaceType=false, isRefundAction=true, externalPaymentTransactionProviderTypeFilter=com.enovlab.util.sql.OptionalParam@265c2227)",
                "CustomerOrderListFilterOption.CHARGEBACK(marketplaceTypesFilter=[DRAW, AUCTION, PURCHASE, PROMOTER, CLIENT_GUEST, SECONDARY_EXCHANGE], transactionActionFilter=[REFUND_SUCCESS_FORCED_WITHOUT_ATTEMPT], shouldFilterByMarketplaceType=false, isRefundAction=true, externalPaymentTransactionProviderTypeFilter=com.enovlab.util.sql.OptionalParam@26b18e4)"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "previousPageKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CustomerOrderListSortColumn.ORDER_ID",
                "CustomerOrderListSortColumn.USER_NAME",
                "CustomerOrderListSortColumn.MARKETPLACE_TYPE",
                "CustomerOrderListSortColumn.TOTAL",
                "CustomerOrderListSortColumn.ORDER_DATE",
                "CustomerOrderListSortColumn.PROFIT_AMOUNT",
                "CustomerOrderListSortColumn.PROFIT_SHARE",
                "CustomerOrderListSortColumn.REVENUE",
                "CustomerOrderListSortColumn.TOTAL_REFUNDED"
              ]
            }
          },
          {
            "name": "sortAscending",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientCustomerOrderListItemResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/order/search": {
      "get": {
        "tags": [
          "Client API Order Controller"
        ],
        "description": "Retrieves orders matching search parameters across all events,\n\n@PreAuthorize={ hasPermission(null, 'CUSTOM_ORDER_LIST_GLOBAL_SEARCH') }",
        "operationId": "searchOrdersList",
        "parameters": [
          {
            "name": "afterDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "beforeDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "customerOrderId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userEmail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "VISA",
                "MASTERCARD",
                "AMEX"
              ]
            }
          },
          {
            "name": "cardLastFour",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOrderAmount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userIpAddress",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchClientCustomerOrderListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/payment/config/create": {
      "post": {
        "tags": [
          "client-api-payment-configuration-controller"
        ],
        "description": "Sets up preconfigured payment configs for clients.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE') }",
        "operationId": "createClientPreconfiguredPaymentConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientPreconfiguredPaymentConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPreconfiguredPaymentProcessorConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/active/dataList": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Retrieves list of promoters for a client,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getClientPromoterActiveDataList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/assign": {
      "post": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Creates token assignment groups for promoters,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'PROMOTER_ASSIGN') }",
        "operationId": "createPromoterInventory_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAssignmentPromoterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterTokenAssignmentGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/invites/failed/list": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Retrieves list of promoter invites which failed,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getClientPromoterFailedDataList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promoterUserId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterInviteListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/invites/pending/list": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Retrieves list of promoter invites which are pending,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getClientPromoterPendingDataList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promoterUserId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterInviteListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/list": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Retrieves list of promoters for a client,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT','PROMOTER_READ') }",
        "operationId": "getClientPromoters",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/list/download": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Endpoint to download the event's attendee list as an excel spreadsheet.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT','PROMOTER_READ') }",
        "operationId": "generateClientPromoterActiveDataList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/promoter/marketplace": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Returns details of the promoter marketplace for an event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getMarketplaceDetails_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/marketplaceSales": {
      "get": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Function for the Client Dashboard to retrieve all offer groups and the corresponding stats for a marketplace,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'PROMOTER_READ') }",
        "operationId": "getMarketplaceSalesByCategoryAndPromoterCommissionRate",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "promoterUserId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPromoterSalesDataDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/resend": {
      "put": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Creates token assignment groups for promoters,\n\n@PreAuthorize={ hasPermission(#inviteGroupId, 'TOKEN_ASSIGNMENT_INVITE_GROUP', 'PROMOTER_ASSIGN') }",
        "operationId": "resendInvite",
        "parameters": [
          {
            "name": "inviteGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/promoter/revoke": {
      "put": {
        "tags": [
          "Client Promoter Administration Controller"
        ],
        "description": "Revoke non accepted token assignments,\n\n@PreAuthorize={ hasPermission(#inviteGroupId, 'TOKEN_ASSIGNMENT_INVITE_GROUP', 'PROMOTER_ASSIGN') }",
        "operationId": "createPromoterInventory",
        "parameters": [
          {
            "name": "inviteGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/purchase": {
      "post": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupId(), 'OFFER_GROUP', 'BOX_OFFICE_SALE') }",
        "operationId": "purchase_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientExternalPaymentPurchaseOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/purchase/cart": {
      "post": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getPurchaseToken(), 'PURCHASE_TOKEN', 'BOX_OFFICE_SALE') }",
        "operationId": "purchaseCart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientExternalPaymentCartPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/purchase/cart/checkout": {
      "put": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupIds(), 'OFFER_GROUP', 'BOX_OFFICE_SALE') }",
        "operationId": "checkout_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockingCartCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LockingCartPurchaseCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/purchase/cart/clear": {
      "post": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getPurchaseToken(), 'PURCHASE_TOKEN', 'BOX_OFFICE_SALE') }",
        "operationId": "clearCart_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/purchase/notifications/receipts/resend": {
      "put": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'ADMIN_RESEND_NOTIFICATIONS') }",
        "operationId": "resendNotifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendPurchaseNotificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/purchase/unlock": {
      "post": {
        "tags": [
          "Purchase Controller - Client"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getOfferGroupId(), 'OFFER_GROUP', 'BOX_OFFICE_SALE') }",
        "operationId": "unlockToken_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/client/sales-group/create": {
      "post": {
        "tags": [
          "Client API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'SALES_GROUP_CREATE') }",
        "operationId": "createSalesGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalesGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSalesGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/sales-group/get": {
      "get": {
        "tags": [
          "Client API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#id, 'SALES_GROUP', 'SALES_GROUP_READ') }",
        "operationId": "getSalesGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSalesGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/sales-group/list": {
      "get": {
        "tags": [
          "Client API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'SALES_GROUP_READ') }",
        "operationId": "listSalesGroupsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSalesGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/sales-group/translation/create": {
      "post": {
        "tags": [
          "Client API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getSalesGroupId(), 'SALES_GROUP', 'SALES_GROUP_UPDATE') }",
        "operationId": "createOrUpdateSalesGroupTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalesGroupTranslationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/conference": {
      "get": {
        "tags": [
          "live-conference-client-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'LIVE_CONFERENCE_READ') }",
        "operationId": "getClientLiveConferenceInfo_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/conference/candidates": {
      "get": {
        "tags": [
          "live-conference-client-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'LIVE_CONFERENCE_READ') }",
        "operationId": "getClientLiveConferenceCandidates_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceCandidatesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "live-conference-client-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "createCandidates_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLiveConferenceCandidatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLiveConferenceCandidatesResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "live-conference-client-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "deleteLiveConferenceCandidates_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLiveConferenceCandidatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/conference/config": {
      "put": {
        "tags": [
          "live-conference-client-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "updateEventLiveConferenceConfig_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientUpdateLiveConferenceConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/end-live-stream": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Ends the live stream by stopping the media live channel if it is running, setting the liveStreamEndDate (defaults to now) and changing the event end date to be liveStreamEndDate + event streamReplaySeconds.If the end time is in the future, this will schedule a job to run at that time instead of executing immediately.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "end_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndLiveStreamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/info": {
      "get": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Get the live stream info for an event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'STREAM_INFRA_READ') }",
        "operationId": "info_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/info/v2": {
      "get": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Get the live stream info for an event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'STREAM_INFRA_READ') }",
        "operationId": "infoV2_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/infra/mp4": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Create infrastructure needed to stream an MP4 live event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "createMp4Infra_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMp4EventStreamInfraAtTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/infra/rtmp-push": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Create infrastructure needed to stream an RTMP_PUSH live event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "createRtmpInfra_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRtmpEventStreamInfraAtTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/infra/start-channel": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Start the channel that clients will stream to.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "startChannel_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Blocks if date is not specified. Else schedules job to start channel at given date."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/infra/stop-channel": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Stop the channel that clients stream to.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "stopChannel_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Blocks if date is not specified. Else schedules job to stop channel at given date."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/inventory-category-event-streams": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Create or update the inventory category event streams that setup which stream segments each inventory category has access to. Returns back all inventory category event streams for the event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "createInventoryCategoryEventStreams_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryCategoryEventStreamsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Delete inventory category event streams for an event. If the event streams is null, then all the category event streams for the event are deleted.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "deleteInventoryCategoryEventStreams_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInventoryCategoryEventStreamsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/live-stream": {
      "get": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Gets the (non-infra) live stream info for the event.,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'STREAM_INFRA_READ') }",
        "operationId": "getEventStreamSegments_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/segments": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Create or update stream segments for an event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "createEventStreamSegments_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamSegmentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Delete event stream segments. If segment numbers is null, it deletes all segments for the event.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "deleteEventStreamSegments_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEventStreamSegmentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/streaming/event/start-next-segment": {
      "post": {
        "tags": [
          "event-stream-client-controller"
        ],
        "description": "Starts the next event stream segment and ends the previous one(s) if any. If  there are no segments left, then this just ends the last segment.Updates the inventory category based live stream start/end times based on which segments that had access to.,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'STREAM_INFRA_MANAGE') }",
        "operationId": "startNextSegment_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartNextEventStreamSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/update": {
      "put": {
        "tags": [
          "Client API Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_UPDATE_PROFILE') }",
        "operationId": "updateClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/account": {
      "get": {
        "tags": [
          "Clint User Management Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'USER_SEARCH_PROFILE') }",
        "operationId": "getUserAccount",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/blacklistUser": {
      "put": {
        "tags": [
          "Clint User Management Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'USER_BLACKLIST_PROFILE') }",
        "operationId": "blacklistUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlacklistAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/client-config/delete": {
      "delete": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "Delete a client user's client config, removing them from the organization.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_USER_CLIENT_CONFIG_DELETE') }",
        "operationId": "deleteClientUserClientConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClientUserClientConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/client-config/update": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "Update a client config for a client user.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_USER_CLIENT_CONFIG_UPDATE') }",
        "operationId": "updateClientUserClientConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateClientUserClientConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/createAccount": {
      "post": {
        "tags": [
          "Clint User Management Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'USER_CREATE_PROFILE') }",
        "operationId": "createAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/get-my-profile": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "Get the calling user's profile.,\n\n@PreAuthorize={ none }",
        "operationId": "getCurrentClientUserProfile",
        "parameters": [
          {
            "name": "havingPermissions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCESS_CONTROL_MANAGE_ACCESS",
                  "ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED",
                  "ACCESS_CONTROL_DOWNLOAD_MANIFEST",
                  "ADMIN_USER_READ_PROFILE",
                  "ADMIN_USER_CREATE_PROFILE",
                  "ADMIN_USER_LOGOUT",
                  "ADMIN_RESEND_NOTIFICATIONS",
                  "BOX_OFFICE_ACCESS",
                  "BOX_OFFICE_USER_SEARCH",
                  "BOX_OFFICE_SALE",
                  "BOX_OFFICE_CONFIG_SET",
                  "BOX_OFFICE_CONFIG_READ",
                  "BOX_OFFICE_READ_DEVICES",
                  "BOX_OFFICE_MANAGE_DEVICES",
                  "BOX_OFFICE_REPORTING",
                  "CLIENT_READ_PROFILE",
                  "CLIENT_CREATE_PROFILE",
                  "CLIENT_CREATE_GATEWAY",
                  "CLIENT_UPDATE_GATEWAY",
                  "CLIENT_UPDATE_PROFILE",
                  "CLIENT_MANAGE_WHITELABEL",
                  "CLIENT_LIST_ALL",
                  "CLIENT_UPDATE_FEATURES",
                  "CLIENT_USERS_LIST",
                  "CLIENT_USER_CLIENT_INVITE_CREATE",
                  "CLIENT_USER_CLIENT_INVITE_REVOKE",
                  "CLIENT_USER_CLIENT_INVITE_RESEND",
                  "CLIENT_USER_CLIENT_INVITE_LIST",
                  "CLIENT_USER_CLIENT_CONFIG_UPDATE",
                  "CLIENT_USER_CLIENT_CONFIG_DELETE",
                  "CLIENT_PRECONFIGURED_FEE_CREATE",
                  "CLIENT_PRECONFIGURED_FEE_READ",
                  "FEE_SET",
                  "CLIENT_REFUND_FEE_SET",
                  "CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE",
                  "CLIENT_USER_ACTIVITY_INVALIDATE_CACHE",
                  "CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE",
                  "CLIENT_USER_CREATE_PROFILE",
                  "CLIENT_USER_LOGOUT",
                  "CLIENT_USER_READ_PROFILE",
                  "CLIENT_USER_SET_PASSWORD",
                  "CLIENT_USER_UPDATE_PROFILE",
                  "DISCOUNT_CREATE",
                  "DISCOUNT_UPDATE",
                  "DISCOUNT_READ",
                  "DISCOUNT_REPORTING",
                  "EVENT_ANALYTICS_TRACKER_READ",
                  "EVENT_ANALYTICS_TRACKER_UPDATE",
                  "EVENT_CANCEL",
                  "EVENT_CREATE_PROFILE",
                  "EVENT_CLONE",
                  "EVENT_POSTPONE",
                  "EVENT_READ_FINANCE_DATA",
                  "EVENT_READ_PROFILE",
                  "EVENT_DISPLAY_PROFILE",
                  "EVENT_SET_TRANSLATIONS",
                  "EVENT_UPDATE_PROFILE",
                  "EVENT_READ_PROFILE_WITH_SALES",
                  "EVENT_LIST",
                  "EVENT_NOTIFICATIONS_READ",
                  "EVENT_NOTIFICATIONS_CREATE",
                  "EVENT_NOTIFICATIONS_UPDATE",
                  "EVENT_NOTIFICATIONS_DELETE",
                  "EXCHANGE_CONFIG_WRITE",
                  "EXCHANGE_CONFIG_READ",
                  "EXCHANGE_PRIMARY_BULK_FILL_WRITE",
                  "EXCHANGE_PRIMARY_BULK_FILL_READ",
                  "SUB_DETAIL_CREATE",
                  "SUB_DETAIL_UPDATE",
                  "SUB_DETAIL_DELETE",
                  "EVENT_TIMELINE_CREATE",
                  "EVENT_TIMELINE_UPDATE",
                  "EVENT_TIMELINE_DELETE",
                  "EVENT_TIMELINE_GROUP_UPDATE",
                  "EVENT_GET_EXTERNAL_NOTIFICATION_SUBSCRIBERS",
                  "EVENT_AFFILIATE_CODE_CREATE",
                  "EVENT_AFFILIATE_CODE_UPDATE",
                  "EVENT_AFFILIATE_CODE_READ",
                  "EVENT_DRAFT_CREATE",
                  "EVENT_DRAFT_UPDATE",
                  "EVENT_DRAFT_DELETE",
                  "EVENT_DRAFT_REVIEW_SUBMIT",
                  "EVENT_DRAFT_REVIEW_CANCEL",
                  "EVENT_DRAFT_REVIEW_APPROVE",
                  "EVENT_DRAFT_LIST",
                  "EVENT_DRAFT_READ",
                  "EVENT_COLLAB_INVITE_CREATE",
                  "EVENT_COLLAB_INVITE_REVOKE",
                  "EVENT_COLLAB_INVITE_RESEND",
                  "EVENT_COLLAB_INVITE_ACCEPT",
                  "EVENT_COLLAB_INVITE_READ",
                  "EVENT_COLLAB_INVITE_LIST",
                  "EVENT_COLLAB_INVITE_APPROVE",
                  "EVENT_COLLAB_INVITE_REJECT",
                  "EVENT_COLLAB_ASSIGN_ROLE",
                  "EVENT_COLLAB_USERS_LIST",
                  "EVENT_COLLAB_USERS_INTERNAL_ADD",
                  "EVENT_COLLAB_USER_REMOVE",
                  "EVENT_COLLAB_USER_UPDATE",
                  "EVENT_MEDIA_UPDATE",
                  "FIREBASE_LOGIN_CLIENT_USER",
                  "INVENTORY_WRITE",
                  "INVENTORY_READ",
                  "INVENTORY_UPDATE_VALIDITY",
                  "INVENTORY_CATEGORY_WRITE",
                  "INVENTORY_CATEGORY_READ",
                  "INVENTORY_CHOICE_SET_WRITE",
                  "INVENTORY_CHOICE_SET_READ",
                  "INVENTORY_CATEGORY_CHOICE_CONFIG_WRITE",
                  "INVENTORY_CATEGORY_CHOICE_CONFIG_READ",
                  "LOCATION_CITY_CREATE",
                  "LOCATION_CITY_READ",
                  "LOCATION_COUNTRY_CREATE",
                  "LOCATION_COUNTRY_READ",
                  "LOCATION_GEO_REGION_CREATE",
                  "LOCATION_GEO_REGION_READ",
                  "LOCATION_PROFILE_CREATE",
                  "LOCATION_PROFILE_UPDATE",
                  "LOCATION_PROFILE_READ",
                  "LOCATION_PROFILE_SET_TRANSLATIONS",
                  "LOCATION_UPDATE_PROFILE",
                  "LOCATION_SEAT_CONFIG_CREATE",
                  "LOCATION_SEAT_CONFIG_READ",
                  "LOCATION_SEAT_CONFIG_UPDATE",
                  "LOCATION_TYPE_CREATE",
                  "LOCATION_TYPE_READ",
                  "LOCATION_TYPE_UPDATE",
                  "LIVE_CONFERENCE_MANAGE",
                  "LIVE_CONFERENCE_READ",
                  "MARKETPLACE_CANCEL",
                  "MARKETPLACE_CREATE",
                  "MARKETPLACE_READ",
                  "MARKETPLACE_RUN_JOBS",
                  "MARKETPLACE_UPDATE",
                  "MARKETPLACE_DELETE",
                  "MARKETPLACE_OFFER_OWNED_TOKEN_REFUND",
                  "MEDIA_READ",
                  "MEDIA_CREATE",
                  "NOTIFICATIONS_SEND_CUSTOM_EMAIL",
                  "NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST",
                  "NOTIFICATIONS_TEST",
                  "NOTIFICATIONS_CREATE",
                  "OFFER_REFUND",
                  "OFFER_GROUP_CANCEL",
                  "OFFER_GROUP_CREATE",
                  "OFFER_GROUP_UPDATE",
                  "OFFER_GROUP_DELETE",
                  "CUSTOMER_ORDER_LIST_READ",
                  "CUSTOM_ORDER_LIST_GLOBAL_SEARCH",
                  "PERFORMER_CREATE_PROFILE",
                  "PERFORMER_UPDATE_PROFILE",
                  "PERFORMER_SET_TRANSLATIONS",
                  "PROMOTER_ASSIGN",
                  "PROMOTER_READ",
                  "READ_ACCESS_CONTROL_DATA",
                  "READ_ACCESS_CONTROL_SUMMARY_DATA",
                  "REPORTING_ACCESS_CONTROL_DATA",
                  "REPORTING_READ_SALES_DATA",
                  "REPORTING_READ_SALES_DATA_DATE_RANGE",
                  "REPORTING_READ_CLIENT_FEES_DATA",
                  "REPORTING_READ_TRANSACTIONS_DATA",
                  "REPORTING_DISPLAY_REPORTS",
                  "REPORTING_S3_EXPORT",
                  "SALES_GROUP_READ",
                  "SALES_GROUP_CREATE",
                  "SALES_GROUP_UPDATE",
                  "SEAT_CONFIGURATION_READ",
                  "SEAT_CONFIGURATION_CREATE",
                  "SPONSOR_CREATE",
                  "SPONSOR_READ",
                  "SPONSOR_GROUP_SET",
                  "STREAM_INFRA_MANAGE",
                  "STREAM_INFRA_READ",
                  "TOUR_CREATE",
                  "TOUR_SET_TRANSLATIONS",
                  "TOUR_UPDATE",
                  "USER_BLACKLIST_PROFILE",
                  "USER_CREATE_PROFILE",
                  "USER_SEARCH_PROFILE",
                  "USER_UPDATE_PROFILE",
                  "READ_ACCESS_CONTROL_RESTRICTIONS",
                  "WRITE_ACCESS_CONTROL_RESTRICTIONS",
                  "USER_PAYMENT_MEANS_UPDATE",
                  "USER_TRANSACTIONS_READ"
                ]
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/accept": {
      "put": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Accept an invite using a code.,\n\n@PreAuthorize={ none }",
        "operationId": "acceptInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptClientUserClientInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/accept/public": {
      "put": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Create a user account and accept an invite in one step.,\n\n@PreAuthorize={ none }",
        "operationId": "acceptInvite_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginOrCreateAccountAndAcceptClientInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUserLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/check-account-existence/public": {
      "get": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Use your invite code to check account existance. Only works while the invite is pending.,\n\n@PreAuthorize={ none }",
        "operationId": "checkAccountExistence",
        "parameters": [
          {
            "name": "inviteId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "acceptanceCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/create": {
      "post": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Creates and sends an invitation for a client user to join an org.,\n\n@PreAuthorize={ hasPermission(#request.getClientId(), 'CLIENT', 'CLIENT_USER_CLIENT_INVITE_CREATE') }",
        "operationId": "inviteUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientUserClientInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/decline/public": {
      "put": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Decline an invite to join an org.,\n\n@PreAuthorize={ none }",
        "operationId": "declineInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineClientUserClientInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/get/public": {
      "get": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Public endpoint to use for retrieving invite info before deciding to accept or decline.,\n\n@PreAuthorize={ none }",
        "operationId": "getInvitePublic",
        "parameters": [
          {
            "name": "inviteId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "acceptanceCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/list": {
      "get": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Retrieve list of invites sent by the given org.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'CLIENT_USER_CLIENT_INVITE_LIST') }",
        "operationId": "listInvitesSentByOrg",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/resend": {
      "post": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Re-sends an invitation for a client user to join an org.,\n\n@PreAuthorize={ hasPermission(#id, 'CLIENT_USER_CLIENT_INVITE', 'CLIENT_USER_CLIENT_INVITE_RESEND') }",
        "operationId": "resend_1",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/invite/revoke": {
      "put": {
        "tags": [
          "Client User Invite Controller"
        ],
        "description": "Revoke an invite to join an org.,\n\n@PreAuthorize={ hasPermission(#request.getInviteId(), 'CLIENT_USER_CLIENT_INVITE', 'CLIENT_USER_CLIENT_INVITE_REVOKE') }",
        "operationId": "revokeInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeClientUserClientInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserClientInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/list": {
      "get": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "List client users for a particular client.,\n\n@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'CLIENT_USERS_LIST') }",
        "operationId": "listClientUsers",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientUserClientInfoListItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client/user/unblacklistUser": {
      "put": {
        "tags": [
          "Clint User Management Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'USER_BLACKLIST_PROFILE') }",
        "operationId": "unblacklistUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnBlacklistAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client/user/update-my-profile": {
      "put": {
        "tags": [
          "Client User Administration Controller"
        ],
        "description": "Updates the calling user's profile.,\n\n@PreAuthorize={ none }",
        "operationId": "updateCurrentClientUserProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/client/userActivity/cache/invalidate": {
      "put": {
        "tags": [
          "Client User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_USER_ACTIVITY_INVALIDATE_CACHE') }",
        "operationId": "deleteUserActivityCache",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/client/userActivity/event/cache/invalidate": {
      "put": {
        "tags": [
          "Client User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_USER_ACTIVITY_INVALIDATE_CACHE') }",
        "operationId": "deleteAllUserActivityCacheForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/clientGuest/userPurchase/checkout": {
      "get": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "checkout_7",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupAssignmentCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clientGuest/userPurchase/public/checkout": {
      "get": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "checkout_6",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupAssignmentCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clientGuest/userPurchase/public/decline": {
      "get": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "declineOfferGroup_1",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/clientGuest/userPurchase/public/validate": {
      "get": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validate_1",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/clientGuest/userPurchase/purchase": {
      "get": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchaseOld_1",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Client Guest Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchase_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedOfferGroupPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/configuration/public": {
      "get": {
        "tags": [
          "User configuration controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discount/public/code/get": {
      "get": {
        "tags": [
          "user-api-discount-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validateDiscountCode_1",
        "parameters": [
          {
            "name": "discountCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiscountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discount/validateCode": {
      "put": {
        "tags": [
          "user-api-discount-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "validateDiscountCode",
        "parameters": [
          {
            "name": "discountCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/draw/checkout": {
      "put": {
        "tags": [
          "List/Draw Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "privateCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/draw/deleteEntry": {
      "put": {
        "tags": [
          "List/Draw Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "deleteEntry",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/draw/entry": {
      "post": {
        "tags": [
          "List/Draw Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "createOrUpdateEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DrawResponse"
                }
              }
            }
          }
        }
      }
    },
    "/draw/public/checkout": {
      "put": {
        "tags": [
          "List/Draw Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "checkout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/checkInCount": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Retrieves the number of checked in Event Goers for an event,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_DATA') }",
        "operationId": "eventCheckInCount",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventCheckInCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/checkIn": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Checks in a set of tokens, requires a valid Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "checkInTokensWithCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoWithCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/checkIn/undo": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Undo the previous checkin of tokens,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "undoCheckInTokensWithCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/getMore": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Returns additional tokens related to a Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getMoreTokensForCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckInInfoResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/merchandisePickedUp": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher method to update whether or not merchandise for InventoryItem was picked up,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "updateOnlineMerchandisePickedUpWithCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoWithCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/merchandisePickedUp/undo": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher method to undo previously set merchandisePickedUp status,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "undoOnlineMerchandisePickedUpWithCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/code/validateCode": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Validates a Rotating Yoop Id or QR code and returns the corresponding tokens,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "validateCodeAndGetUserTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/decline": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Declines a token,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "decline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlDeclineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/decline/undo": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Undo the previous decline of a token,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "undoDecline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlDeclineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/finalDecline": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to reject entry,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED') }",
        "operationId": "finalDecline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlDeclineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/finalDecline/undo": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to revert the previous rejection of an Event Goer,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED') }",
        "operationId": "undoFinalDecline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlDeclineRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/getTokenHistory": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to get the history of a token,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED') }",
        "operationId": "getTokenHistory",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/invalidateToken": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Yoop Administrator function to invalidate a token,\n\n@PreAuthorize={ hasPermission(#tokenId, 'INVENTORY_ITEM', 'INVENTORY_UPDATE_VALIDITY') }",
        "operationId": "invalidateTokenForUser",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/list": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Retrieves the For clients Event List,\n\n@PreAuthorize={ none }",
        "operationId": "eventList_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsherEventListResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/offline/manifest": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Retrieves a list of all token holders of an event for offline mode or searches for specific token holders,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getEventManifest",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastProcessedBatchDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryManifestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/offlineBatch": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "After an Usher App went offline and comes back online again, the app can sent all the actions that were done while offline to the backend for processing,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_DOWNLOAD_MANIFEST') }",
        "operationId": "createOfflineAccessControlBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/checkIn": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to checkin an Event Goer without requiring a Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT' ,'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "checkInOnlineUserWithUserId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/getEventEscalationList": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to get the list of Event Goers which were escalated by the Ushers,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED') }",
        "operationId": "getEventEscalationList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventEscalationItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/getEventEscalationListSize": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to get the number of Event Goers that are currently in escalated status,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED') }",
        "operationId": "getEventEscalationListSize",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventEscalationItemListSizeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/getMore": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to retrieve related tokens without requiring a Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getMoreTokensWithUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckInInfoResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/getOrderUserInfo": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to retrieve tokens for an Event Goer using order id without requiring a Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getUserTokenInfoWithCustomerOrderId",
        "parameters": [
          {
            "name": "customerOrderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/getUserInfo": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to retrieve tokens for an Event Goer without requiring a Rotating Yoop Id or QR code,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getUserTokenInfoWithUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/merchandisePickedUp": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager method to update whether or not merchandise for InventoryItem was picked up,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "updateOnlineMerchandisePickedUpWithPrivilege",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlTokenInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/offlineBatch": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "After the Usher Manager App went offline and comes back online again, the Usher Manager app can sent all the actions that were done while offline to the backend for processing,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_DOWNLOAD_MANIFEST') }",
        "operationId": "createOfflineAccessControlBatchPrivileged",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/privileged/userSearch": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Usher Manager Function to download the Master List of Event Goers,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getUsersForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "queryString",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMasterListResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/restrictions/get": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_RESTRICTIONS') }",
        "operationId": "getAccessControlRestrictionsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/restrictions/scan-window/set": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'WRITE_ACCESS_CONTROL_RESTRICTIONS') }",
        "operationId": "updateAccessControlScanTimeWindowForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessControlScanTimeRangeUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/restrictions/upsert": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'WRITE_ACCESS_CONTROL_RESTRICTIONS') }",
        "operationId": "upsertAccessControlRestrictionsForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventAccessControlConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/revalidateToken": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Yoop Administrator function to restore an invalidated token,\n\n@PreAuthorize={ hasPermission(#tokenId, 'INVENTORY_ITEM', 'INVENTORY_UPDATE_VALIDITY') }",
        "operationId": "revalidateTokenForUser",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/userProfilePictures": {
      "post": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Retrieves a short-lived user profile picture URL,\n\n@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "getUserProfilePictureUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfilePicturesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfilePicturesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/verifyPicture": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Verifies a profile picture,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "verifyPicture",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/accessControl/verifyPicture/undo": {
      "put": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "Undos the Verification of a profile picture,\n\n@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'ACCESS_CONTROL_MANAGE_ACCESS') }",
        "operationId": "undoVerifyPicture",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/admin/packageInventory": {
      "post": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_CREATE_PROFILE') }",
        "operationId": "createEventPackaging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventInventoryPackageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/admin/profile": {
      "get": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_READ_PROFILE') }",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAdminResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/admin/profileList": {
      "get": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_READ_PROFILE') }",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "showUpcomingEvents",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/admin/retryPurchase": {
      "put": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_CREATE_PROFILE') }",
        "operationId": "retryPackagePurchase",
        "parameters": [
          {
            "name": "parentOfferId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/cancel": {
      "post": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','EVENT_CANCEL') }",
        "operationId": "cancelEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCancelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/client/list": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_READ_PROFILE') }",
        "operationId": "eventList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/client/salesGroupTree": {
      "get": {
        "tags": [
          "Event Access Control Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'INVENTORY_READ') }",
        "operationId": "getSalesGroupTree_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/profile": {
      "put": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_UPDATE_PROFILE') }",
        "operationId": "updateEventProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAdminResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_CREATE_PROFILE') }",
        "operationId": "createEventProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventProfileCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventAdminResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/profile/addTranslations": {
      "post": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_SET_TRANSLATIONS') }",
        "operationId": "addEventProfileTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTranslationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/carouselList": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns list of carousel information with events associated to all carousels,\n\n@PreAuthorize={ none }",
        "operationId": "getCarouselInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CarouselInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profile": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a specific event.,\n\n@PreAuthorize={ none }",
        "operationId": "getEventProfile",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vanityName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketplaceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profile/V2": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a specific event.,\n\n@PreAuthorize={ none }",
        "operationId": "getEventProfileV2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vanityName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketplaceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profile/active": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a specific event with active marketplaces.,\n\n@PreAuthorize={ none }",
        "operationId": "getActiveMarketplace",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "marketplaceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profileList": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a list of all upcoming events without filters,\n\n@PreAuthorize={ none }",
        "operationId": "getOpenEventProfiles_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a list of all upcoming events that meet the given filter criteria.,\n\n@PreAuthorize={ none }",
        "operationId": "getOpenEventProfiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profileList/search": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a list of events that match the query.,\n\n@PreAuthorize={ none }",
        "operationId": "searchEventProfiles",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "performerProfileIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "locationProfileId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profileList/tag": {
      "put": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns tag information along with events related to that tag. The first tag passed in should be the primary tag,\n\n@PreAuthorize={ none }",
        "operationId": "getEventTagDetail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventTagInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profileListForLocation": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a list of all upcoming events for a location,\n\n@PreAuthorize={ none }",
        "operationId": "getOpenEventProfilesForLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/profileListForPerformer": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a list of all upcoming events for a performer,\n\n@PreAuthorize={ none }",
        "operationId": "getOpenEventProfilesForPerformer",
        "parameters": [
          {
            "name": "performerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/seatChartData": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Returns a specific event with active marketplaces.,\n\n@PreAuthorize={ none }",
        "operationId": "getEventSeatChart",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/event/public/tag/list": {
      "get": {
        "tags": [
          "Event User Controller"
        ],
        "description": "Read all categories tags with the given criteria.,\n\n@PreAuthorize={ none }",
        "operationId": "listInventoryCategoryTags",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInventoryCategoryTagGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/refund": {
      "post": {
        "tags": [
          "Event User Refund Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "issueUserOwnedInventoryItemsRefund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/refund/checkout": {
      "get": {
        "tags": [
          "Event User Refund Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "refundCheckout",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RefundCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/event/revokeLimit": {
      "put": {
        "tags": [
          "event-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'EVENT_UPDATE_PROFILE') }",
        "operationId": "updateEventTokenRevokeLimit",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revokeLimit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/cancel": {
      "delete": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "cancelBid",
        "parameters": [
          {
            "name": "bidId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/checkout": {
      "post": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getBidCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBidCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/create": {
      "post": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "createBid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBidRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/list": {
      "post": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "listBids",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListBidsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListBidsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/stats/public": {
      "get": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getBidStats",
        "parameters": [
          {
            "name": "inventoryCategoryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/bid/update": {
      "put": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "updateBid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBidRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBidResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/info": {
      "get": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getExchangeInfo",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/public/category/detail": {
      "post": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "Creates an inventory category with optional choices for extras.,\n\n@PreAuthorize={ none }",
        "operationId": "getCategoryMarketplaceData_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeInventoryCategoryDetailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGetInventoryCategoryExchangeInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exchange/public/category/info": {
      "post": {
        "tags": [
          "User API Exchange Controller"
        ],
        "description": "Creates an inventory category with optional choices for extras.,\n\n@PreAuthorize={ none }",
        "operationId": "getCategoryMarketplaceData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeInventoryCategoryMarketplaceDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/create": {
      "post": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_GATEWAY') }",
        "operationId": "createGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreateGatewayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyGatewayAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/list": {
      "get": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_GATEWAY') }",
        "operationId": "listGateway",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyListGatewayResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/redact": {
      "put": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_GATEWAY') }",
        "operationId": "redactGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedactGatewayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/test-payment/purchase-one-dollar": {
      "post": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_GATEWAY') }",
        "operationId": "purchaseOneDollar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentProcessOneDollarTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/test-payment/refund": {
      "post": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_CREATE_GATEWAY') }",
        "operationId": "refund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayRefundFullTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gateway/update": {
      "put": {
        "tags": [
          "Payment gateway Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'CLIENT_UPDATE_GATEWAY') }",
        "operationId": "updateGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentUpdateGatewayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpreedlyGatewayAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/geoData/public/cities": {
      "get": {
        "tags": [
          "GeoData Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getCities",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoDataResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/geoData/public/countries": {
      "get": {
        "tags": [
          "GeoData Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getCountries",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/geoData/public/geoRegions": {
      "get": {
        "tags": [
          "GeoData Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getGeoRegions",
        "parameters": [
          {
            "name": "countryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoRegionResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inbox/notifications": {
      "get": {
        "tags": [
          "Inbox Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getNotifications",
        "parameters": [
          {
            "name": "fromDateTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inbox/setAllAsRead": {
      "put": {
        "tags": [
          "Inbox Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "setNotificationsToRead",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/inbox/setAsArchived": {
      "put": {
        "tags": [
          "Inbox Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "setNotificationToArchived",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/inbox/setAsRead": {
      "put": {
        "tags": [
          "Inbox Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "setNotificationToRead",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/inbox/unreadCount": {
      "get": {
        "tags": [
          "Inbox Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getUnreadNotificationsCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationUnreadCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/integration-test/verify-email": {
      "get": {
        "tags": [
          "Integration Test Controller"
        ],
        "description": "Allows the user to verify their email address without a link.,\n\n@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "verifyAccountEmail",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loadtest/public/login": {
      "post": {
        "tags": [
          "Load test Account Controller"
        ],
        "description": "Allows the user to login,\n\n@PreAuthorize={ none }",
        "operationId": "userLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/location/public/profile": {
      "get": {
        "tags": [
          "Venue/Location Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getLocationProfile",
        "parameters": [
          {
            "name": "locationProfileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleLocationProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Updates a Marketplace,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_UPDATE') }",
        "operationId": "updateMarketplace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Creates a Marketplace for an Event,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_CREATE') }",
        "operationId": "createMarketplace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/addTranslations": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Adds language translations to a marketplace,\n\n@PreAuthorize={ hasPermission(null,'EVENT_SET_TRANSLATIONS') }",
        "operationId": "addMarketplaceTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceTranslationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/archiveOfferDisplay": {
      "put": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "archiveOfferForDisplay",
        "parameters": [
          {
            "name": "offerIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/cancel": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Cancels a Marketplace,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_CANCEL') }",
        "operationId": "cancelMarketplace",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/declineOfferPayment": {
      "put": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "declinePayment",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "declinePayment_1",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/enable": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Enables a marketplace,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_CREATE') }",
        "operationId": "enableMarketplace",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/inventorySelection/public/seats": {
      "get": {
        "tags": [
          "inventory-selection-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getAvailableSeatList",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/inventorySelection/public/seats/forSections": {
      "get": {
        "tags": [
          "inventory-selection-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getAvailableSeatList_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sectionCodes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/inventorySelection/selectionGroup": {
      "post": {
        "tags": [
          "inventory-selection-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "selectSelectionGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchSelectionGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/inventorySelection/selectionGroups": {
      "get": {
        "tags": [
          "inventory-selection-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getSelectionGroups",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryGroupingListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroup": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Updates a Category/OfferGroup for a Marketplace,\n\n@PreAuthorize={ hasPermission(null,'OFFER_GROUP_UPDATE') }",
        "operationId": "updateOfferGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferGroupUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Creates OfferGroup for a Marketplace.,\n\n@PreAuthorize={ hasPermission(null,'OFFER_GROUP_CREATE') }",
        "operationId": "createOfferGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfferGroupsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOfferGroupsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroup/addTranslations": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Adds language translations to a Category/OfferGroup,\n\n@PreAuthorize={ hasPermission(null,'EVENT_SET_TRANSLATIONS') }",
        "operationId": "addOfferGroupTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferGroupTranslationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroup/cancel": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Cancels an offer group and refunds all offers from that offer group,\n\n@PreAuthorize={ hasPermission(#offerGroupId, 'OFFER_GROUP', 'OFFER_GROUP_CANCEL') }",
        "operationId": "cancelOfferGroup",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroup/tier": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Adds tiers to offer groups,\n\n@PreAuthorize={ hasPermission(null,'OFFER_GROUP_UPDATE') }",
        "operationId": "upsertOfferGroupTiers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferGroupTierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroups/related": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getValidRelatedOfferGroupsDeprecated",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedOfferGroupListResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/marketplace/offerGroups/related/upsells": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getUpsoldRelatedOfferGroups",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/offerGroups/upgrade-options": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns a list of offer groups from a given list of offerGroupIds. The discounted prices is price differences against offer passed in,\n\n@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getOfferGroupList_5",
        "parameters": [
          {
            "name": "offerGroupIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "cartOfferGroupIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfTokens",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "upgradeSourceOfferId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/pause": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Pauses a Marketplace,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_UPDATE') }",
        "operationId": "pauseMarketplace",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/availableSections": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getAvailableSectionsList_1",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/availableSections/v2": {
      "put": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getAvailableSectionsListV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableSectionsListRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/code/validate": {
      "post": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validatePrivateMarketplaceCodeExistInEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePrivateMarketplaceCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/offerGroup/detail": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns an offer group for a given offerGroupId,\n\n@PreAuthorize={ none }",
        "operationId": "getOfferGroupList_4",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/offerGroups": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getOfferGroupList_1",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/marketplace/public/offerGroups/get": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns an offer group for a given offerGroupId,\n\n@PreAuthorize={ none }",
        "operationId": "getOfferGroupById",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cartOfferGroupIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfTokens",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "upgradeSourceOfferId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/offerGroups/idList": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns a list of offer groups from a given list of offerGroupIds,\n\n@PreAuthorize={ none }",
        "operationId": "getOfferGroupList_3",
        "parameters": [
          {
            "name": "offerGroupIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "cartOfferGroupIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfTokens",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/offerGroups/related": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getRelatedOfferGroups",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/offerGroups/v2": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns a paginated list of offer groups for a given list of marketplace IDs.,\n\n@PreAuthorize={ none }",
        "operationId": "getOfferGroupList_2",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/marketplace/public/offerGroups/v3": {
      "post": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "Returns a paginated list of offer groups for a given list of marketplace IDs.,\n\n@PreAuthorize={ none }",
        "operationId": "getOfferGroupListV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleOfferGroupListRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/salesGroupTree": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getSalesGroupTree",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/marketplace/public/seatChartData/list": {
      "get": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "listAvailableSeatData",
        "parameters": [
          {
            "name": "marketplaceIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "fetchEventSeatMap",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SeatingChartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/public/seatChartData/list/V2": {
      "post": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "listAvailableSeatDataV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAvailableSeatDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SeatingChartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/refund": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Issues refunds to all Event Goers that purchased tokens for a Category/OfferGroup,\n\n@PreAuthorize={ hasPermission(null,'OFFER_REFUND') }",
        "operationId": "issueRefund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminRefundOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/refund/chargeback": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Handles chargeback for offer,\n\n@PreAuthorize={ hasPermission(null,'OFFER_REFUND') }",
        "operationId": "handleChargeback",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customerOrderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "chargebackId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "blacklistUser",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/refund/reverse": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Reverts a refund if it had been forced to succeed and inventory revoked,\n\n@PreAuthorize={ hasPermission(null,'OFFER_REFUND') }",
        "operationId": "reverseRefund",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "refundTransactionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/reschedule": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Reschedules a Marketplace,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_UPDATE') }",
        "operationId": "rescheduleMarketplace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceRescheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketplaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/resume": {
      "put": {
        "tags": [
          "Marketplace Administration Controller"
        ],
        "description": "Resumes a Marketplace after being paused,\n\n@PreAuthorize={ hasPermission(null,'MARKETPLACE_UPDATE') }",
        "operationId": "resumeMarketplace",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/marketplace/seatChartData/upgrade-options/list": {
      "post": {
        "tags": [
          "Marketplace User Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "listUpgradeOptionsSeatData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListUpgradeOptionsSeatDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SeatingChartResponse"
                }
              }
            }
          }
        }
      }
    },
    "/marketplaceCategoryPrice": {
      "get": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getMarketplaceCategoryPrice",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceCategoryPriceResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/newsletter/public/subscribe": {
      "put": {
        "tags": [
          "Newsletter Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "subscribe",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/notification/notificationTranslations/cache/invalidate": {
      "put": {
        "tags": [
          "Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE') }",
        "operationId": "loadClientTranslations",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notification/template": {
      "post": {
        "tags": [
          "Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_CREATE') }",
        "operationId": "createNotificationTemplate",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notifications/custom/eventEmail": {
      "post": {
        "tags": [
          "Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationCustomRequest.getEventId(), 'EVENT','NOTIFICATIONS_SEND_CUSTOM_EMAIL') }",
        "operationId": "sendCustomEmailForEvent_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCustomEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/custom/eventEmail/list": {
      "get": {
        "tags": [
          "Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST') }",
        "operationId": "getCustomEventEmailList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCustomEmailListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/custom/eventEmail/preview": {
      "post": {
        "tags": [
          "Event Notifications Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#notificationCustomRequest.getEventId(), 'EVENT','NOTIFICATIONS_SEND_CUSTOM_EMAIL') }",
        "operationId": "sendCustomEmailPreviewForEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCustomEmailPreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/offer-group/public/get": {
      "get": {
        "tags": [
          "Offer Group User Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getOfferGroupList",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetOfferGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/offer/offers/upgradable": {
      "post": {
        "tags": [
          "Offer User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getOffersUpgradability",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOffersUpgradabilityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OffersUpgradabilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/offer/upgrade-options": {
      "post": {
        "tags": [
          "Offer User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getOfferUpgradeOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOfferUpgradeOptionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleOfferGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/box-office/complete": {
      "post": {
        "tags": [
          "box-office-callback-controller-deprecated"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getCustomerOrderId(), 'CUSTOMER_ORDER', 'BOX_OFFICE_SALE') }",
        "operationId": "processBoxOfficePurchase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessExternalPaymentBoxOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessExternalPaymentBoxOfficeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/external/cart/initiateExternalPayment": {
      "post": {
        "tags": [
          "external-payment-callback-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "initiateExternalPaymentCart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateExternalPaymentCartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateExternalPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/external/initiateExternalPayment": {
      "post": {
        "tags": [
          "external-payment-callback-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "initiateExternalPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateExternalPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateExternalPaymentResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/payment/external/public/citcon/transaction/callback": {
      "post": {
        "tags": [
          "external-payment-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "processCitconCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "all": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "writeOnly": true
                  },
                  "empty": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/external/stripe/public/transaction/callback": {
      "post": {
        "tags": [
          "external-payment-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "processStripeCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/external/user/purchase": {
      "post": {
        "tags": [
          "external-payment-callback-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "processUserCallbackForCitcon",
        "parameters": [
          {
            "name": "signedExternalPaymentKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/marketplace/repayment": {
      "put": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "retryMarketplacePayment",
        "parameters": [
          {
            "name": "offerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "checkedCheckboxIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fraudSessionId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMeans": {
      "get": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getPaymentMeans",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMeans"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "createPaymentMeans",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMeansRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMeans"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "deletePaymentMeans",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMeans"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMeans/setDefault": {
      "put": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "setDefaultPaymentMeans",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMeans"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMeans/update": {
      "put": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "updatePaymentMeansAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMeansUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMeans"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMeans/verify": {
      "put": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "verifyPaymentMeans",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMeans"
                }
              }
            }
          }
        }
      }
    },
    "/payment/paymentMethods": {
      "get": {
        "tags": [
          "payment-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getPaymentMethods",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payout/archive": {
      "put": {
        "tags": [
          "payout-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "archivePayoutMethod",
        "parameters": [
          {
            "name": "payoutMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutMethodListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payout/methods": {
      "get": {
        "tags": [
          "payout-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getPayoutMeans",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutMethodListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payout/paypal": {
      "post": {
        "tags": [
          "payout-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "createOrUpdatePaypalPayoutMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaypalPayoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutMethodResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payout/retry": {
      "put": {
        "tags": [
          "payout-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "retryOfferGroupPayout_1",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "payoutMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResaleOfferGroup"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/performer/profile": {
      "put": {
        "tags": [
          "Performer Admin Controller"
        ],
        "description": "Updates a performer profile,\n\n@PreAuthorize={ hasPermission(null,'PERFORMER_UPDATE_PROFILE') }",
        "operationId": "updatePerformerProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformerProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PerformerProfileResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Performer Admin Controller"
        ],
        "description": "Creates a profile for a performer,\n\n@PreAuthorize={ hasPermission(null,'PERFORMER_CREATE_PROFILE') }",
        "operationId": "createPerformerProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicPerformerProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PerformerProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/performer/profile/addTranslations": {
      "post": {
        "tags": [
          "Performer Admin Controller"
        ],
        "description": "Adds language translations to a performer profile,\n\n@PreAuthorize={ hasPermission(null,'PERFORMER_SET_TRANSLATIONS') }",
        "operationId": "addPerformerProfileTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformerTranslationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/performer/public/performerProfile": {
      "get": {
        "tags": [
          "Performer Controller"
        ],
        "description": "Allows to retrieve the performer profiles for a given eventId,\n\n@PreAuthorize={ none }",
        "operationId": "getPerformerProfileListById",
        "parameters": [
          {
            "name": "performerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplePerformerProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/performer/public/performerProfileList": {
      "get": {
        "tags": [
          "Performer Controller"
        ],
        "description": "Allows to retrieve the performer profiles for a given eventId,\n\n@PreAuthorize={ none }",
        "operationId": "getPerformerProfileListByEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePerformerProfileResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/promoter/assign": {
      "post": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "assignInventoryToUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromoterOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterTokenAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/checkout": {
      "post": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "promoterCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromoterOfferGroupCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/confirm": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "confirmTokenAssignment_1",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/promoter/edit": {
      "put": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "editBuyerEmail",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterTokenAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/eventDetails": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getAvailableTokenAssignmentGroupList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterAvailableTokenAssignmentGroupListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/eventList": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getEventsList_1",
        "parameters": [
          {
            "name": "dateFilterType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NONE",
              "enum": [
                "NONE",
                "CURRENT_AND_FUTURE",
                "PAST"
              ]
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterEventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/eventOverview": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getEventOverview",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterEventOverviewResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/eventTransactionList": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getEventTransactionList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterEventTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/inventory": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getClientInventoryItems",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sectionCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "tokenAssignmentGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/public/decline": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "declineTokenAssignment_1",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/public/validate": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "verifyTokenAssignment",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/resend": {
      "put": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "resendEmail",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/revoke": {
      "delete": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "revokeTokenAssignment_1",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/section": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getAvailableSectionsList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "tokenAssignmentGroupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableSectionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/transactionDetail": {
      "get": {
        "tags": [
          "Promoter Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getTransactionDetail",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromoterTransactionDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/userPurchase/checkout": {
      "get": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "checkout_5",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupAssignmentCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/userPurchase/public/checkout": {
      "get": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "checkout_4",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupAssignmentCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/userPurchase/public/decline": {
      "get": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "declineOfferGroup",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/userPurchase/public/validate": {
      "get": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validate",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/promoter/userPurchase/purchase": {
      "get": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchaseOld",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Promoter Purchase Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchase_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedOfferGroupPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/box-office/callback/square/device/add": {
      "post": {
        "tags": [
          "box-office-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "addSquareTerminalDeviceCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoxOfficePaymentDeviceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/box-office/callback/square/transaction/complete": {
      "post": {
        "tags": [
          "box-office-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "squareTransactionCompleteCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/box-office/callback/square/transaction/refund": {
      "post": {
        "tags": [
          "box-office-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "squareTransactionRefundCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSquareRefundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/box-office/callback/square/transaction/terminal/refund": {
      "post": {
        "tags": [
          "box-office-callback-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "squareTransactionTerminalRefundCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetSquareRefundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/public/verifyInternalUser": {
      "get": {
        "tags": [
          "Internal User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "verifyInternalUser",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/purchase": {
      "post": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/purchase/cart": {
      "post": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "purchase_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/cart/checkout": {
      "put": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "privateCartCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockingCartCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LockingCartPurchaseCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/cart/clear": {
      "post": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "clearCart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/public/cart/checkout": {
      "put": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "publicCartCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartCheckoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/unlock": {
      "post": {
        "tags": [
          "purchase-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "unlockToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOfferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/redirect": {
      "get": {
        "tags": [
          "Advertisement Tracking Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "adRedirectForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "returnRedirectUrl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisementTrackingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/accessControl": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_SUMMARY_DATA') }",
        "operationId": "getAccessControlReport",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAttendeeListSummary"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/reporting/admin/marketplaceSales/overTime": {
      "post": {
        "tags": [
          "Reporting Transactions Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'EVENT_READ_FINANCE_DATA') }",
        "operationId": "getMarketplaceSalesOverTime_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceSalesOverTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceSalesOverTimeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/eventDetails": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getEventDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportingEventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/eventList": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'EVENT_READ_PROFILE') }",
        "operationId": "getEventsList",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "completedEvents",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scheduledEvents",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "previousPageKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportingEventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/exportClientDataToS3": {
      "post": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventIds, 'EVENT','REPORTING_S3_EXPORT') }",
        "operationId": "exportClientDataToS3",
        "parameters": [
          {
            "name": "eventIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/generateAttendeeList": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_DATA') }",
        "operationId": "generateAttendeeList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/reporting/generateEventClientFeesSummary": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'REPORTING_READ_CLIENT_FEES_DATA') }",
        "operationId": "generateEventClientFeesSummary",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reporting/generateEventSummary": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "generateEventSummary",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reporting/generateTransactionList": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'REPORTING_READ_TRANSACTIONS_DATA') }",
        "operationId": "generateTransactionList",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reporting/marketplaceDetails": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#marketplaceId, 'MARKETPLACE', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getMarketplaceDetails",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "salesGroupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportingMarketplaceDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/marketplaceSales/category": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#marketplaceId, 'MARKETPLACE', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getMarketplaceSalesByCategory",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "salesGroupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportingMarketplaceSalesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/marketplaceSales/overTime": {
      "post": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getMarketplaceId(), 'MARKETPLACE', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getMarketplaceSalesOverTime",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceSalesOverTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MarketplaceSalesOverTimeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/marketplaceSales/section": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#marketplaceId, 'MARKETPLACE', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getMarketplaceSalesBySection",
        "parameters": [
          {
            "name": "marketplaceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "salesGroupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "promoterCommissionRate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "promoterUserId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReportingMarketplaceSalesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/offerDemographics": {
      "post": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#request.getEventId(), 'EVENT','REPORTING_READ_SALES_DATA') }",
        "operationId": "getOfferUserDemographics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferUserDemographicsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDemographics"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/sales/generateForDateRange": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'REPORTING_READ_SALES_DATA_DATE_RANGE') }",
        "operationId": "generateSalesDataForDateRange",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reporting/sales/getPresetDateRanges": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#clientId, 'CLIENT', 'REPORTING_READ_SALES_DATA') }",
        "operationId": "getPresetDataRangesForSalesReport",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "timezoneId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesReportDateRangesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reporting/tokenHolderDemographics": {
      "get": {
        "tags": [
          "Reporting Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT','REPORTING_READ_SALES_DATA') }",
        "operationId": "getTokenHolderDemographics",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "salesGroupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "categoryAccessibilityType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LIVE_ATTENDANCE",
                "STREAMING"
              ]
            }
          },
          {
            "name": "accessControlScanTimeRangeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenHolderDemographics"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListing": {
      "post": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "createSecondaryListing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecondaryExchangeOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OfferGroupResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "archiveSecondaryListing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListing/details": {
      "get": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "sellerReceipt",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResaleOfferGroup"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListing/retryPayout": {
      "put": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "retryOfferGroupPayout",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "payoutMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResaleOfferGroup"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListing/updatePayoutMethod": {
      "put": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "updateResaleOfferGroupPayoutMethod",
        "parameters": [
          {
            "name": "offerGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "payoutMethodId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListingOfferGroups": {
      "get": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getSecondaryListingForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecondaryListings"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryListings": {
      "get": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getSecondaryListings",
        "parameters": [
          {
            "name": "dateFilterType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NONE",
              "enum": [
                "NONE",
                "CURRENT_AND_FUTURE",
                "PAST"
              ]
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecondaryListingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/secondaryMarketplaceDetails": {
      "get": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getSecondaryMarketplaceDetails",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecondaryMarketplaceDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sellerCheckout": {
      "put": {
        "tags": [
          "Resale Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "sellerCheckout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecondaryExchangeOfferGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SellerCheckoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/shortcuts": {
      "get": {
        "tags": [
          "Shortcut Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getShortcuts",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "enableAccessControlShortcuts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ShortcutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference": {
      "get": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_READ') }",
        "operationId": "getClientLiveConferenceInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/candidates": {
      "get": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_READ') }",
        "operationId": "getClientLiveConferenceCandidates",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceCandidatesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "createCandidates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLiveConferenceCandidatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLiveConferenceCandidatesResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "deleteLiveConferenceCandidates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLiveConferenceCandidatesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/config": {
      "put": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "updateEventLiveConferenceConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLiveConferenceConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceConfigResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "createEventLiveConferenceConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLiveConferenceConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/live/user/accept": {
      "post": {
        "tags": [
          "live-conference-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "acceptLiveConferenceInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceAcceptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/live/user/decline": {
      "post": {
        "tags": [
          "live-conference-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "declineLiveConferenceInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/live/user/finishedSetup": {
      "post": {
        "tags": [
          "live-conference-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "finishedSetup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceFinishedSetupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/live/user/leave": {
      "post": {
        "tags": [
          "live-conference-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "leaveLiveConference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/live/user/register": {
      "post": {
        "tags": [
          "live-conference-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "registerForLiveConference",
        "parameters": [
          {
            "name": "device-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceRegistrationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/sync-firestore-candidates": {
      "post": {
        "tags": [
          "live-conference-admin-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "syncFirestoreCandidates",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/add-users": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "addUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceVendorAddUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceVendorAddUsersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/callback": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'X2O_CALLBACK') }",
        "operationId": "callback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/get-users": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'LIVE_CONFERENCE_READ') }",
        "operationId": "getUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceVendorGetUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceVendorGetUsersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/remove-users": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "removeUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceVendorRemoveUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceVendorRemoveUsersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/set-api-event-hook": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "setApiEventHook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceVendorSetApiEventHookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceVendorSetApiEventHookResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/conference/vendor/set-users-priority": {
      "post": {
        "tags": [
          "live-conference-vendor-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null, 'LIVE_CONFERENCE_MANAGE') }",
        "operationId": "setUsersPriority",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveConferenceVendorSetUsersPriorityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LiveConferenceVendorSetUsersPriorityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/csl/user/checkIn": {
      "post": {
        "tags": [
          "Live Streaming CSL User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "checkIn",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CslSessionCheckInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/csl/user/initialize": {
      "post": {
        "tags": [
          "Live Streaming CSL User Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "initialize",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CslSessionCheckInResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/drm/public/callback": {
      "post": {
        "tags": [
          "Live Streaming DRM Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "drmLicenseCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrmTodayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DrmTodayResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/end-live-stream": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Ends the live stream by stopping the media live channel if it is running, setting the liveStreamEndDate (defaults to now) and changing the event end date to be liveStreamEndDate + event streamReplaySeconds.If the end time is in the future, this will schedule a job to run at that time instead of executing immediately.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "end",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndLiveStreamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/info": {
      "get": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Get the live stream info for an event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "info",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/info/v2": {
      "get": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Get the live stream info for an event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "infoV2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra": {
      "delete": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Destroy infrastructure used to stream a live event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "destroyInfra",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Never blocks. Schedules job a given date or now if not specified"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/harvest": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Harvest the event stream and. Requires stream to be over.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "harvest",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/jobs": {
      "delete": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Cancel all event stream infrastructure jobs.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "cancelJobs",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/mp4": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Create infrastructure needed to stream an MP4 live event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "createMp4Infra",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMp4EventStreamInfraAtTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/region": {
      "get": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Get the region for the event's stream infra.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "setInfraRegion_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Set the region for the event's stream infra.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "setInfraRegion",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/rtmp-push": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Create infrastructure needed to stream an RTMP_PUSH live event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "createRtmpInfra",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRtmpEventStreamInfraAtTimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/schedule-access-control": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Schedules the access control job.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "scheduleAccessControlJob",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "intervalSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The interval between job runs. Uses default interval if unspecified."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/start-channel": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Start the channel that clients will stream to.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "startChannel",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Blocks if date is not specified. Else schedules job to start channel at given date."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/infra/stop-channel": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Stop the channel that clients stream to.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "stopChannel",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Blocks if date is not specified. Else schedules job to stop channel at given date."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/inventory-category-event-streams": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Create or update the inventory category event streams that setup which stream segments each inventory category has access to.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "createInventoryCategoryEventStreams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryCategoryEventStreamsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Delete inventory category event streams for an event. If the event streams is null, then all the category event streams for the event are deleted.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "deleteInventoryCategoryEventStreams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInventoryCategoryEventStreamsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/live-stream": {
      "get": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Gets the (non-infra) live stream info for the event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "getEventStreamSegments",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/segments": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Create or update stream segments for an event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "createEventStreamSegments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventStreamSegmentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Delete event stream segments. If segment numbers is null, it deletes all segments for the event.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "deleteEventStreamSegments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEventStreamSegmentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/start-next-segment": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Starts the next event stream segment and ends the previous one(s) if any. If  there are no segments left, then this just ends the last segment.Updates the inventory category based live stream start/end times based on which segments that had access to. Returns back all the event's segments and updated category event streams.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "startNextSegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartNextEventStreamSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventLiveStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/sync-firestore-event-stream": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Manually sync the event stream info to firestore. Adding 'intervalSeconds' will schedule a job that re-syncs on that interval, until the event ends.,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "syncFirestoreEventStream",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "intervalSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/streaming/event/sync-firestore-user-event-streams": {
      "post": {
        "tags": [
          "event-stream-admin-controller"
        ],
        "description": "Manually sync the user event stream info to firestore. Adding 'intervalSeconds' will schedule a job that re-syncs on that interval, until the event ends. ,\n\n@PreAuthorize={ hasPermission(null, 'STREAM_INFRA_MANAGE') }",
        "operationId": "syncFirestoreUserEventStreams",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "intervalSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/test/redis/add": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "sendCustomEmailForEvent_1",
        "parameters": [
          {
            "name": "uploadBatchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uploadBatchCount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uploadMessageSizeKB",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/test/redis/addAndDelete": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "addAndDelete",
        "parameters": [
          {
            "name": "uploadBatchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uploadBatchCount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "uploadMessageSizeKB",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteBatchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/test/redis/delete": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "sendCustomEmailForEvent",
        "parameters": [
          {
            "name": "deleteBatchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testAndroidPush": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testBasicPushNotification",
        "parameters": [
          {
            "name": "deviceToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deepLink",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testEmail": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testBasicHTMLEmail",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testEmailWithNotificationCommonTranslated": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testEmailWithNotificationCommonTranslated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCommonTranslatedTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCommonTranslated"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testMessagingTemplateServiceSendNotification": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testMessagingTemplateServiceSendNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCommonTranslated"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testSms": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testSendSms",
        "parameters": [
          {
            "name": "mobileNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/testNotifications/testiosPush": {
      "post": {
        "tags": [
          "Manual Notification Admin Controller"
        ],
        "description": "@PreAuthorize={ hasPermission(null,'NOTIFICATIONS_TEST') }",
        "operationId": "testBasiciOSPushNotification",
        "parameters": [
          {
            "name": "deviceToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deepLink",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/confirm": {
      "get": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "confirmTokenAssignment",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/create": {
      "post": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "createTokenAssignment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/edit": {
      "put": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "editTokenAssignment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/public/decline": {
      "get": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "declineTokenAssignment",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/public/validate": {
      "get": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "validateTokenAssignmentString",
        "parameters": [
          {
            "name": "assignmentString",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/resend": {
      "put": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "resendTokenAssignment",
        "parameters": [
          {
            "name": "assignmentGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/return": {
      "delete": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "returnTokenAssignment",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/revoke": {
      "delete": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "revokeTokenAssignment",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tokenAssignment/selfAssign": {
      "put": {
        "tags": [
          "Token Assignment Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "selfAssignToken",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tour": {
      "put": {
        "tags": [
          "Tour Admin Controller"
        ],
        "description": "Function to update Tour information,\n\n@PreAuthorize={ hasPermission(null, 'TOUR_UPDATE') }",
        "operationId": "updateTourProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TourResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tour Admin Controller"
        ],
        "description": "Function to create a Tour that can be used for an event,\n\n@PreAuthorize={ hasPermission(null, 'TOUR_CREATE') }",
        "operationId": "createTour",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TourResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tour/addTranslations": {
      "post": {
        "tags": [
          "Tour Admin Controller"
        ],
        "description": "Function to add language translations for a Tour,\n\n@PreAuthorize={ hasPermission(null, 'TOUR_SET_TRANSLATIONS') }",
        "operationId": "addTourTranslations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourTranslationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/user/activity": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "marketplaceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activity/summary": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivitySummary",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activity/v2": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityDetailsV2",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "marketplaceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activityConfiguration": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityTabConfiguration",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UIUserActivityTabConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activityHistory": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityHistory",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventListResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/user/activityList/activeOfferEventList": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityActiveOfferEventList",
        "parameters": [
          {
            "name": "dateFilterType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "NONE",
              "enum": [
                "NONE",
                "CURRENT_AND_FUTURE",
                "PAST"
              ]
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activityList/attendingEventList": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityListAttendingEvents",
        "parameters": [
          {
            "name": "eventAccessibilityType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LIVE_ATTENDANCE",
                "STREAMING"
              ]
            }
          },
          {
            "name": "categoryAccessibilityType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LIVE_ATTENDANCE",
                "STREAMING"
              ]
            }
          },
          {
            "name": "dateFilterType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "CURRENT_AND_FUTURE",
                "PAST"
              ]
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityEventListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/activityList/summary": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getUserActivityListSummary",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityListSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/address": {
      "get": {
        "tags": [
          "User Address Controller"
        ],
        "description": "Returns all the user's stored addresses,\n\n@PreAuthorize={ none }",
        "operationId": "getUserAddresses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAddressResponse"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Address Controller"
        ],
        "description": "Allows the user to update a specific address,\n\n@PreAuthorize={ none }",
        "operationId": "updateUserAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddressUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAddressResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Address Controller"
        ],
        "description": "Allows the user to create an address,\n\n@PreAuthorize={ none }",
        "operationId": "createUserAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddressCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/deviceToken": {
      "post": {
        "tags": [
          "User Device Token Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "setUserDeviceToken",
        "parameters": [
          {
            "name": "device-type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS"
              ]
            }
          },
          {
            "name": "device-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/user/notificationSettings": {
      "get": {
        "tags": [
          "User Notification Settings Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getUserNotificationSettingsDeprecated",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSettingItemResponse"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "User Notification Settings Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "updateUserNotificationSettingGroupDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationSettingUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSettingItemResponse"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/user/notificationSettings/v2": {
      "get": {
        "tags": [
          "User Notification Settings Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getUserNotificationSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsListResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Notification Settings Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "updateUserNotificationSettingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationSettingUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "updateUserProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile/picture": {
      "put": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "Endpoint to upload a profile picture. In case the profile picture does not meet the minimum quality standards this method will return a HTTP 400 status code with one of the following error codes: \nRECOGNITION_NO_FACE_FOUND\nRECOGNITION_MORE_THAN_ONE_FACE_FOUND\nRECOGNITION_IS_FACE_CONFIDENCE_TOO_LOW\nRECOGNITION_EYES_NOT_OPEN\nRECOGNITION_SUNGLASSES_DETECTED\nRECOGNITION_FACE_HEIGHT_TOO_SMALL\nRECOGNITION_FACE_HEIGHT_CUT_OFF\nRECOGNITION_FACE_WIDTH_TOO_SMALL\nRECOGNITION_FACE_WIDTH_CUT_OFF\nRECOGNITION_FACE_TOO_DARK\nRECOGNITION_FACE_TOO_BRIGHT\nRECOGNITION_FACE_TOO_BLURRY\nRECOGNITION_TOO_YOUNG\nRECOGNITION_REJECTED_FACE_DOES_NOT_MATCH_PREVIOUS_PICTURE\nRECOGNITION_FLAGGED_FACE_DOES_NOT_MATCH_PREVIOUS_PICTURE\n,\n\n@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "uploadProfilePicture",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile/picture/uploadurl": {
      "get": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "getProfilePictureUploadUrl",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UrlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile/resendMobileVerificationCoder": {
      "get": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "resendMobileVerificationCoder",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile/setSeenProfileVerificationStatus": {
      "put": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "setHasSeenProfileVerificationStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/user/profile/verifyMobileNumber": {
      "put": {
        "tags": [
          "User Profile Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "verifyMobileNumber",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMobileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/user/public/activityConfiguration": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getUserActivityTabConfigurationPublic",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UIUserActivityTabConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/public/getId": {
      "get": {
        "tags": [
          "User Account Controller"
        ],
        "description": "Allows the user to create their Yoop account,\n\n@PreAuthorize={ none }",
        "operationId": "generateIdForUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserCustomIdGenerationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/sales-group/public/salesGroupTree/v2": {
      "get": {
        "tags": [
          "User API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getSalesGroupTreeV2",
        "parameters": [
          {
            "name": "request",
            "in": "query",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/user/sales-group/public/salesGroupTree/v3": {
      "post": {
        "tags": [
          "User API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getSalesGroupTreeV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSalesGroupTreeRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/sales-group/salesGroupTree/upgrade-options": {
      "post": {
        "tags": [
          "User API Sales Group Controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_BASIC_LOGIN') }",
        "operationId": "getUpgradeOptionSalesGroupTree",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUpgradeOptionsSalesGroupTreeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SalesGroupTreeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/streaming/event/generate-drm-token": {
      "post": {
        "tags": [
          "event-stream-user-controller"
        ],
        "description": "@PreAuthorize={ hasAuthority('USER_FULL_ACCESS') }",
        "operationId": "generateDrmToken",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserCategoryEventStreamInfo"
                }
              }
            }
          }
        }
      }
    },
    "/user/videoStreamInfo": {
      "get": {
        "tags": [
          "User Activity Controller"
        ],
        "description": "@PreAuthorize={ none }",
        "operationId": "getUserEventVideoStreamInfo",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ANDROID",
                "IOS",
                "WEB"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEventVideoStreamInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/videoAnalytics/fetchOverview": {
      "get": {
        "tags": [
          "video-analytics-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_DATA') }",
        "operationId": "fetchVideoOverview",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VideoOverview"
                }
              }
            }
          }
        }
      }
    },
    "/videoAnalytics/fetchVideoTimeseries": {
      "get": {
        "tags": [
          "video-analytics-controller"
        ],
        "description": "@PreAuthorize={ hasPermission(#eventId, 'EVENT', 'READ_ACCESS_CONTROL_DATA') }",
        "operationId": "fetchVideoTimeseries",
        "parameters": [
          {
            "name": "dataGrouping",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "GENDER",
                "AGE",
                "LOCATION",
                "ALL"
              ]
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MINUTE",
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VideoTimeseries"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptClientUserClientInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "inviteId"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "AcceptClientUserEventCollabInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "inviteId",
          "invitedClientId"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "invitedClientId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "AcceptOrRejectBulkPrimaryFillClientGuestRequest": {
        "type": "object",
        "required": [
          "batchId",
          "eventId"
        ],
        "properties": {
          "batchId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "AccessControlBatch": {
        "type": "object",
        "required": [
          "batchGuid"
        ],
        "properties": {
          "batchGuid": {
            "type": "string"
          },
          "batchItemRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlBatchItemRequest"
            }
          }
        }
      },
      "AccessControlBatchItemRequest": {
        "type": "object",
        "required": [
          "activityType",
          "tokenId"
        ],
        "properties": {
          "activityType": {
            "type": "string",
            "enum": [
              "DECLINED",
              "FINAL_DECLINED",
              "CHECK_IN_GRANTED",
              "CHECK_IN_RESCAN",
              "ID_VERIFY",
              "PROFILE_PICTURE_VERIFY",
              "MERCHANDISE_PICKED_UP"
            ]
          },
          "codeInfo": {
            "$ref": "#/components/schemas/AccessControlCodeInfo"
          },
          "codeTimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "idVerified": {
            "type": "boolean"
          },
          "reasonType": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "scannedUserId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlBatchRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "batchItemRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlBatchItemRequest"
            }
          },
          "batches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlBatch"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlCategorySummary": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryName": {
            "type": "string"
          },
          "numAttendeesCheckedIn": {
            "type": "integer",
            "format": "int32"
          },
          "numCheckIns": {
            "type": "integer",
            "format": "int32"
          },
          "numInventoryWithMultipleCheckIns": {
            "type": "integer",
            "format": "int32"
          },
          "percentAttendeesCheckedIn": {
            "type": "number",
            "format": "double"
          },
          "percentCheckedIn": {
            "type": "number",
            "format": "double"
          },
          "totalAttendees": {
            "type": "integer",
            "format": "int32"
          },
          "totalCheckInsPossible": {
            "type": "integer",
            "format": "int32"
          },
          "totalSoldInventory": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AccessControlCodeInfo": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "codeTimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "codeType": {
            "type": "string",
            "enum": [
              "OTP",
              "QR"
            ]
          },
          "otpType": {
            "type": "string",
            "enum": [
              "TWENTY_BIT",
              "THIRTY_TWO_BIT"
            ]
          }
        }
      },
      "AccessControlCodeRequest": {
        "type": "object",
        "required": [
          "codeInfo",
          "eventId"
        ],
        "properties": {
          "codeInfo": {
            "$ref": "#/components/schemas/AccessControlCodeInfo"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlDeclineRequest": {
        "type": "object",
        "required": [
          "accessControlTokenInfo"
        ],
        "properties": {
          "accessControlTokenInfo": {
            "$ref": "#/components/schemas/AccessControlTokenInfoRequest"
          },
          "declineReasonType": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlOfflineBatchGuid": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "processedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessControlQrCodeRequest": {
        "type": "object",
        "required": [
          "customerOrderId",
          "eventId"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlRestrictionDateRange": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessControlRestrictionDay": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          }
        }
      },
      "AccessControlRestrictionJson": {
        "type": "object",
        "properties": {
          "daysOfTheWeek": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AccessControlRestrictionDay"
            }
          },
          "eventDateRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlRestrictionDateRange"
            }
          },
          "eventScanTimeRangeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "numberOfScans": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "rescanAllowed": {
            "type": "boolean"
          },
          "scanTimeRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlRestrictionTimeRange"
            }
          },
          "timeSinceLastScan": {
            "type": "object",
            "properties": {
              "nano": {
                "type": "integer",
                "format": "int32"
              },
              "negative": {
                "type": "boolean"
              },
              "seconds": {
                "type": "integer",
                "format": "int64"
              },
              "units": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "dateBased": {
                      "type": "boolean"
                    },
                    "duration": {
                      "type": "object",
                      "properties": {
                        "nano": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "negative": {
                          "type": "boolean"
                        },
                        "seconds": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "zero": {
                          "type": "boolean"
                        }
                      }
                    },
                    "durationEstimated": {
                      "type": "boolean"
                    },
                    "timeBased": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "zero": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "AccessControlRestrictionResponse": {
        "type": "object",
        "properties": {
          "inventoryItemUsageDateRange": {
            "$ref": "#/components/schemas/AccessControlRestrictionDateRange"
          },
          "isReScan": {
            "type": "boolean"
          },
          "isRescanAllowed": {
            "type": "boolean"
          },
          "reScan": {
            "type": "boolean"
          },
          "rejectionReason": {
            "type": "string",
            "enum": [
              "DENIED",
              "SCAN_LIMIT_REACHED",
              "NOT_ELIGIBLE"
            ]
          }
        }
      },
      "AccessControlRestrictionTimeRange": {
        "type": "object",
        "properties": {
          "endTime": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "endTimeInNextDay": {
            "type": "boolean"
          },
          "startTime": {
            "$ref": "#/components/schemas/LocalTime"
          }
        }
      },
      "AccessControlScanTimeRangeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "inventoryCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessControlScanTimeRangeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessControlScanTimeRangeUpdateRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessControlTokenInfoRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AccessControlTokenInfoWithCodeRequest": {
        "type": "object",
        "required": [
          "codeInfo",
          "eventId"
        ],
        "properties": {
          "codeInfo": {
            "$ref": "#/components/schemas/AccessControlCodeInfo"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AddBoxOfficePrinterRequest": {
        "type": "object",
        "required": [
          "clientId",
          "ipAddress",
          "name"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "ipAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AddInternalEventCollaboratorsRequest": {
        "type": "object",
        "properties": {
          "clientUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AddMevDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "name",
          "serialNumber"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "AddSquareTerminalDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "deviceName"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deviceName": {
            "type": "string"
          }
        }
      },
      "AddSquareTerminalDeviceResponse": {
        "type": "object",
        "required": [
          "currency",
          "deviceCode",
          "deviceName",
          "pairingId"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deviceCode": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "pairingId": {
            "type": "string"
          }
        }
      },
      "AddUserResult": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "AddressRequest": {
        "type": "object",
        "properties": {
          "countryCodeISO2": {
            "type": "string"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "AddressResponse": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "AdminCreateRequest": {
        "type": "object",
        "properties": {
          "adminRoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "AdminLoginRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "AdminLoginResponse": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          }
        }
      },
      "AdminRefundOfferRequest": {
        "type": "object",
        "required": [
          "inventoryItemIds",
          "reason",
          "refundProcessingMode",
          "refundValidationType"
        ],
        "properties": {
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "preventPayout": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "refundProcessingMode": {
            "type": "string",
            "enum": [
              "REGULAR",
              "FORCE_SUCCESS_ON_FAILURE",
              "FORCE_SUCCESS_WITHOUT_ATTEMPT"
            ]
          },
          "refundValidationType": {
            "type": "string",
            "enum": [
              "OWNERSHIP",
              "FINAL_NON_REVOKED_OFFER",
              "NONE"
            ]
          },
          "shouldBlacklistUser": {
            "type": "boolean"
          },
          "shouldRevokeInventory": {
            "type": "boolean"
          },
          "shouldSendNotifications": {
            "type": "boolean"
          }
        }
      },
      "AdminRoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          }
        }
      },
      "AdvertisementTrackingResponse": {
        "type": "object",
        "properties": {
          "advertisementData": {
            "type": "string"
          },
          "firebaseUrl": {
            "type": "string"
          }
        }
      },
      "AffiliateCodeDataListItemResponse": {
        "type": "object",
        "properties": {
          "affiliateCodeId": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "conversion": {
            "type": "number",
            "format": "double"
          },
          "lastTransactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "numClicks": {
            "type": "integer",
            "format": "int32"
          },
          "numTokens": {
            "type": "integer",
            "format": "int32"
          },
          "numTransactions": {
            "type": "integer",
            "format": "int32"
          },
          "sales": {
            "type": "number"
          }
        }
      },
      "AffiliateCodeDataListResponse": {
        "type": "object",
        "properties": {
          "codeDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateCodeDataListItemResponse"
            }
          }
        }
      },
      "AffiliateCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApproveClientUserEventCollabRequest": {
        "type": "object",
        "required": [
          "approverClientId",
          "inviteId"
        ],
        "properties": {
          "approverClientId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "ApproveEventDraftReviewRequest": {
        "type": "object",
        "required": [
          "createEventRequestJson",
          "eventDraftId"
        ],
        "properties": {
          "createEventRequestJson": {
            "type": "string"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ArchiveEventDraftRequest": {
        "type": "object",
        "required": [
          "eventDraftId"
        ],
        "properties": {
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AssignedOfferGroupPurchaseRequest": {
        "type": "object",
        "properties": {
          "assignmentString": {
            "type": "string"
          },
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "fraudSessionId": {
            "type": "string"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "serverGuid": {
            "type": "string"
          }
        }
      },
      "Attendee": {
        "type": "object",
        "properties": {
          "assignmentStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "GUEST",
              "GUEST_CHILD"
            ]
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "emailAddress": {
            "type": "string"
          },
          "entryStatus": {
            "type": "string",
            "enum": [
              "DECLINED",
              "ENTERED",
              "NOT_ENTERED"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "isPictureVerified": {
            "type": "boolean"
          },
          "isSelfAssigned": {
            "type": "boolean"
          },
          "lastActionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastName": {
            "type": "string"
          },
          "purchaserUserId": {
            "type": "integer",
            "format": "int64"
          },
          "row": {
            "type": "string"
          },
          "seat": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "tokenId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AuctionOfferRequest": {
        "type": "object",
        "required": [
          "amount",
          "autoPay",
          "numTokens",
          "offerGroupId"
        ],
        "properties": {
          "amount": {
            "description": "The amount per tokens that the user is making an offer ",
            "type": "number"
          },
          "autoPay": {
            "description": "Whether payment processing can happen automatically if this offer succeeds.",
            "type": "boolean"
          },
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "numTokens": {
            "description": "The number of tokens the user is attempting to win",
            "type": "integer",
            "format": "int32"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "serverGuid": {
            "type": "string"
          }
        }
      },
      "AuthEmailVerificationResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          }
        }
      },
      "AvailableRow": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "firstSeatIndex": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSeat"
            }
          }
        }
      },
      "AvailableRowV2": {
        "type": "object",
        "properties": {
          "availableSeatCount": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "firstSeatIndex": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSeatV2"
            }
          }
        }
      },
      "AvailableSeat": {
        "type": "object",
        "properties": {
          "availableSeatClientData": {
            "$ref": "#/components/schemas/AvailableSeatClientData"
          },
          "availableSeatMarketplaceData": {
            "$ref": "#/components/schemas/AvailableSeatMarketplaceData"
          },
          "groupId": {
            "type": "string"
          },
          "inventoryCategoryAccessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupCode": {
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "seatCode": {
            "type": "string"
          },
          "seatName": {
            "type": "string"
          },
          "seatingChartId": {
            "type": "string"
          },
          "tokenId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AvailableSeatClientData": {
        "type": "object",
        "properties": {
          "isAllocatedToMarketplace": {
            "type": "boolean"
          },
          "isAvailable": {
            "type": "boolean"
          }
        }
      },
      "AvailableSeatMarketplaceData": {
        "type": "object",
        "properties": {
          "marketplaceIdToOfferGroupSet": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "uniqueItems": true
            }
          },
          "offerGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "sold": {
            "type": "boolean"
          }
        }
      },
      "AvailableSeatV2": {
        "type": "object",
        "properties": {
          "availableSeatClientData": {
            "$ref": "#/components/schemas/AvailableSeatClientData"
          },
          "availableSeatMarketplaceData": {
            "$ref": "#/components/schemas/AvailableSeatMarketplaceData"
          },
          "groupId": {
            "type": "string"
          },
          "inventoryCategoryAccessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupCode": {
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "seatCode": {
            "type": "integer",
            "format": "int64"
          },
          "seatName": {
            "type": "string"
          },
          "seatingChartId": {
            "type": "string"
          },
          "tokenId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AvailableSection": {
        "type": "object",
        "properties": {
          "allocatedSeatCount": {
            "description": "The seats that have already been sold. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          },
          "availableSeatCount": {
            "description": "The total seats that are available for sale. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableRow"
            }
          },
          "seatingChartId": {
            "type": "string"
          },
          "unallocatedSeatCount": {
            "description": "The seats that are still available to sell. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AvailableSectionListResponse": {
        "type": "object",
        "properties": {
          "seatMapMediaUrl": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSection"
            }
          }
        }
      },
      "AvailableSectionListResponseV2": {
        "type": "object",
        "properties": {
          "seatMapMediaUrl": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSectionV2"
            }
          }
        }
      },
      "AvailableSectionV2": {
        "description": "The sections this offer group belongs to",
        "type": "object",
        "properties": {
          "allocatedSeatCount": {
            "description": "The seats that have already been sold. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          },
          "availableSeatCount": {
            "description": "The total seats that are available for sale. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableRowV2"
            }
          },
          "seatingChartId": {
            "type": "string"
          },
          "unallocatedSeatCount": {
            "description": "The seats that are still available to sell. Note that this only returns the parent count when dealing with groups and tables",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AvailableSectionsListRequest": {
        "type": "object",
        "required": [
          "marketplaceId",
          "marketplaceIds"
        ],
        "properties": {
          "cacheKey": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "marketplaceId": {
            "description": "ID of the marketplace to load categories for.",
            "type": "integer",
            "format": "int64"
          },
          "marketplaceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "numberOfTokens": {
            "description": "The number of requested tokens.",
            "type": "integer",
            "format": "int32"
          },
          "salesGroupId": {
            "description": "The subcategory/sales group id to filter by",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AvailableSectionsListRequestV2": {
        "type": "object",
        "required": [
          "marketplaceIds"
        ],
        "properties": {
          "cacheKey": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "marketplaceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "numberOfTokens": {
            "description": "The number of requested tokens.",
            "type": "integer",
            "format": "int32"
          },
          "salesGroupId": {
            "description": "The subcategory/sales group id to filter by",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BasicPerformerProfileRequest": {
        "type": "object",
        "required": [
          "majorCategoryIds",
          "minorCategoryIds",
          "name"
        ],
        "properties": {
          "aliases": {
            "description": "The performer's aliases",
            "type": "array",
            "items": {
              "description": "The performer's aliases",
              "type": "string"
            }
          },
          "clientId": {
            "description": "The id of the client related to the Performer",
            "type": "integer",
            "format": "int64"
          },
          "defaultMediaId": {
            "description": "Default media ID for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "defaultMinorCategoryId": {
            "description": "Default minor category Id for for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "homeCityId": {
            "description": "Home City ID for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "languages": {
            "description": "Languages for the Performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerLanguageRequest"
            }
          },
          "majorCategoryIds": {
            "description": "The performer's major categories",
            "type": "array",
            "items": {
              "description": "The performer's major categories",
              "type": "integer",
              "format": "int64"
            }
          },
          "managementOrganization": {
            "description": "Management organization for the Performer",
            "type": "string"
          },
          "mediaIds": {
            "description": "Media Ids for the Performer's media",
            "type": "array",
            "items": {
              "description": "Media Ids for the Performer's media",
              "type": "integer",
              "format": "int64"
            }
          },
          "minorCategoryIds": {
            "description": "The list of ID for the minor categories the Performer falls into",
            "type": "array",
            "items": {
              "description": "The list of ID for the minor categories the Performer falls into",
              "type": "integer",
              "format": "int64"
            }
          },
          "name": {
            "description": "The performer's name",
            "type": "string"
          },
          "performerDescription": {
            "description": "Description for the Performer",
            "type": "string"
          },
          "primaryLanguage": {
            "description": "Primary language for the Performer",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "primaryLocationIds": {
            "description": "The Performers primary location profile ids",
            "type": "array",
            "items": {
              "description": "The Performers primary location profile ids",
              "type": "integer",
              "format": "int64"
            }
          },
          "promoter": {
            "description": "Promoter for the Performer",
            "type": "string"
          },
          "recordLabel": {
            "description": "Record label for the Performer",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "Social media list for the Performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaRequest"
            }
          }
        }
      },
      "BasicPerformerResponse": {
        "description": "A list of performers that will be performing at the event",
        "type": "object",
        "properties": {
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultMinorCategory": {
            "$ref": "#/components/schemas/MinorCategoryResponse"
          },
          "id": {
            "description": "The unique identifier of this performer",
            "type": "string"
          },
          "majorCategories": {
            "description": "The major categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "minorCategories": {
            "description": "The minor categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinorCategoryResponse"
            }
          },
          "name": {
            "description": "The name of the performer",
            "type": "string"
          },
          "translation": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "BidDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "amountPerToken": {
            "type": "string"
          },
          "bidExpirationCompanionText": {
            "type": "string"
          },
          "buyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "categoryName": {
            "type": "string"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "includedBuyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "includedSellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerRetryEndDate": {
            "type": "string"
          },
          "offerRetryEndTime": {
            "type": "string"
          },
          "paymentFailedContext": {
            "type": "boolean"
          },
          "paymentMethodDetails": {
            "$ref": "#/components/schemas/PaymentMethodDetailsThymeleaf"
          },
          "resaleForbiddenContext": {
            "$ref": "#/components/schemas/ResaleForbiddenContext"
          },
          "sellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "totalAmount": {
            "type": "string"
          },
          "totalAmountRaw": {
            "type": "number"
          },
          "totalFees": {
            "type": "string"
          },
          "totalTokenAmount": {
            "type": "string"
          }
        }
      },
      "BidExpirationCompanionText": {
        "type": "object",
        "properties": {
          "defaultText": {
            "type": "string"
          },
          "translations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "BidExpirationGroup": {
        "type": "object",
        "properties": {
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "maxPotentialSales": {
            "type": "number"
          },
          "numBids": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuantityRequested": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BidExpirationOption": {
        "description": "The list of expiration options for bids set by clients on an event-level.",
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "companionText": {
            "$ref": "#/components/schemas/BidExpirationCompanionText"
          },
          "expirationSeconds": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BidMatchCriteria": {
        "type": "object",
        "required": [
          "inventoryCategoryId"
        ],
        "properties": {
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BlacklistAccountRequest": {
        "type": "object",
        "required": [
          "blacklistReason"
        ],
        "properties": {
          "blacklistReason": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BoxOfficeNotificationCommonData": {
        "type": "object",
        "required": [
          "accessControlType"
        ],
        "properties": {
          "accessControlType": {
            "type": "string",
            "enum": [
              "DIGITAL",
              "PRINTED"
            ]
          }
        }
      },
      "BoxOfficePurchaseDataThymeLeaf": {
        "type": "object",
        "required": [
          "accessControlType"
        ],
        "properties": {
          "accessControlType": {
            "type": "string"
          },
          "deepLinkCompletePartialUserAccount": {
            "type": "string"
          }
        }
      },
      "BulkCreateDiscountCodeListResponse": {
        "type": "object",
        "properties": {
          "promoCodeDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetDiscountResponse"
            }
          }
        }
      },
      "BulkCreateDiscountCodeStringRequest": {
        "type": "object",
        "required": [
          "numberOfCodes"
        ],
        "properties": {
          "characterLimit": {
            "type": "integer",
            "format": "int32"
          },
          "containsLowerCaseLetters": {
            "type": "boolean"
          },
          "containsNumerics": {
            "type": "boolean"
          },
          "containsUpperCaseLetters": {
            "type": "boolean"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfCodes": {
            "type": "integer",
            "format": "int32"
          },
          "prefix": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          }
        }
      },
      "BulkPrimaryFillRequest": {
        "type": "object",
        "required": [
          "inventoryCategoryId"
        ],
        "properties": {
          "debugSettings": {
            "$ref": "#/components/schemas/DebugSettings"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "maxQuantityToAccept": {
            "type": "integer",
            "format": "int32"
          },
          "minPricePerYoopToAccept": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "BuyerPriceRequestInventoryCategoryDataWrapper": {
        "type": "object",
        "required": [
          "accessTokensPerInventory",
          "code",
          "type"
        ],
        "properties": {
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          }
        }
      },
      "CancelSquareTerminalCheckoutResponse": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPLETED",
              "IN_PROGRESS",
              "PENDING",
              "CANCELED",
              "REJECTED",
              "FAILED",
              "CANCEL_REQUESTED"
            ]
          }
        }
      },
      "CancelTerminalCheckoutRequest": {
        "type": "object",
        "required": [
          "currency",
          "customerOrderId",
          "terminalCheckoutId"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "terminalCheckoutId": {
            "type": "string"
          }
        }
      },
      "CarouselDetailResponse": {
        "type": "object",
        "properties": {
          "eventFilter": {
            "$ref": "#/components/schemas/EventFilter"
          },
          "eventIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "shouldDisplayShowAll": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "FEATURED",
              "VERTICAL_LIST"
            ]
          }
        }
      },
      "CarouselInfoResponse": {
        "type": "object",
        "properties": {
          "carousels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarouselDetailResponse"
            }
          },
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventListResponseItem"
            }
          }
        }
      },
      "CartCheckoutPriceModificationResponse": {
        "type": "object",
        "properties": {
          "priceChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemCheckoutPriceModificationResponse"
            }
          }
        }
      },
      "CartCheckoutRequest": {
        "type": "object",
        "properties": {
          "discountCode": {
            "type": "string"
          },
          "purchaseCheckoutRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseCheckoutRequest"
            }
          }
        }
      },
      "CartCheckoutResponse": {
        "type": "object",
        "properties": {
          "checkoutTermsAndConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsAndConditions"
            }
          },
          "childCheckoutResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutResponse"
            }
          },
          "discountValidationError": {
            "$ref": "#/components/schemas/DiscountValidationErrorResponse"
          },
          "offerGroupResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferGroupResponse"
            }
          },
          "overallResponse": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "paymentMethodConfigurationResponse": {
            "$ref": "#/components/schemas/PaymentMethodConfigurationResponse"
          }
        }
      },
      "CartItemCheckoutPriceModificationResponse": {
        "type": "object",
        "properties": {
          "newCheckoutPrice": {
            "type": "number"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "originalDisplayPrice": {
            "type": "number"
          }
        }
      },
      "CartPurchaseRequest": {
        "type": "object",
        "required": [
          "purchaseToken"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creationRequestDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCreationRequestData"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "oldBidId": {
            "description": "ID of any bid that this purchase replaces. Used when Buy Now is triggered with an existing bid. The old bid will be cancelled.",
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CashPaymentBoxOfficeRequest": {
        "type": "object",
        "required": [
          "email",
          "purchaseToken"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createAccountRequest": {
            "$ref": "#/components/schemas/CreateAccountBoxOfficeRequest"
          },
          "creationRequestDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCreationRequestData"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "email": {
            "description": "The  email address of the customer on whose behalf the client user is attempting to make a transaction.",
            "type": "string"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "generateQrCode": {
            "description": "Whether or not a QR code should be generated upon successful transaction.",
            "type": "boolean"
          },
          "mevSerialNumber": {
            "description": "The serial number of the MEV device to send an invoice to, if required.",
            "type": "string"
          },
          "oldBidId": {
            "description": "ID of any bid that this purchase replaces. Used when Buy Now is triggered with an existing bid. The old bid will be cancelled.",
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CategoryDetailChildGroupingResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "BUNDLE",
              "GROUP",
              "HOTEL_ROOM",
              "TABLE"
            ]
          }
        }
      },
      "CategoryDetailResponse": {
        "type": "object",
        "properties": {
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "accessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "STREAMING"
            ]
          },
          "childGroupingResponse": {
            "$ref": "#/components/schemas/CategoryDetailChildGroupingResponse"
          },
          "choiceConfigurations": {
            "description": "please use 'choiceSets' instead",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedInventoryChoiceResponse"
            }
          },
          "choiceSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedInventoryChoiceResponse"
            }
          },
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/InventoryCategoryUIDisplaySettings"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "maxUserDateOfBirth": {
            "description": "The max user's date of birth for event",
            "type": "string",
            "format": "date"
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandiseDescription": {
            "type": "string"
          },
          "merchandiseMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "name": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "rules": {
            "type": "string"
          },
          "shippingAddressRequired": {
            "type": "boolean"
          },
          "tagGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryTagGroupResponse"
            }
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentAllowed": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          }
        }
      },
      "CategoryPriceConfigurationRequest": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string"
          },
          "price": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ChanceMapperResponse": {
        "description": "The object containing the mapping for chances",
        "type": "object",
        "properties": {
          "good": {
            "type": "number"
          },
          "great": {
            "type": "number"
          },
          "low": {
            "type": "number"
          },
          "poor": {
            "type": "number"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "required": [
          "password",
          "verificationString"
        ],
        "properties": {
          "password": {
            "description": "The new password selected by the user",
            "type": "string"
          },
          "verificationString": {
            "description": "The verification link",
            "type": "string"
          }
        }
      },
      "CheckInInfoResponse": {
        "type": "object",
        "properties": {
          "eventDetail": {
            "$ref": "#/components/schemas/EventDetailResponse"
          },
          "userCheckInInfo": {
            "$ref": "#/components/schemas/UserCheckInInfoResponse"
          }
        }
      },
      "CheckoutResponse": {
        "type": "object",
        "required": [
          "tokenPrice"
        ],
        "properties": {
          "appliedDiscounts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "blacklistedQuantities": {
            "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
            "type": "array",
            "items": {
              "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
              "type": "integer",
              "format": "int64"
            }
          },
          "checkoutTermsAndConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsAndConditions"
            }
          },
          "choiceDiscountSetList": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "oldPayoutMethod": {
            "$ref": "#/components/schemas/PayoutMethodResponse"
          },
          "requestGuid": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutSeat"
            }
          },
          "sectionCodes": {
            "description": "The section codes this offer group belongs to",
            "type": "array",
            "items": {
              "description": "The section codes this offer group belongs to",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "CheckoutSeat": {
        "description": "A non-null value indicates if the offer can select seats until the specified time",
        "type": "object",
        "properties": {
          "rowName": {
            "type": "string"
          },
          "seatCode": {
            "type": "string"
          },
          "seatName": {
            "type": "string"
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "CheckoutTermsAndConditions": {
        "type": "object",
        "properties": {
          "checkboxes": {
            "description": "The list of checkboxes that the user can check to agree to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsCheckboxResponse"
            }
          },
          "checkoutTerms": {
            "description": "The text containing terms and conditions for the event.",
            "type": "string"
          },
          "eventId": {
            "description": "The event ID for which the terms and conditions apply.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CheckoutTermsCheckboxResponse": {
        "description": "The list of checkboxes that the user can check to agree to.",
        "type": "object",
        "properties": {
          "defaultValue": {
            "description": "The default value of the checkbox.",
            "type": "boolean"
          },
          "disabled": {
            "description": "Whether the checkbox is disabled.",
            "type": "boolean"
          },
          "id": {
            "description": "The string identifier of the checkbox.",
            "type": "string"
          },
          "required": {
            "description": "Whether the checkbox is required.",
            "type": "boolean"
          },
          "text": {
            "description": "The checkbox label.",
            "type": "string"
          }
        }
      },
      "ChoiceDiscountListItemResponse": {
        "type": "object",
        "properties": {
          "choiceId": {
            "type": "integer",
            "format": "int64"
          },
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "priceDifference": {
            "type": "number"
          }
        }
      },
      "ChoiceDiscountSetListItemResponse": {
        "type": "object",
        "properties": {
          "choiceDiscountList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChoiceDiscountListItemResponse"
            }
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "setId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ChoiceDiscountSetListResponse": {
        "type": "object",
        "properties": {
          "choiceDiscountSetList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChoiceDiscountSetListItemResponse"
            }
          }
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "cityName": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "geoRegion": {
            "$ref": "#/components/schemas/GeoRegion"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CityMl"
            }
          },
          "unLoCode": {
            "type": "string"
          }
        }
      },
      "CityMl": {
        "type": "object",
        "properties": {
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "cityName": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "CityTranslation": {
        "description": "Translations for the City.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "clientAddress": {
            "$ref": "#/components/schemas/ClientAddress"
          },
          "contactEmailAddress": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataExportsEnabled": {
            "type": "boolean"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          },
          "uiconfigJson": {
            "type": "string"
          }
        }
      },
      "ClientAddress": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "ClientApiRequestDemoRequest": {
        "type": "object",
        "properties": {
          "annualAttendanceLevel": {
            "type": "string",
            "enum": [
              "ZERO__TWENTY_FIVE",
              "TWENTY_FIVE__HUNDRED",
              "HUNDRED__FIVE_HUNDRED",
              "FIVE_HUNDRED__INFINITE"
            ]
          },
          "company": {
            "type": "string"
          },
          "countryISOCode": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ClientAvailableCategoryListResponse": {
        "type": "object",
        "properties": {
          "categoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAvailableCategoryListResponseItem"
            }
          }
        }
      },
      "ClientAvailableCategoryListResponseItem": {
        "type": "object",
        "properties": {
          "inventoryCategory": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "sectionList": {
            "$ref": "#/components/schemas/AvailableSectionListResponseV2"
          }
        }
      },
      "ClientCreateRequestOld": {
        "type": "object",
        "properties": {
          "defaultMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          }
        }
      },
      "ClientCustomerOrderListItemResponse": {
        "type": "object",
        "properties": {
          "bidId": {
            "description": "The bid id used to fill this order, if applicable.",
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          },
          "customerOrderPaymentMeans": {
            "$ref": "#/components/schemas/PaymentMeans"
          },
          "emailAddress": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "marketplaceType": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "numberOfTokens": {
            "description": "The total amount of associated with this order",
            "type": "integer",
            "format": "int32"
          },
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "profitAmount": {
            "description": "The profit for this resale order",
            "type": "number"
          },
          "profitShare": {
            "description": "The platform profit share (percentage) for this resale order",
            "type": "number"
          },
          "refundTransactionIdList": {
            "description": "The refund transaction ids associated with this order",
            "type": "array",
            "items": {
              "description": "The refund transaction ids associated with this order",
              "type": "integer",
              "format": "int64"
            }
          },
          "revenue": {
            "description": "The platform profit for this resale order",
            "type": "number"
          },
          "totalAmount": {
            "description": "The total payment amount for this order",
            "type": "number"
          },
          "totalPaid": {
            "description": "The original payment amount for this order ",
            "type": "number"
          },
          "totalRefunded": {
            "description": "The total refunded amount for this order",
            "type": "number"
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientExchangeMarketplaceCategorySalesResponse": {
        "type": "object",
        "properties": {
          "salesBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingGroupSalesSummary"
            }
          }
        }
      },
      "ClientExternalPaymentCartPurchaseRequest": {
        "type": "object",
        "required": [
          "purchaseToken"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creationRequestDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCreationRequestData"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "externalTransaction": {
            "$ref": "#/components/schemas/ExternalProcessedPaymentTransaction"
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "oldBidId": {
            "description": "ID of any bid that this purchase replaces. Used when Buy Now is triggered with an existing bid. The old bid will be cancelled.",
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientExternalPaymentPurchaseOfferRequest": {
        "type": "object",
        "required": [
          "offerGroupId",
          "purchaseToken",
          "seatCodes"
        ],
        "properties": {
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "externalTransaction": {
            "$ref": "#/components/schemas/ExternalProcessedPaymentTransaction"
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "seatCodes": {
            "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
            "type": "array",
            "items": {
              "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientGuestAssignmentListResponse": {
        "type": "object",
        "properties": {
          "clientGuestAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGuestAssignmentResponse"
            }
          }
        }
      },
      "ClientGuestAssignmentNotificationCommonData": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "lockToken": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          }
        }
      },
      "ClientGuestAssignmentResponse": {
        "type": "object",
        "properties": {
          "assigneeEmailAddress": {
            "type": "string"
          },
          "assignmentClientName": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "inviteAcceptDate": {
            "type": "string",
            "format": "date-time"
          },
          "inviteDate": {
            "type": "string",
            "format": "date-time"
          },
          "inviteStatus": {
            "type": "string",
            "enum": [
              "DECLINED",
              "REVOKED",
              "BOUNCED"
            ]
          },
          "inviteUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "inviteeFirstName": {
            "type": "string"
          },
          "inviteeLastName": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "reservePrice": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PROCESSED",
              "ARCHIVED"
            ]
          }
        }
      },
      "ClientGuestBulkSendResponse": {
        "type": "object",
        "properties": {
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "ClientGuestBulkSendStatusResponse": {
        "type": "object",
        "properties": {
          "responseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGuestBulkSendResponse"
            }
          }
        }
      },
      "ClientGuestInvitationDetailResponse": {
        "type": "object",
        "properties": {
          "assignmentString": {
            "type": "string"
          },
          "bidId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientGuestInvitationResponse": {
        "type": "object",
        "properties": {
          "clientGuestInvitationDetailResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientGuestInvitationDetailResponse"
            }
          }
        }
      },
      "ClientGuestInviteThymeleaf": {
        "type": "object",
        "properties": {
          "accessibilityType": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "deepLinkClientGuestAssignment": {
            "type": "string"
          },
          "deepLinkClientGuestDecline": {
            "type": "string"
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroupPricingDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "paymentMethodType": {
            "type": "string"
          }
        }
      },
      "ClientPreconfiguredFeeResponse": {
        "type": "object",
        "properties": {
          "all": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPreconfiguredFeeResponseItem"
            }
          },
          "clientFeeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPreconfiguredFeeResponseItem"
            }
          },
          "feeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPreconfiguredFeeResponseItem"
            }
          },
          "resaleBuyerFeeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPreconfiguredFeeResponseItem"
            }
          },
          "resaleSellerFeeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPreconfiguredFeeResponseItem"
            }
          }
        }
      },
      "ClientPreconfiguredFeeResponseItem": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "feeResponse": {
            "$ref": "#/components/schemas/GetFeeResponse"
          }
        }
      },
      "ClientPreconfiguredPaymentProcessorConfigurationResponse": {
        "type": "object",
        "properties": {
          "spreedlyGatewayId": {
            "type": "string"
          }
        }
      },
      "ClientProfileResponse": {
        "description": "The primary client for the event",
        "type": "object",
        "properties": {
          "contactName": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          }
        }
      },
      "ClientPromoterDetailListItemResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "promoterUserId": {
            "type": "integer",
            "format": "int64"
          },
          "soldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCashBuyerFees": {
            "type": "number"
          },
          "totalCashOwed": {
            "type": "number"
          },
          "totalCashSales": {
            "type": "number"
          },
          "totalCashSellerFees": {
            "type": "number"
          },
          "totalPromoterNetSales": {
            "type": "number"
          },
          "totalSales": {
            "type": "number"
          },
          "totalSellerFees": {
            "type": "number"
          },
          "unsoldInventoryCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClientPromoterInviteListItemResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "inventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "inviteGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "BOUNCED",
              "RETURNED",
              "DECLINED",
              "REVOKED"
            ]
          },
          "lastActionDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ClientPromoterInviteListResponse": {
        "type": "object",
        "properties": {
          "promoterList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPromoterInviteListItemResponse"
            }
          }
        }
      },
      "ClientPromoterInviteThymeleaf": {
        "type": "object",
        "properties": {
          "commissionPercentage": {
            "type": "number",
            "format": "double"
          },
          "inviteGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "minimumSellingPrice": {
            "type": "string"
          },
          "tokenAssignmentData": {
            "$ref": "#/components/schemas/TokenAssignmentDataThymeleaf"
          }
        }
      },
      "ClientPromoterListResponse": {
        "type": "object",
        "properties": {
          "promoterList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPromoterDetailListItemResponse"
            }
          },
          "promoterMarketplaceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientPromoterSalesDataDetailResponse": {
        "type": "object",
        "properties": {
          "promoterDetail": {
            "$ref": "#/components/schemas/ClientPromoterDetailListItemResponse"
          },
          "promoterMarketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "sales": {
            "$ref": "#/components/schemas/ReportingMarketplaceSalesResponse"
          }
        }
      },
      "ClientPromoterTokenAssignmentGroupResponse": {
        "type": "object",
        "properties": {
          "assigneeEmailAddress": {
            "type": "string"
          },
          "confirmationString": {
            "type": "string"
          },
          "deepLink": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "resolvedPromoterId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentGroupResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAssignmentGroupResponse"
            }
          }
        }
      },
      "ClientRefundCustomerOrderRequest": {
        "type": "object",
        "required": [
          "customerOrderId",
          "eventId",
          "inventoryItemIds",
          "reason"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "inventoryRefundValidationType": {
            "type": "string",
            "enum": [
              "OWNERSHIP",
              "FINAL_NON_REVOKED_OFFER",
              "NONE"
            ]
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ClientRefundOfferRequest": {
        "type": "object",
        "required": [
          "inventoryItemIds",
          "offerId",
          "reason"
        ],
        "properties": {
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ClientToPromoterNotificationCommonData": {
        "type": "object",
        "properties": {
          "assignmentGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAssignmentNotificationCommonData"
            }
          },
          "deletedGroup": {
            "type": "boolean"
          },
          "inviteGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUIConfig": {
        "type": "object",
        "properties": {
          "disabledTabTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIVE_ATTENDANCE_EVENTS",
                "STREAMING_EVENTS",
                "ACTIVE_OFFER_EVENTS",
                "SELLING_EVENT",
                "PROMOTER_MANAGEMENT_EVENT",
                "USER_INBOX"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "ClientUpdateLiveConferenceConfigRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "getinviteExpirationSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxSetupSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnectSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnects": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomParticipantCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "meetingName": {
            "type": "string"
          },
          "minWaitingRoomSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "ClientUpdatePaymentMethodsFingerprintLimitRequest": {
        "type": "object",
        "required": [
          "fingerprintLimitUpdates"
        ],
        "properties": {
          "fingerprintLimitUpdates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FingerprintLimitUpdateRequest"
            }
          }
        }
      },
      "ClientUserClientInviteNotificationCommonData": {
        "type": "object",
        "properties": {
          "inviteId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserClientInviteThymeleaf": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientMediaUrl": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "inviteUrl": {
            "type": "string"
          },
          "invitedClientUserFirstName": {
            "type": "string"
          },
          "invitedClientUserLastName": {
            "type": "string"
          },
          "inviteeEmailAddress": {
            "type": "string"
          },
          "inviterClientUserFirstName": {
            "type": "string"
          },
          "inviterClientUserLastName": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "roleDescription": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          }
        }
      },
      "ClientUserClientNotificationCommonData": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientRole": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserClientThymeleaf": {
        "type": "object",
        "properties": {
          "clientDeeplinkBase": {
            "type": "string"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientMediaUrl": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "roleDescription": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          }
        }
      },
      "ClientUserCreateRequestOld": {
        "type": "object",
        "required": [
          "clientId",
          "firstName",
          "lastName",
          "username"
        ],
        "properties": {
          "clientId": {
            "type": "string"
          },
          "completeSetupInEmail": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PERSONAL_ADMINISTRATOR",
                "YOOP_ADMINISTRATOR",
                "YOOP_FINANCE_MANAGER",
                "YOOP_CUSTOMER_SERVICE",
                "ADMINISTRATOR",
                "BOX_OFFICE_MANAGER",
                "BOX_OFFICE_AGENT",
                "EVENT_COORDINATOR",
                "GENERAL_MANAGER",
                "OPERATIONS_MANAGER",
                "OWNER",
                "SALES_ANALYST",
                "USHER_MANAGER",
                "USHER"
              ]
            }
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ClientUserEventCollabInviteNotificationCommonData": {
        "type": "object",
        "properties": {
          "inviteApproverClientId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserEventCollabInviteThymeleaf": {
        "type": "object",
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "clientAppDeeplinkBase": {
            "type": "string"
          },
          "eventCollabUrl": {
            "description": "Only set on the approval accepted notification.",
            "type": "string"
          },
          "eventDate": {
            "type": "string"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventLocationName": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteUrl": {
            "type": "string"
          },
          "invitedClientId": {
            "type": "integer",
            "format": "int64"
          },
          "invitedClientMediaUrl": {
            "type": "string"
          },
          "invitedClientName": {
            "type": "string"
          },
          "invitedClientUserFirstName": {
            "type": "string"
          },
          "invitedClientUserLastName": {
            "type": "string"
          },
          "invitedEmailAddress": {
            "type": "string"
          },
          "inviterClientMediaUrl": {
            "type": "string"
          },
          "inviterClientName": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "roleDescription": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          }
        }
      },
      "ClientUserEventCollabNotificationCommonData": {
        "type": "object",
        "properties": {
          "clientUserEventRole": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "triggeringClientId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserEventCollabThymeleaf": {
        "type": "object",
        "properties": {
          "clientAppDeeplinkBase": {
            "type": "string"
          },
          "eventCollabUrl": {
            "type": "string"
          },
          "eventDate": {
            "type": "string"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventLocationName": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          },
          "roleDescription": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "triggeringClientId": {
            "type": "integer",
            "format": "int64"
          },
          "triggeringClientMediaUrl": {
            "type": "string"
          },
          "triggeringClientName": {
            "type": "string"
          }
        }
      },
      "ClientUserLoginRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ClientUserLoginResponse": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserProfileDataThymeleaf": {
        "type": "object",
        "properties": {
          "clientDeeplinkBase": {
            "type": "string"
          },
          "clientUserEmailAddress": {
            "type": "string"
          },
          "clientUserFirstName": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserLastName": {
            "type": "string"
          }
        }
      },
      "ClientUserProfileNotificationCommonData": {
        "type": "object",
        "properties": {
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ClientUserProfileResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "emailState": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ClientUserSetPasswordRequest": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          }
        }
      },
      "ClientUserUpdateRequestOld": {
        "type": "object",
        "required": [
          "clientId",
          "clientUserId",
          "firstName",
          "lastName",
          "username"
        ],
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientUserId": {
            "type": "string"
          },
          "completeSetupInEmail": {
            "type": "boolean"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PERSONAL_ADMINISTRATOR",
                "YOOP_ADMINISTRATOR",
                "YOOP_FINANCE_MANAGER",
                "YOOP_CUSTOMER_SERVICE",
                "ADMINISTRATOR",
                "BOX_OFFICE_MANAGER",
                "BOX_OFFICE_AGENT",
                "EVENT_COORDINATOR",
                "GENERAL_MANAGER",
                "OPERATIONS_MANAGER",
                "OWNER",
                "SALES_ANALYST",
                "USHER_MANAGER",
                "USHER"
              ]
            }
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ClientWhitelabelRequest": {
        "type": "object",
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "subdomain": {
            "type": "string"
          }
        }
      },
      "CloudFrontInfoResponse": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "CompletePartialAccountRequest": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "emailVerificationToken": {
            "description": "Email verification token",
            "type": "string"
          },
          "password": {
            "description": "The password selected by the user",
            "type": "string"
          },
          "userProfileRequest": {
            "$ref": "#/components/schemas/UserProfileRequest"
          }
        }
      },
      "ConcurrencyRule": {
        "type": "object",
        "properties": {
          "allowCreate": {
            "type": "boolean"
          },
          "expire": {
            "type": "string",
            "enum": [
              "MOST_RECENT",
              "LEAST_RECENT"
            ]
          },
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConcurrencyRuleFilter"
            }
          },
          "max": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "FilterRule"
            ]
          }
        }
      },
      "ConcurrencyRuleFilter": {
        "type": "object",
        "properties": {
          "ignoreVariantId": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Asset"
            ]
          }
        }
      },
      "ConcurrentStreamingLimit": {
        "type": "object",
        "properties": {
          "cslTrackingId": {
            "type": "string"
          },
          "derivationType": {
            "type": "string",
            "enum": [
              "CLIENT_ASSET",
              "CLIENT_ASSET_VARIANT"
            ]
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConcurrencyRule"
            }
          },
          "safariWorkaround": {
            "type": "string",
            "enum": [
              "BLOCK_SESSION_DURATION",
              "RENEWAL"
            ]
          },
          "sessionDuration": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConferenceVendorUser": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "isOnline": {
            "type": "boolean"
          },
          "location": {
            "type": "string",
            "enum": [
              "MISSING",
              "-5",
              "-4",
              "-3",
              "-2",
              "-1",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "timeInLiveroom": {
            "type": "integer",
            "format": "int64"
          },
          "timeInLobby": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConfigurationResponse": {
        "type": "object",
        "properties": {
          "cslPollingEnabled": {
            "type": "boolean"
          },
          "propertyMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "countryCodeISO2": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "phoneCode": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryMl"
            }
          }
        }
      },
      "CountryMl": {
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "countryName": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "CountryResponse": {
        "description": "The user's mobile number's country code",
        "type": "object",
        "properties": {
          "countryCodeISO2": {
            "description": "The two letter Country Code",
            "type": "string"
          },
          "countryName": {
            "description": "The countryName of the Country",
            "type": "string"
          },
          "id": {
            "description": "The id of Country",
            "type": "string"
          },
          "phoneCode": {
            "description": "The phone code of the country",
            "type": "string"
          },
          "translations": {
            "$ref": "#/components/schemas/CountryMl"
          }
        }
      },
      "CountryTranslation": {
        "description": "The translations for the country.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateAccountAndAcceptEventCollabInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "firstName",
          "inviteId",
          "lastName",
          "password"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateAccountBoxOfficeRequest": {
        "description": "The account information necessary to create a new full user account.",
        "type": "object",
        "required": [
          "userLocale"
        ],
        "properties": {
          "countryCode": {
            "description": "The user's country code",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The user's date of birth",
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "lastName": {
            "description": "The user's last name",
            "type": "string"
          },
          "postalCode": {
            "description": "The user's postal code",
            "type": "string"
          },
          "userLocale": {
            "description": "The locale",
            "type": "string"
          }
        }
      },
      "CreateAccountRequest": {
        "type": "object",
        "required": [
          "emailAddress",
          "password"
        ],
        "properties": {
          "countryCode": {
            "description": "The user's country code",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The user's date of birth",
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "description": "The user's email address",
            "type": "string"
          },
          "emailVerificationToken": {
            "description": "Optional email verification token",
            "type": "string"
          },
          "firstName": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "lastName": {
            "description": "The user's last name",
            "type": "string"
          },
          "mobileCountryCodeISO2": {
            "description": "The user's two digit country code of the user's mobile number",
            "type": "string"
          },
          "mobileNumber": {
            "description": "The user's mobile number",
            "type": "string"
          },
          "password": {
            "description": "The password selected by the user",
            "type": "string"
          },
          "postalCode": {
            "description": "The user's postal code",
            "type": "string"
          },
          "recaptcha": {
            "description": "The client's Recaptcha response from Google",
            "type": "string"
          },
          "userLocale": {
            "description": "The user's locale",
            "type": "string"
          }
        }
      },
      "CreateAffiliateCodeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreateAgeBasedChoiceSetRequest": {
        "type": "object",
        "properties": {
          "createChildChoice": {
            "type": "boolean"
          },
          "createSeniorChoice": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateBidRequest": {
        "type": "object",
        "required": [
          "matchCriteria",
          "price",
          "quantity"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expirationOptionCode": {
            "type": "string"
          },
          "expirationType": {
            "type": "string",
            "enum": [
              "BEFORE_EVENT_2H",
              "BEFORE_EVENT_24H",
              "BEFORE_EVENT_48H",
              "BEFORE_EVENT_72H"
            ]
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "matchCriteria": {
            "$ref": "#/components/schemas/BidMatchCriteria"
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateBulkClientGuestOfferGroupRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryReferenceV2"
            }
          },
          "locale": {
            "type": "string"
          },
          "recipientData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateClientGuestOfferGroupRecipientRequest"
            },
            "uniqueItems": true
          }
        }
      },
      "CreateCategoryOfferGroupRequest": {
        "description": "Only supported for category types: MERCHANDISE, ADD_ON, CHARITY",
        "type": "object",
        "required": [
          "inventoryCategory",
          "marketplaceId",
          "offerGroupSettings"
        ],
        "properties": {
          "inventoryCategory": {
            "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "numOfferGroupInventory": {
            "description": "use offerGroupSettings instead",
            "type": "integer",
            "format": "int32"
          },
          "offerGroupSettings": {
            "$ref": "#/components/schemas/OfferGroupSettings"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateCityRequest": {
        "type": "object",
        "required": [
          "geoRegionId",
          "name"
        ],
        "properties": {
          "geoRegionId": {
            "description": "The ID of the Geo Region this City belongs to.",
            "type": "integer",
            "format": "int64"
          },
          "latitude": {
            "description": "The latitude of this City.",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude of this City.",
            "type": "number"
          },
          "name": {
            "description": "The name of the City.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "Translations for the City.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CityTranslation"
            }
          },
          "unLoCode": {
            "description": "The UN/LOCODE of this City.",
            "type": "string"
          }
        }
      },
      "CreateClientChoicePricingRequest": {
        "type": "object",
        "required": [
          "choiceCode",
          "offsetAmount"
        ],
        "properties": {
          "choiceCode": {
            "type": "string"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "offsetAmount": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          },
          "userLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateClientGuestOfferGroupDetailRequest": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "failedPaymentBidId": {
            "type": "integer",
            "format": "int64"
          },
          "free": {
            "type": "boolean"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateClientGuestOfferGroupRecipientRequest": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "free": {
            "type": "boolean"
          },
          "numTokens": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "type": "number"
          }
        }
      },
      "CreateClientGuestOfferGroupRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "locale": {
            "type": "string"
          },
          "offerGroupDetailList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateClientGuestOfferGroupDetailRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateClientPreconfiguredBoxOfficeRequest": {
        "type": "object",
        "required": [
          "boxOfficeConfiguration",
          "clientId"
        ],
        "properties": {
          "boxOfficeConfiguration": {
            "$ref": "#/components/schemas/PreconfiguredBoxOfficeConfiguration"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateClientPreconfiguredFeeRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "feeConfiguration": {
            "$ref": "#/components/schemas/PreconfiguredFeeConfiguration"
          }
        }
      },
      "CreateClientPreconfiguredPaymentConfigurationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "gatewaySpecificFieldsJson": {
            "type": "string"
          },
          "paymentGatewayType": {
            "type": "string",
            "enum": [
              "NMI",
              "CT_PAYMENT",
              "STRIPE",
              "TEST",
              "UNKNOWN"
            ]
          },
          "paymentMethodConfigurationJson": {
            "type": "string"
          },
          "spreedlyGatewayId": {
            "type": "string"
          }
        }
      },
      "CreateClientPromoCodeDiscountRequestV2": {
        "type": "object",
        "required": [
          "codes"
        ],
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discountPercentage": {
            "type": "number"
          },
          "discountValue": {
            "type": "number"
          },
          "discountValueType": {
            "type": "string",
            "enum": [
              "PERCENTAGE_DISCOUNT",
              "FLAT_PER_INVENTORY_DISCOUNT",
              "FLAT_PER_PARENT_INVENTORY_DISCOUNT"
            ]
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "limitType": {
            "type": "string",
            "enum": [
              "PER_CART",
              "PER_APPLICATION",
              "PER_INVENTORY_ACCESS_TOKEN"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "userLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateClientRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "clientUIConfig": {
            "$ref": "#/components/schemas/ClientUIConfig"
          },
          "contactEmailAddress": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "countryCodeISO2": {
            "type": "string"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "media": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "CreateClientUserClientInviteRequest": {
        "type": "object",
        "required": [
          "clientId",
          "email",
          "role"
        ],
        "properties": {
          "addToCurrentEvents": {
            "type": "boolean"
          },
          "addToFutureEvents": {
            "type": "boolean"
          },
          "addToPastEvents": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          },
          "title": {
            "type": "string"
          }
        }
      },
      "CreateClientUserEventCollabInviteRequest": {
        "type": "object",
        "required": [
          "email",
          "role"
        ],
        "properties": {
          "email": {
            "description": "The email to invite.",
            "type": "string"
          },
          "eventDraftId": {
            "description": "The ID of the event creation draft.",
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "description": "The ID of the event.",
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "role": {
            "description": "The role that Client User will gain upon acceptance of the invite.",
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          }
        }
      },
      "CreateCountryRequest": {
        "type": "object",
        "required": [
          "codeISO2",
          "name"
        ],
        "properties": {
          "codeISO2": {
            "description": "The ISO 2 Country code.",
            "type": "string"
          },
          "name": {
            "description": "The name of this Country.",
            "type": "string"
          },
          "phoneCode": {
            "description": "The phone code for the Country.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "The translations for the country.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryTranslation"
            }
          }
        }
      },
      "CreateDiscountTranslationsRequest": {
        "type": "object",
        "required": [
          "discountId"
        ],
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          }
        }
      },
      "CreateEventAnalyticsTrackerRequest": {
        "type": "object",
        "required": [
          "code",
          "type"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "serverAccessToken": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL"
            ]
          }
        }
      },
      "CreateEventExternalNotificationSubscriptionRequest": {
        "type": "object",
        "required": [
          "displayString",
          "eventId"
        ],
        "properties": {
          "displayString": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "CreateEventGeoRestrictionRequest": {
        "type": "object",
        "required": [
          "countryCode",
          "type"
        ],
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ALL",
              "SHIPPING"
            ]
          }
        }
      },
      "CreateEventMediaRequest": {
        "type": "object",
        "properties": {
          "additionalMediaIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "seatMapMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestItem"
          },
          "videoMediaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventMediaRequestItem"
            }
          }
        }
      },
      "CreateEventMediaRequestItem": {
        "type": "object",
        "required": [
          "mediaType",
          "url"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "longDescription": {
            "type": "string"
          },
          "mediaId": {
            "type": "integer",
            "format": "int64"
          },
          "mediaSubType": {
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaTranslation"
            }
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateEventMediaRequestV2": {
        "type": "object",
        "required": [
          "avatarMedia",
          "defaultMedia",
          "emailMedia"
        ],
        "properties": {
          "additionalMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "requestId": {
            "type": "string"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "seatMapMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "videoMediaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          }
        }
      },
      "CreateEventRequest": {
        "type": "object",
        "required": [
          "clientId",
          "currency",
          "doorsCloseDate",
          "doorsOpenDate",
          "eventAccessibilityType",
          "eventDate",
          "eventEndDate",
          "eventLocationId",
          "eventMedia",
          "eventName",
          "eventNameShort",
          "eventType",
          "inventoryCategories",
          "majorCategoryIds",
          "minorCategoryIds",
          "onlineHideDate",
          "performerIds",
          "seatInventoryData",
          "vanityName"
        ],
        "properties": {
          "accessControlConfigurationRequest": {
            "$ref": "#/components/schemas/EventAccessControlConfigurationRequest"
          },
          "additionalEventDescription": {
            "type": "string"
          },
          "additionalRules": {
            "type": "string"
          },
          "analyticsTrackers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventAnalyticsTrackerRequest"
            }
          },
          "boxOfficeConfigRequest": {
            "$ref": "#/components/schemas/SetBoxOfficeConfigRequest"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "creatorClientName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultPurchasePeopleQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "doorsCloseDate": {
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "dryRun": {
            "type": "boolean"
          },
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventGeoRestrictionRequest"
            }
          },
          "eventLocationId": {
            "type": "integer",
            "format": "int64"
          },
          "eventMedia": {
            "$ref": "#/components/schemas/CreateEventMediaRequestV2"
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "eventPackageType": {
            "type": "string",
            "enum": [
              "PARENT"
            ]
          },
          "eventSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventSubDetailRequest"
            }
          },
          "eventTimelineGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventTimelineGroupRequest"
            }
          },
          "eventType": {
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "EXPERIENCE",
              "GOODS_AND_SERVICES",
              "PARKING",
              "CONFERENCE",
              "MISCELLANEOUS",
              "STREAMING",
              "COLLECTION",
              "SEASON_MEMBERSHIP"
            ]
          },
          "exchangeConfig": {
            "$ref": "#/components/schemas/SetEventExchangeConfigViaCodeRequest"
          },
          "externalNotificationSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateExternalNotificationSubscriptionRequest"
            }
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeRequest": {
            "$ref": "#/components/schemas/SetEventFeesRequest"
          },
          "gateUrl": {
            "type": "string"
          },
          "googleAnalyticsId": {
            "type": "string"
          },
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
            }
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "liveStreamReplaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "majorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "marketplaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMarketplaceRequest"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "numInTour": {
            "type": "integer",
            "format": "int32"
          },
          "onlineHideDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2500
          },
          "optionalShortDescription": {
            "type": "string",
            "minLength": 1,
            "maxLength": 300
          },
          "paymentVerificationThreshold": {
            "type": "integer",
            "format": "int64"
          },
          "payoutDelaySeconds": {
            "type": "integer",
            "format": "int64"
          },
          "performerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "requestId": {
            "type": "string"
          },
          "salesGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalesGroupRequest"
            }
          },
          "seasonMembershipConfig": {
            "$ref": "#/components/schemas/SetEventSeasonMembershipConfigRequest"
          },
          "seatChartInventoryData": {
            "$ref": "#/components/schemas/SeatChartLabelRequest"
          },
          "seatConfigId": {
            "type": "integer",
            "format": "int64"
          },
          "seatInventoryData": {
            "$ref": "#/components/schemas/SeatInventoryDataRequest"
          },
          "sectionInventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          },
          "sectionInventoryData": {
            "$ref": "#/components/schemas/InventorySectionRequest"
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRankedSponsorGroupRequest"
            }
          },
          "tagGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryTagGroupRequest"
            }
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentEnabled": {
            "type": "boolean"
          },
          "tokenAssignmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentMaxChainLength": {
            "type": "integer",
            "format": "int32"
          },
          "tourId": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTranslation"
            }
          },
          "vanityName": {
            "type": "string"
          }
        }
      },
      "CreateEventStreamSegmentsRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamSegment"
            }
          }
        }
      },
      "CreateEventSubDetailRequest": {
        "type": "object",
        "required": [
          "description",
          "eventId"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventTagType": {
            "type": "string",
            "enum": [
              "CLIENT",
              "LOCATION_PROFILE",
              "PERFORMER_PROFILE"
            ]
          },
          "icon": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "requestId": {
            "type": "string"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubDetailTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "COVID",
              "BAGS",
              "SOCIAL",
              "MERCHANDISE",
              "RECEIPT_EMAIL"
            ]
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CreateEventTimelineGroupRequest": {
        "type": "object",
        "required": [
          "eventId",
          "timelineItems"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "timelineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventTimelineRequest"
            }
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslation"
            }
          }
        }
      },
      "CreateEventTimelineRequest": {
        "type": "object",
        "required": [
          "description",
          "eventId",
          "rank",
          "timelineGroupId"
        ],
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "timelineGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslation"
            }
          }
        }
      },
      "CreateExternalNotificationSubscriptionRequest": {
        "type": "object",
        "required": [
          "displayString"
        ],
        "properties": {
          "displayString": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "CreateFeeRequest": {
        "type": "object",
        "required": [
          "applicationLevel",
          "breakdownDisplayOption",
          "feeName",
          "includedInBase",
          "reason",
          "responsibilityType",
          "subReason",
          "taxable",
          "value",
          "valueType"
        ],
        "properties": {
          "applicationFeeCodes": {
            "description": "A list of preconfigured fee codes that this fee should apply to.",
            "type": "array",
            "items": {
              "description": "A list of preconfigured fee codes that this fee should apply to.",
              "type": "string"
            }
          },
          "applicationLevel": {
            "description": "The application level for this fee",
            "type": "string",
            "enum": [
              "TOKEN",
              "TRANSACTION",
              "PREVIOUS_FEE",
              "PREVIOUS_FEE_TOKEN",
              "TOKEN_LIFT",
              "TOKEN_PROFIT"
            ]
          },
          "applyOrder": {
            "description": "The order in which this fee gets applied. Fees with higher order get applied on top of fees with lower order.",
            "type": "integer",
            "format": "int32"
          },
          "blacklistedCategoryCodes": {
            "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
            "type": "array",
            "items": {
              "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
              "type": "string"
            }
          },
          "breakdownDisplayOption": {
            "description": "Fee's breakdown display option",
            "type": "string",
            "enum": [
              "ALL",
              "EMAIL"
            ]
          },
          "categoryTypes": {
            "description": "Category types this fee should apply to",
            "type": "array",
            "items": {
              "description": "Category types this fee should apply to",
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "customFeeApplicationRule": {
            "description": "How this fee should apply on all custom fees.",
            "type": "string",
            "enum": [
              "NONE",
              "ALL",
              "ONLY_TAXABLE"
            ]
          },
          "feeCode": {
            "description": "The unique fee code for this fee",
            "type": "string"
          },
          "feeName": {
            "description": "The name for this fee",
            "type": "string"
          },
          "feeNameLong": {
            "description": "Optional long name for this fee",
            "type": "string"
          },
          "includedInBase": {
            "description": "If the fee should be included in the base price or not",
            "type": "boolean"
          },
          "marketplaceRestriction": {
            "description": "Whether this fee applies for transactions in primary or secondary marketplaces.",
            "type": "string",
            "enum": [
              "ONLY_PRIMARY",
              "ONLY_SECONDARY",
              "ONLY_BIDS"
            ]
          },
          "preconfiguredFeeCode": {
            "type": "string"
          },
          "reason": {
            "description": "The reason this fee is applied",
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "responsibilityType": {
            "description": "Is this fee for CLIENT, BUYER or SELLER",
            "type": "string",
            "enum": [
              "CLIENT",
              "BUYER",
              "SELLER"
            ]
          },
          "subReason": {
            "description": "The sub reason this fee is applied",
            "type": "string",
            "enum": [
              "STATE_TAX",
              "FEDERAL_TAX"
            ]
          },
          "taxable": {
            "description": "If the fee is taxable or not",
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeTranslation"
            }
          },
          "value": {
            "description": "The value for this fee",
            "type": "number"
          },
          "valueConfiguration": {
            "$ref": "#/components/schemas/FeeValueConfiguration"
          },
          "valueType": {
            "description": "The value type for this fee",
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "PROFIT_PERCENTAGE",
              "STEPPED"
            ]
          }
        }
      },
      "CreateGeoRegionRequest": {
        "type": "object",
        "required": [
          "countryId",
          "name"
        ],
        "properties": {
          "abbreviation": {
            "description": "The abbreviation for the Geo Region.",
            "type": "string"
          },
          "countryId": {
            "description": "The ID of the Country this Geo Region is in.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the Geo Region.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "Translations for the Geo Region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoRegionTranslation"
            }
          }
        }
      },
      "CreateInventoryCategoryEventStreamsRequest": {
        "type": "object",
        "required": [
          "inventoryCategoryEventStreams"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryEventStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryEventStreamAccess"
            }
          }
        }
      },
      "CreateInventoryCategoryExchangeConfigRequest": {
        "type": "object",
        "required": [
          "inventoryCategoryId"
        ],
        "properties": {
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "maxBidPrice": {
            "type": "number"
          },
          "minBidPrice": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateInventoryCategoryExchangeConfigViaCodeRequest": {
        "type": "object",
        "required": [
          "inventoryCategoryCode"
        ],
        "properties": {
          "inventoryCategoryCode": {
            "type": "string"
          },
          "minBidPrice": {
            "description": "This cannot co-exist with event level minBidPrice.",
            "type": "number"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateInventoryCategoryRequest": {
        "description": "The inventory categories this seat config helps pre-refill during event creation.",
        "type": "object",
        "required": [
          "accessibilityType",
          "code",
          "eventId",
          "name",
          "type"
        ],
        "properties": {
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "accessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "STREAMING"
            ]
          },
          "ageBasedChoiceConfig": {
            "$ref": "#/components/schemas/CreateAgeBasedChoiceSetRequest"
          },
          "allowTokenAssignment": {
            "type": "boolean"
          },
          "allowUpgradeFrom": {
            "type": "boolean"
          },
          "allowUpgradeTo": {
            "type": "boolean"
          },
          "blacklistedFeeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "childGroupingType": {
            "type": "string",
            "enum": [
              "BUNDLE",
              "GROUP",
              "HOTEL_ROOM",
              "TABLE"
            ]
          },
          "choiceSets": {
            "description": "Choice Sets and names for this inventory category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceSetRequest"
            }
          },
          "code": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/InventoryCategoryUIDisplaySettings"
          },
          "emailRules": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "externalTaxCode": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandiseEmailDescription": {
            "type": "string"
          },
          "minimumUserAge": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleMaxPrice": {
            "type": "number"
          },
          "rules": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "upsellAllowed": {
            "type": "boolean"
          }
        }
      },
      "CreateInventoryCategoryTagGroupRequest": {
        "type": "object",
        "required": [
          "code",
          "eventId",
          "name",
          "tags",
          "valueType"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryTagRequest"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTagGroupTranslation"
            }
          },
          "valueType": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "DATE_RANGE"
            ]
          }
        }
      },
      "CreateInventoryCategoryTagRequest": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "categoryCodesToAssign": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTagTranslation"
            }
          },
          "valueJson": {
            "type": "string"
          }
        }
      },
      "CreateInventoryCategoryTemplateRequest": {
        "type": "object",
        "required": [
          "accessibilityType",
          "clientId",
          "code",
          "eventId",
          "name",
          "type"
        ],
        "properties": {
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "accessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "STREAMING"
            ]
          },
          "ageBasedChoiceConfig": {
            "$ref": "#/components/schemas/CreateAgeBasedChoiceSetRequest"
          },
          "allowTokenAssignment": {
            "type": "boolean"
          },
          "allowUpgradeFrom": {
            "type": "boolean"
          },
          "allowUpgradeTo": {
            "type": "boolean"
          },
          "blacklistedFeeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "childGroupingType": {
            "type": "string",
            "enum": [
              "BUNDLE",
              "GROUP",
              "HOTEL_ROOM",
              "TABLE"
            ]
          },
          "choiceSets": {
            "description": "Choice Sets and names for this inventory category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceSetRequest"
            }
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/InventoryCategoryUIDisplaySettings"
          },
          "emailRules": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "externalTaxCode": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandiseEmailDescription": {
            "type": "string"
          },
          "minimumUserAge": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleMaxPrice": {
            "type": "number"
          },
          "rules": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "upsellAllowed": {
            "type": "boolean"
          }
        }
      },
      "CreateInventoryChoiceRequest": {
        "description": "Choices to include in the Choice Set.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "code": {
            "description": "The code of the Choice.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Choice.",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of the choice set.",
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "tags": {
            "description": "Tags for the Choice.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceTagRequest"
            }
          },
          "translations": {
            "description": "Translations for the Choice.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceTranslation"
            }
          }
        }
      },
      "CreateInventoryChoiceSetRequest": {
        "description": "Choice Sets and names for this inventory category.",
        "type": "object",
        "required": [
          "choices",
          "description",
          "name"
        ],
        "properties": {
          "choices": {
            "description": "Choices to include in the Choice Set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceRequest"
            }
          },
          "code": {
            "description": "The code of the choice set.",
            "type": "string"
          },
          "defaultChoiceCode": {
            "description": "The code of the default choice of the choice set.",
            "type": "string"
          },
          "description": {
            "description": "The description of the choice set.",
            "type": "string"
          },
          "name": {
            "description": "The name of the choice set.",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of the choice set.",
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "Translations for the Choice Set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceSetTranslation"
            }
          }
        }
      },
      "CreateInventoryChoiceTagRequest": {
        "description": "Tags for the Choice.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "requestId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGE_BASED"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "ADULT",
              "CHILD",
              "SENIOR"
            ]
          }
        }
      },
      "CreateInventoryItemRequest": {
        "type": "object",
        "required": [
          "categoryCode",
          "eventId",
          "qualityScore",
          "rowCode",
          "seatCode",
          "sectionCode"
        ],
        "properties": {
          "categoryCode": {
            "type": "string"
          },
          "childSeatCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "requestId": {
            "type": "string"
          },
          "rowCode": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupCode": {
            "type": "string"
          },
          "seatCode": {
            "type": "integer",
            "format": "int64"
          },
          "seatingChartId": {
            "type": "string"
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventorySeatTranslation"
            }
          }
        }
      },
      "CreateInventoryItemsRequest": {
        "type": "object",
        "required": [
          "eventId",
          "items"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryItemRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateInventoryRowRequest": {
        "type": "object",
        "required": [
          "categoryCode",
          "eventId",
          "name",
          "rowCode",
          "seats",
          "sectionCode"
        ],
        "properties": {
          "categoryCode": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "requestId": {
            "type": "string"
          },
          "rowCode": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupCode": {
            "type": "string"
          },
          "seatingChartId": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryItemRequest"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryRowTranslation"
            }
          }
        }
      },
      "CreateInventorySectionRequest": {
        "description": "The section inventory this seat config uses.",
        "type": "object",
        "required": [
          "eventId",
          "name",
          "sectionCode"
        ],
        "properties": {
          "categoryCode": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "gaSeatCount": {
            "type": "integer",
            "format": "int32"
          },
          "gateCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "requestId": {
            "type": "string"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryRowRequest"
            }
          },
          "salesGroupCode": {
            "type": "string"
          },
          "seatingChartId": {
            "type": "string"
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventorySectionTranslation"
            }
          }
        }
      },
      "CreateInventorySectionsRequest": {
        "type": "object",
        "required": [
          "eventId",
          "sections"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          }
        }
      },
      "CreateLiveConferenceCandidatesRequest": {
        "type": "object",
        "required": [
          "inviteExpirationTime"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "initialPriority": {
            "type": "integer",
            "format": "int32"
          },
          "inviteExpirationTime": {
            "type": "string",
            "format": "date-time"
          },
          "userEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          }
        }
      },
      "CreateLiveConferenceCandidatesResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "failedCandidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "successfulCandidates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          }
        }
      },
      "CreateLiveConferenceConfigRequest": {
        "type": "object",
        "required": [
          "eventId",
          "maxWaitingRoomParticipantCount",
          "meetingName",
          "roomId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteExpirationSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxSetupSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnectSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnects": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomParticipantCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "meetingName": {
            "type": "string"
          },
          "minWaitingRoomSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "notPreviouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "previouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "roomId": {
            "type": "string"
          }
        }
      },
      "CreateLocationProfileGateRequest": {
        "type": "object",
        "required": [
          "code",
          "locationProfileId",
          "name"
        ],
        "properties": {
          "code": {
            "description": "The code of the gate.",
            "type": "string"
          },
          "locationProfileId": {
            "description": "The ID of the location profile this gate belongs to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the gate.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "The translations for the gate.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileGateTranslation"
            }
          }
        }
      },
      "CreateLocationProfileRequest": {
        "type": "object",
        "required": [
          "addressLine1",
          "cityId",
          "clientId",
          "googlePlaceId",
          "latitude",
          "longitude",
          "name",
          "postalCode"
        ],
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "cityId": {
            "type": "integer",
            "format": "int64"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "description": {
            "type": "string"
          },
          "gates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateLocationProfileGateRequest"
            }
          },
          "googlePlaceId": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "locationTypeId": {
            "type": "integer",
            "format": "int64"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "description": "The name of the location profile.",
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "socialMedias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSocialMediaRequest"
            }
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileTranslation"
            }
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "CreateLocationTypeRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationTypeTranslation"
            }
          }
        }
      },
      "CreateMarketplaceRequest": {
        "type": "object",
        "required": [
          "endDateTime",
          "eventId",
          "forceAllocationDateTime",
          "maxManualPaymentDurationSeconds",
          "minManualPaymentDurationSeconds",
          "startDateTime",
          "type"
        ],
        "properties": {
          "capacityDefaultString": {
            "type": "string"
          },
          "categoryOfferGroups": {
            "description": "Only supported for category types: MERCHANDISE, ADD_ON, CHARITY",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCategoryOfferGroupRequest"
            }
          },
          "code": {
            "type": "string"
          },
          "displayOptions": {
            "type": "string"
          },
          "endCalculateWinnersDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "forceAllocationDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "forceAutoPay": {
            "type": "boolean"
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "maxManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOfferGroupRequest"
            }
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "private": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleForbiddenString": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          },
          "shippingMethod": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          }
        }
      },
      "CreateMediaRequest": {
        "type": "object",
        "required": [
          "mediaType",
          "url"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "longDescription": {
            "type": "string"
          },
          "mediaSubType": {
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaTranslation"
            }
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateMevInvoiceRequest": {
        "type": "object",
        "required": [
          "customerOrderId",
          "serialNumber"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "CreateMp4EventStreamInfraAtTimeRequest": {
        "type": "object",
        "properties": {
          "artistInput": {
            "$ref": "#/components/schemas/CustomInputSourceRequest"
          },
          "artistInputSourceEndBehavior": {
            "type": "string",
            "enum": [
              "CONTINUE",
              "LOOP"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "infraCreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "preEventInput": {
            "$ref": "#/components/schemas/CustomInputSourceRequest"
          },
          "primaryArtistInput": {
            "$ref": "#/components/schemas/CustomInputSourceRequest"
          },
          "secondaryArtistInput": {
            "$ref": "#/components/schemas/CustomInputSourceRequest"
          }
        }
      },
      "CreateOfferGroupRequest": {
        "type": "object",
        "required": [
          "marketplaceId",
          "seatConfigurationType"
        ],
        "properties": {
          "absurdPrice": {
            "type": "number"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/CreateOfferGroupRequest"
          },
          "choicePricingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateClientChoicePricingRequest"
            }
          },
          "description": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "type": "number"
          },
          "inventoryCount": {
            "$ref": "#/components/schemas/GAInventoryCount"
          },
          "inventoryReferences": {
            "description": "Cannot be used together with inventoryCount.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryReferenceV2"
            }
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "pricingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingTier"
            }
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedOfferIncrements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSuggestedOfferIncrementRequest"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTranslation"
            }
          },
          "visibleEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateOfferGroupsRequest": {
        "type": "object",
        "required": [
          "description",
          "inventoryReferences",
          "seatConfigurationType"
        ],
        "properties": {
          "absurdPrice": {
            "type": "number"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "historicalAveragePrice": {
            "type": "number"
          },
          "inventoryReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryReference"
            }
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceId": {
            "description": "The marketplace id in which to create the associated listings",
            "type": "integer",
            "format": "int64"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "priceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupPriceRequest"
            }
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "suggestedOfferIncrements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSuggestedOfferIncrementRequest"
            }
          }
        }
      },
      "CreateOfferGroupsResponse": {
        "type": "object",
        "properties": {
          "description": {
            "description": "The description for the offer group",
            "type": "string"
          },
          "historicalAveragePrice": {
            "description": "Previous historical average, used in live markets",
            "type": "number"
          },
          "id": {
            "description": "The id of this offer group",
            "type": "integer",
            "format": "int64"
          },
          "marketplaceId": {
            "description": "The id of the marketplace this offer group belongs to",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupInviteDetailId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupResponse"
            }
          },
          "reservePrice": {
            "description": "The reserve price for the offer group",
            "type": "number"
          },
          "seatConfigurationType": {
            "description": "Whether or not this offer group is GENERAL_ADMISSION or SEATED",
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "suggestedOfferIncrementIds": {
            "description": "The ids of suggested offer increments",
            "type": "array",
            "items": {
              "description": "The ids of suggested offer increments",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "CreateOrUpdateClientUserClientConfigRequest": {
        "type": "object",
        "required": [
          "clientId",
          "clientUserId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "includeInNewEvents": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PERSONAL_ADMINISTRATOR",
                "YOOP_ADMINISTRATOR",
                "YOOP_FINANCE_MANAGER",
                "YOOP_CUSTOMER_SERVICE",
                "ADMINISTRATOR",
                "BOX_OFFICE_MANAGER",
                "BOX_OFFICE_AGENT",
                "EVENT_COORDINATOR",
                "GENERAL_MANAGER",
                "OPERATIONS_MANAGER",
                "OWNER",
                "SALES_ANALYST",
                "USHER_MANAGER",
                "USHER"
              ]
            },
            "uniqueItems": true
          },
          "title": {
            "type": "string"
          }
        }
      },
      "CreateOrUpdateExternalNotificationSubscriptionRequest": {
        "type": "object",
        "required": [
          "displayString"
        ],
        "properties": {
          "displayString": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "CreateOrUpdatePricingTierRequest": {
        "type": "object",
        "required": [
          "price"
        ],
        "properties": {
          "discountId": {
            "description": "If set, performs and update. If null, creates a new tier.",
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          }
        }
      },
      "CreatePromoterOfferGroupCheckoutRequest": {
        "type": "object",
        "properties": {
          "failedPaymentBidId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreatePromoterOfferGroupRequest": {
        "type": "object",
        "properties": {
          "assigneeEmail": {
            "type": "string"
          },
          "failedPaymentBidId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "paymentComplete": {
            "type": "boolean"
          },
          "payoutMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateRankedSponsorGroupRequest": {
        "type": "object",
        "required": [
          "clientId",
          "height"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "existingSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateSponsorRequest"
            }
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "newSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSponsorRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "CreateRtmpEventStreamInfraAtTimeRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "infraCreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "preEventInput": {
            "$ref": "#/components/schemas/CustomInputSourceRequest"
          },
          "primaryArtistInput": {
            "$ref": "#/components/schemas/InputDestinationRequest"
          },
          "secondaryArtistInput": {
            "$ref": "#/components/schemas/InputDestinationRequest"
          }
        }
      },
      "CreateSalesGroupRequest": {
        "description": "The sales groups this seat config helps pre-fill during event creation.",
        "type": "object",
        "required": [
          "code",
          "eventId",
          "name"
        ],
        "properties": {
          "carouselMediaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalesGroupRequest"
            }
          },
          "code": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UIDisplaySettings"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupTranslation"
            }
          }
        }
      },
      "CreateSalesGroupTranslationsRequest": {
        "type": "object",
        "required": [
          "salesGroupId",
          "translations"
        ],
        "properties": {
          "requestId": {
            "type": "string"
          },
          "salesGroupId": {
            "description": "The ID of the sales group.",
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "description": "The translations to create.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupTranslation"
            }
          }
        }
      },
      "CreateSeatChartRequest": {
        "type": "object",
        "required": [
          "key",
          "locationProfileId"
        ],
        "properties": {
          "key": {
            "description": "The unique key of the seat chart from seats io (if seatsIo type)",
            "type": "string"
          },
          "locationProfileId": {
            "description": "The id of the location profile to tie this seat chart.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name to overwrite the default chart name.",
            "type": "string"
          },
          "seatChartDefaultJsonData": {
            "$ref": "#/components/schemas/SeatChartDefaultTypeDataRequest"
          },
          "type": {
            "type": "string",
            "enum": [
              "BASIC_JSON",
              "SEAT_IO"
            ]
          }
        }
      },
      "CreateSeatConfigFromChartRequest": {
        "type": "object",
        "required": [
          "locationProfileId",
          "seatChartId",
          "seatChartLabelRequest"
        ],
        "properties": {
          "inventoryCategories": {
            "description": "The inventory categories this seat config helps pre-refill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
            }
          },
          "locationProfileId": {
            "description": "The id of the location profile to tie this seat config to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the seat config.",
            "type": "string"
          },
          "salesGroups": {
            "description": "The sales groups this seat config helps pre-fill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalesGroupRequest"
            }
          },
          "seatChartId": {
            "type": "integer",
            "format": "int64"
          },
          "seatChartLabelRequest": {
            "$ref": "#/components/schemas/SeatChartLabelRequest"
          },
          "seatMapMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          }
        }
      },
      "CreateSeatConfigRequest": {
        "type": "object",
        "required": [
          "locationProfileId",
          "name"
        ],
        "properties": {
          "inventoryCategories": {
            "description": "The inventory categories this seat config helps pre-refill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
            }
          },
          "locationProfileId": {
            "description": "The id of the location profile to tie this seat config to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the seat config.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "salesGroups": {
            "description": "The sales groups this seat config helps pre-fill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalesGroupRequest"
            }
          },
          "seatChartId": {
            "type": "integer",
            "format": "int64"
          },
          "seatMap": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "sections": {
            "description": "The section inventory this seat config uses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          }
        }
      },
      "CreateSocialMediaRequest": {
        "type": "object",
        "required": [
          "parentId",
          "parentType",
          "type",
          "url"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "parentType": {
            "type": "string",
            "enum": [
              "PERFORMER_PROFILE",
              "LOCATION_PROFILE"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "FACEBOOK",
              "FLICKR",
              "GOOGLE_PLUS",
              "INSTAGRAM",
              "LINKEDIN",
              "PINTEREST",
              "SNAPCHAT",
              "TUMBLR",
              "TWITTER",
              "WEBSITE",
              "YOUTUBE"
            ]
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CreateSponsorRequest": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "iconMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "iconMediaId": {
            "description": "The id of the icon image to display. Cannot be used with iconMedia.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the sponsor.",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of the sponsor in relation to its SponsorGroup.",
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "description": "Any translations for the sponsor",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorTranslation"
            }
          },
          "url": {
            "description": "The url for sponsor.",
            "type": "string"
          }
        }
      },
      "CreateSuggestedOfferIncrementRequest": {
        "type": "object",
        "properties": {
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedOfferIncrementTranslation"
            }
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CslSessionCheckInResponse": {
        "type": "object",
        "properties": {
          "checkInIntervalSeconds": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomInputSourceRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "CustomerOrderCreationRequestData": {
        "type": "object",
        "properties": {
          "shippingAddressRequest": {
            "$ref": "#/components/schemas/ShippingAddressRequest"
          }
        }
      },
      "CustomerOrderPricingDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "amountPerToken": {
            "type": "string"
          },
          "boxOfficePurchaseData": {
            "$ref": "#/components/schemas/BoxOfficePurchaseDataThymeLeaf"
          },
          "buyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "includedBuyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "includedSellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "numberOfAllAccessTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferDetailsThymeleaf"
            }
          },
          "purchasedForFree": {
            "type": "boolean"
          },
          "purchaserData": {
            "$ref": "#/components/schemas/NotificationUserData"
          },
          "resaleForbiddenContext": {
            "type": "string"
          },
          "resaleForbiddenReasonString": {
            "type": "string"
          },
          "resaleProfitSharePercentage": {
            "type": "number",
            "format": "double"
          },
          "sellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "totalAmount": {
            "type": "string"
          },
          "totalAmountRaw": {
            "type": "number"
          },
          "totalFees": {
            "type": "string"
          },
          "totalTokenAmount": {
            "type": "string"
          },
          "upsellOfferGroupDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsellDetailsThymeleaf"
            }
          }
        }
      },
      "CustomerOrderReceiptRefundResponse": {
        "type": "object",
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryChangeData": {
            "$ref": "#/components/schemas/InventoryChangeData"
          },
          "offerResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferResponse"
            }
          },
          "overallResponse": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "paymentMeans": {
            "$ref": "#/components/schemas/PaymentMeans"
          },
          "purchaseTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "refundTransactionId": {
            "type": "integer",
            "format": "int64"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "tokenInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          }
        }
      },
      "CustomerOrderReceiptResponse": {
        "description": "The receipts associated with this event",
        "type": "object",
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryChangeData": {
            "$ref": "#/components/schemas/InventoryChangeData"
          },
          "offerResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferResponse"
            }
          },
          "overallResponse": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "paymentMeans": {
            "$ref": "#/components/schemas/PaymentMeans"
          },
          "purchaseTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "tokenInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          }
        }
      },
      "CustomerOrderRefundCheckoutResponse": {
        "type": "object",
        "properties": {
          "refundCheckoutData": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "refundOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundOffer"
            }
          }
        }
      },
      "CustomerOrderRefundResponse": {
        "type": "object",
        "properties": {
          "failedRefunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundOffer"
            }
          },
          "successfulRefunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundOffer"
            }
          }
        }
      },
      "DateHistogramInterval": {
        "type": "object",
        "properties": {
          "fragment": {
            "type": "boolean"
          }
        }
      },
      "DateThymeleaf": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "timeZoneOffset": {
            "type": "string"
          }
        }
      },
      "DebugSettings": {
        "type": "object",
        "properties": {
          "stateTransitionDelayMillis": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeclineClientUserClientInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "inviteId"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "DeclineClientUserEventCollabInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "inviteId"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "DeleteBoxOfficePrinterRequest": {
        "type": "object",
        "required": [
          "clientId",
          "printerId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "printerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeleteClientUserClientConfigRequest": {
        "type": "object",
        "required": [
          "clientId",
          "clientUserId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "DeleteEventStreamSegmentsRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "segmentOrders": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "uniqueItems": true
          }
        }
      },
      "DeleteInventoryCategoryEventStreamsRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          }
        }
      },
      "DeleteLiveConferenceCandidatesRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          }
        }
      },
      "DeleteMevDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "id"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeleteSquareTerminalDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "pairingId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "pairingId": {
            "type": "string"
          }
        }
      },
      "DiscountTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "advertisementString": {
            "type": "string"
          },
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "requirementMissingMessage": {
            "type": "string"
          }
        }
      },
      "DiscountValidationErrorResponse": {
        "type": "object",
        "properties": {
          "discountCode": {
            "type": "string"
          },
          "discountErrorMessage": {
            "type": "string"
          },
          "discountValidationResult": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "DATE_RANGE_INVALID",
              "CART_REQUIREMENT_NOT_MET",
              "GLOBAL_LIMIT_VIOLATION",
              "USER_LIMIT_VIOLATION",
              "INVALID_CODE",
              "INVALID_CHOICE_DISCOUNT"
            ]
          }
        }
      },
      "DrawOfferRequest": {
        "type": "object",
        "required": [
          "autoPay",
          "numTokens",
          "offerGroupId"
        ],
        "properties": {
          "autoPay": {
            "description": "Whether payment processing can happen automatically if this offer succeeds.",
            "type": "boolean"
          },
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "numTokens": {
            "description": "The number of tokens the user is attempting to win",
            "type": "integer",
            "format": "int32"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "serverGuid": {
            "type": "string"
          }
        }
      },
      "DrawResponse": {
        "type": "object",
        "required": [
          "numberOfTokens",
          "offerStatus",
          "tokenPrice"
        ],
        "properties": {
          "customerOrderId": {
            "description": "The ID for the draw customer order.",
            "type": "integer",
            "format": "int64"
          },
          "entryId": {
            "description": "The ID for the draw entry.",
            "type": "integer",
            "format": "int64"
          },
          "numberOfTokens": {
            "description": "The number of tokens the user has entered a draw ticket for",
            "type": "integer",
            "format": "int32"
          },
          "offerStatus": {
            "description": "The status of the draw entry",
            "type": "string",
            "enum": [
              "DEFAULT",
              "WON_PAYMENT_PROCESSING_PENDING",
              "WON_PAYMENT_PROCESSING_INITIATED",
              "WON_MANUAL_PAYMENT_REQUIRED",
              "WON_PAYMENT_SUCCESSFUL",
              "WON_TOKEN_ASSIGNED",
              "LOST"
            ]
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "DrmRentalProfile": {
        "type": "object",
        "properties": {
          "rental": {
            "$ref": "#/components/schemas/DrmRentalProfileConfiguration"
          }
        }
      },
      "DrmRentalProfileConfiguration": {
        "type": "object",
        "properties": {
          "absoluteExpiration": {
            "description": "The time after which no user can start playback for a stream.",
            "type": "string",
            "format": "date-time"
          },
          "playDuration": {
            "description": "The time (in ms) for how long the content can be consumed after a user starts playback.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DrmTodayRequest": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string"
          },
          "drmScheme": {
            "type": "string",
            "enum": [
              "FAIRPLAY",
              "WIDEVINE_CLASSIC",
              "WIDEVINE_MODULAR",
              "PLAYREADY",
              "OMADRM",
              "DEFAULT"
            ]
          },
          "session": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          }
        }
      },
      "DrmTodayResponse": {
        "type": "object",
        "properties": {
          "accountingId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "csl": {
            "$ref": "#/components/schemas/ConcurrentStreamingLimit"
          },
          "message": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/DrmRentalProfile"
          },
          "storeLicense": {
            "type": "boolean"
          },
          "variantId": {
            "type": "string"
          }
        }
      },
      "ESearchBucket": {
        "type": "object",
        "properties": {
          "buckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ESearchBucket"
            }
          },
          "docCount": {
            "type": "integer",
            "format": "int64"
          },
          "key": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EditAffiliateCodeRequest": {
        "type": "object",
        "properties": {
          "codeId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EndLiveStreamRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "shouldHarvest": {
            "type": "boolean"
          },
          "shouldScheduleInfraDestruction": {
            "type": "boolean"
          }
        }
      },
      "EventAccessControlConfigurationRequest": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "isRescanAllowed": {
            "type": "boolean"
          },
          "scanTimeRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlScanTimeRangeRequest"
            }
          }
        }
      },
      "EventAccessControlConfigurationResponse": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "isRescanAllowed": {
            "type": "boolean"
          },
          "scanTimeRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlScanTimeRangeResponse"
            }
          }
        }
      },
      "EventActiveMarketplaceDetailsQo": {
        "type": "object",
        "properties": {
          "activeMarketplaceEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "activeMarketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "activeMarketplaceName": {
            "type": "string"
          },
          "activeMarketplaceStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "activeMarketplaceState": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "PAUSED",
              "WINNERS_SELECTED",
              "ALLOCATE_READY"
            ]
          },
          "activeMarketplaceType": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "minimumPrice": {
            "type": "number"
          },
          "totalActiveOfferGroupCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventActivityStatusResponse": {
        "type": "object",
        "properties": {
          "earliestOfferDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceStatusList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceActivityStatusResponse"
            }
          }
        }
      },
      "EventAdminResponse": {
        "type": "object",
        "properties": {
          "additionalEventDescriptions": {
            "description": "Additional descriptors for the event",
            "type": "array",
            "items": {
              "description": "Additional descriptors for the event",
              "type": "string"
            }
          },
          "additionalRules": {
            "description": "Additional rules for the event",
            "type": "string"
          },
          "announcement": {
            "description": "Any announcement string for the event",
            "type": "string"
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "cityId": {
            "description": "The ID of the city in which the event takes place",
            "type": "integer",
            "format": "int64"
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "countryId": {
            "description": "The ID of the country in which the event takes place",
            "type": "integer",
            "format": "int64"
          },
          "countryName": {
            "description": "The name of the country in which the event takes place",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event",
            "type": "string",
            "format": "date-time"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "eventAccessibilityType": {
            "description": "An event's accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventAddressLine1": {
            "description": "The address line 1 of the event's location",
            "type": "string"
          },
          "eventAddressLine2": {
            "description": "The address line 2 of the event's location",
            "type": "string"
          },
          "eventDate": {
            "description": "The date and time the event takes place in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventDefaultListingTitle": {
            "description": "The event's default listing title.",
            "type": "string"
          },
          "eventEndDate": {
            "description": "The date and time the event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventLocationId": {
            "description": "The ID for the location profile of the event",
            "type": "string"
          },
          "eventLocationName": {
            "description": "The name of the event location profile",
            "type": "string"
          },
          "eventMedia": {
            "description": "The event media in order of display",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "eventName": {
            "description": "The name of the event",
            "type": "string"
          },
          "eventNameShort": {
            "description": "The short name of the event",
            "type": "string"
          },
          "eventPostalCode": {
            "description": "The postal code for the event's location",
            "type": "string"
          },
          "eventRestrictions": {
            "description": "Extra event info list to display",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventTimelineGroups": {
            "description": "The timeline to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupResponse"
            }
          },
          "eventTranslations": {
            "$ref": "#/components/schemas/EventTranslationResponse"
          },
          "eventVideoStreamMedia": {
            "description": "The event video stream media in order of display",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "externalNotificationSubscriptions": {
            "description": "External notification subscription checkboxes shown at checkout",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionResponse"
            }
          },
          "facebookPixelId": {
            "description": "Facebook pixel ID used for tracking",
            "type": "string"
          },
          "gateUrl": {
            "description": "The event's gate url.",
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "geoRegionId": {
            "description": "The ID of the geographic region in which the event takes place",
            "type": "integer",
            "format": "int64"
          },
          "geoRegionName": {
            "description": "The name of the geographic region in which the event takes place",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "liveStreamReplaySeconds": {
            "description": "The amount of time, in seconds, the live stream can be replayed",
            "type": "integer",
            "format": "int32"
          },
          "majorCategories": {
            "description": "A list of major categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "minorCategories": {
            "description": "A list of minor categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinorCategoryResponse"
            }
          },
          "numInTour": {
            "description": "The event number in this tour",
            "type": "integer",
            "format": "int32"
          },
          "onlineHideDate": {
            "description": "The date the event becomes invisible to the users",
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "description": "The date the event become visible to the users",
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "description": "An optional long description of the event",
            "type": "string"
          },
          "optionalShortDescription": {
            "description": "An optional short description of the event",
            "type": "string"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "performerIds": {
            "description": "A list of IDs for the performers that will be performing at the event",
            "type": "array",
            "items": {
              "description": "A list of IDs for the performers that will be performing at the event",
              "type": "string"
            }
          },
          "performerNames": {
            "description": "A list of names for the performers that will be performing at the event",
            "type": "array",
            "items": {
              "description": "A list of names for the performers that will be performing at the event",
              "type": "string"
            }
          },
          "primaryClient": {
            "$ref": "#/components/schemas/ClientProfileResponse"
          },
          "private": {
            "type": "boolean"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatConfigurationId": {
            "description": "The seat configuration ID for the event",
            "type": "integer",
            "format": "int64"
          },
          "seatMap": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "sponsorGroups": {
            "description": "Sponsors associated with the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "state": {
            "description": "The event state",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "description": "The individual ticket limit for this event",
            "type": "integer",
            "format": "int32"
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "tourId": {
            "description": "The id of the event's tour",
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "description": "The event type",
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "EXPERIENCE",
              "GOODS_AND_SERVICES",
              "PARKING",
              "CONFERENCE",
              "MISCELLANEOUS",
              "STREAMING",
              "COLLECTION",
              "SEASON_MEMBERSHIP"
            ]
          },
          "vanityName": {
            "description": "The vanity name of the event",
            "type": "string"
          }
        }
      },
      "EventAllocatedInventoryMarketplaceItemResponse": {
        "type": "object",
        "properties": {
          "marketplaceData": {
            "$ref": "#/components/schemas/GetMarketplaceResponse"
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientOfferGroupDataResponse"
            }
          },
          "profitSharePercentage": {
            "type": "number"
          }
        }
      },
      "EventAnnouncementTranslationRequestItem": {
        "type": "object",
        "properties": {
          "announcement": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "EventCancelRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventCheckInCountResponse": {
        "type": "object",
        "properties": {
          "numCheckedInUsers": {
            "type": "integer",
            "format": "int64"
          },
          "numCheckedInUsersByUsher": {
            "type": "integer",
            "format": "int64"
          },
          "totalTokenCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventCustomFeeRequest": {
        "type": "object",
        "required": [
          "feeName",
          "includedInBase",
          "taxable",
          "value",
          "valueType"
        ],
        "properties": {
          "blacklistedCategoryCodes": {
            "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
            "type": "array",
            "items": {
              "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
              "type": "string"
            }
          },
          "categoryTypes": {
            "description": "Category types this fee should apply to",
            "type": "array",
            "items": {
              "description": "Category types this fee should apply to",
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "feeCode": {
            "description": "The unique fee code for this fee",
            "type": "string"
          },
          "feeName": {
            "description": "The name for this fee",
            "type": "string"
          },
          "includedInBase": {
            "description": "If the fee should be included in the base price or not",
            "type": "boolean"
          },
          "marketplaceRestriction": {
            "description": "Whether this fee applies for transactions in primary or secondary marketplaces.",
            "type": "string",
            "enum": [
              "ONLY_PRIMARY",
              "ONLY_SECONDARY",
              "ONLY_BIDS"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "taxable": {
            "description": "If the fee is taxable or not",
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeTranslation"
            }
          },
          "value": {
            "description": "The value for this fee",
            "type": "number"
          },
          "valueType": {
            "description": "The value type for this fee",
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "PROFIT_PERCENTAGE",
              "STEPPED"
            ]
          }
        }
      },
      "EventDetailResponse": {
        "type": "object",
        "properties": {
          "accessControlConfigurationResponse": {
            "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
          },
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "additionalDescription": {
            "description": "Additional description for the event",
            "type": "string"
          },
          "addressLine1": {
            "description": "The address line 1 of the location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the location",
            "type": "string"
          },
          "analyticsTrackers": {
            "description": "Analytics trackers for this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventAnalyticsTrackerResponse"
            }
          },
          "announcement": {
            "description": "Any announcement for the event",
            "type": "string"
          },
          "assigneeTokenInformation": {
            "description": "Information for the tokens that others have assigned to this user for an event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "auxiliaryMarketplaceInformation": {
            "description": "The list of auxiliary marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "bids": {
            "description": "Information for the bids that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          },
          "boxOfficeConfig": {
            "$ref": "#/components/schemas/GetBoxOfficeConfigResponse"
          },
          "categoryDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "clientIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "countryName": {
            "description": "The country in which the event takes place",
            "type": "string"
          },
          "creatorClientName": {
            "description": "The creator client name of the event",
            "type": "string"
          },
          "currency": {
            "description": "The currency for the recommended price",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deepLinkForStreaming": {
            "description": "The deepLink to my yoop streaming page",
            "type": "string"
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultPurchasePeopleQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "discountCodesAllowed": {
            "type": "boolean"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "eventAccessibilityType": {
            "description": "An event's accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "description": "The date time of this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventRestrictions": {
            "description": "The restrictions to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventTimelineGroups": {
            "description": "The timeline to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupResponse"
            }
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeConfigurationResponse": {
            "$ref": "#/components/schemas/EventFeeConfigurationResponse"
          },
          "forceIdCheck": {
            "type": "boolean"
          },
          "gateUrl": {
            "description": "The gate url for this event",
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of the geographic region in which the event takes place (e.g. state)",
            "type": "string"
          },
          "hasActiveOrFuturePrivateMarketplace": {
            "description": "Represent if event contain at least one active password protected marketplace in open or open in future state",
            "type": "boolean"
          },
          "hasAtLeastOneSalesGroup": {
            "description": "Represent if event contain at least one sales group",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this event",
            "type": "string"
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "latitude": {
            "description": "The latitude of the event location",
            "type": "number"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "liveStreamEndDate": {
            "description": "The date time this event's live stream ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "liveStreamReplaySeconds": {
            "description": "The amount of time, in seconds, the live stream can be replayed",
            "type": "integer",
            "format": "int32"
          },
          "liveStreamStartDate": {
            "description": "The date and time the event live stream takes place in local time. ",
            "type": "string",
            "format": "date-time"
          },
          "locationId": {
            "description": "The name of the event location",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location",
            "type": "string"
          },
          "longitude": {
            "description": "The longitude of the event location",
            "type": "number"
          },
          "marketplaceInformation": {
            "description": "The list of marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "media": {
            "description": "Additional images and video for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "description": "The amount of time, in seconds, purchased items must hold before being able to resale",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "notificationSubscriptions": {
            "description": "The subscription options for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionResponse"
            }
          },
          "numInTour": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "optionalLongDescription": {
            "description": "An optional long description of the event",
            "type": "string"
          },
          "optionalShortDescription": {
            "description": "An optional short description of the event",
            "type": "string"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "A list of performers that will be performing at the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicPerformerResponse"
            }
          },
          "postalCode": {
            "description": "The postal code for the location",
            "type": "string"
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "receiptResponseList": {
            "description": "The receipts associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderReceiptResponse"
            }
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatChart": {
            "$ref": "#/components/schemas/GetSeatChartResponse"
          },
          "seatMap": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatsIOChartEventKey": {
            "type": "string"
          },
          "shippingGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventGeoRestrictionResponse"
            }
          },
          "shortName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "sponsorGroups": {
            "description": "The sponsor groups for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "state": {
            "description": "The state of this event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "tokenInformation": {
            "description": "Information for the tokens that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "tourResponse": {
            "$ref": "#/components/schemas/TourResponse"
          },
          "transactionPeriodMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "userEventKey": {
            "description": "The event key the user has",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "The user uuid prefix for the event",
            "type": "string"
          },
          "usherUUID": {
            "description": "The usher uuid for the event",
            "type": "string"
          },
          "vanityName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "videoStreamMedias": {
            "description": "Video stream medias for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          }
        }
      },
      "EventEscalationItemListSizeResponse": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string"
          }
        }
      },
      "EventEscalationItemResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastClientUserActivityDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastClientUserActivityReason": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "lastName": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "EventFeeConfigurationResponse": {
        "type": "object",
        "properties": {
          "eventTaxable": {
            "type": "boolean"
          },
          "eventTaxesIncludedInBase": {
            "type": "boolean"
          },
          "feeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetFeeResponse"
            }
          },
          "isFeeModifiable": {
            "type": "boolean"
          },
          "isTaxModifiable": {
            "type": "boolean"
          },
          "resaleProfitFeePercentage": {
            "type": "number"
          }
        }
      },
      "EventFilter": {
        "type": "object",
        "properties": {
          "eventAccessibilityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIVE_ATTENDANCE",
                "HYBRID",
                "STREAMING",
                "STREAMING_BASIC"
              ]
            }
          },
          "eventIdFilter": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "eventTagFilter": {
            "$ref": "#/components/schemas/EventTagFilter"
          },
          "includeUpcomingEvents": {
            "type": "boolean",
            "writeOnly": true
          },
          "locationFilter": {
            "$ref": "#/components/schemas/LocationFilter"
          }
        }
      },
      "EventGeoRestrictionResponse": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventHookRequestStructure": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EventInventoryDataResponse": {
        "type": "object",
        "properties": {
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryResponse"
            }
          },
          "seatMap": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "sectionListResponse": {
            "$ref": "#/components/schemas/AvailableSectionListResponseV2"
          }
        }
      },
      "EventInventoryPackageRequest": {
        "type": "object",
        "required": [
          "childEventIds",
          "inventoryCategoryName",
          "numTokens",
          "parentEventId"
        ],
        "properties": {
          "childEventIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "inventoryCategoryName": {
            "type": "string"
          },
          "numTokens": {
            "type": "integer",
            "format": "int32"
          },
          "parentEventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventListResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventListResponseItem"
            }
          }
        }
      },
      "EventListResponseItem": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "activeMarketplaceEndDateTime": {
            "description": "Date that indicates the end time of the current draw",
            "type": "string",
            "format": "date-time"
          },
          "activeMarketplaceType": {
            "description": "Date that indicates the end time of the current live market",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "announcement": {
            "description": "Any announcement string for the event",
            "type": "string"
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "currency": {
            "description": "The currency used for this event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "earliestMarketplaceStartDateTime": {
            "description": "Date that indicates the earliest marketplace start date for this event",
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "description": "Event accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventActiveMarketplaceDetails": {
            "$ref": "#/components/schemas/EventActiveMarketplaceDetailsQo"
          },
          "eventDate": {
            "description": "The date and time the event takes place in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "string"
          },
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryResponse"
            }
          },
          "language": {
            "description": "The primary language of the event",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location profile",
            "type": "string"
          },
          "majorCategories": {
            "description": "List of major categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "media": {
            "description": "The list of media for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minQualifyingPrice": {
            "description": "The minimum offer price to buy one token. For Lotteries the price is constant and for Auctions it may change once the demand is higher than the inventory",
            "type": "number"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "offerGroupCountInActiveMarketplace": {
            "description": "The number of offer groups in the active marketplace",
            "type": "integer",
            "format": "int32"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "The performer names and ids ONLY",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerProfileResponse"
            }
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "shortName": {
            "description": "The short name of the event",
            "type": "string"
          },
          "soldOut": {
            "type": "boolean"
          },
          "state": {
            "description": "The state of the event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "UUID used by the Usher to scan for Users. Only returned to Ushers",
            "type": "string"
          },
          "usherUUID": {
            "description": "UUID to be used by the Usher App. Only returned to Ushers",
            "type": "string"
          },
          "vanityName": {
            "description": "The vanity name of the event",
            "type": "string"
          }
        }
      },
      "EventLiveStreamInfoResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventStreamSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamSegment"
            }
          },
          "inventoryCategoryEventStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryEventStreamAccess"
            }
          },
          "liveStreamEnd": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStart": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventMarketplaceAllocatedInventoryResponseList": {
        "type": "object",
        "properties": {
          "availableSectionListResponse": {
            "$ref": "#/components/schemas/AvailableSectionListResponseV2"
          },
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryResponse"
            }
          },
          "marketplaceDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventAllocatedInventoryMarketplaceItemResponse"
            }
          }
        }
      },
      "EventMarketplaceResponse": {
        "type": "object",
        "properties": {
          "activeMarketplace": {
            "description": "The list of active marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          }
        }
      },
      "EventPostponeRequest": {
        "type": "object",
        "properties": {
          "announcement": {
            "type": "string"
          },
          "announcementTranslations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventAnnouncementTranslationRequestItem"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventPreconfiguredFeeOverrideRequest": {
        "type": "object",
        "properties": {
          "blacklistedCategoryCodes": {
            "description": "Category codes that this fee shouldn't apply to.",
            "type": "array",
            "items": {
              "description": "Category codes that this fee shouldn't apply to.",
              "type": "string"
            }
          },
          "feeCode": {
            "type": "string"
          },
          "includedInBasePrice": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "EventProfileCreateRequest": {
        "type": "object",
        "required": [
          "clientId",
          "currency",
          "doorsCloseDate",
          "doorsOpenDate",
          "eventAccessibilityType",
          "eventDate",
          "eventEndDate",
          "eventLocationId",
          "eventName",
          "eventNameShort",
          "eventType",
          "majorCategoryIds",
          "onlineHideDate",
          "onlineVisibleDate",
          "seatConfigurationId",
          "vanityName"
        ],
        "properties": {
          "additionalEventDescription": {
            "type": "string"
          },
          "additionalRules": {
            "type": "string"
          },
          "avatarMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryPriceConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryPriceConfigurationRequest"
            }
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "creatorClientName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "doorsCloseDate": {
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "emailMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventGeoRestrictionRequest"
            }
          },
          "eventLocationId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "eventPackageType": {
            "type": "string",
            "enum": [
              "PARENT"
            ]
          },
          "eventRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailRequest"
            }
          },
          "eventSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailRequest"
            }
          },
          "eventTimelineGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupRequest"
            }
          },
          "eventType": {
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "EXPERIENCE",
              "GOODS_AND_SERVICES",
              "PARKING",
              "CONFERENCE",
              "MISCELLANEOUS",
              "STREAMING",
              "COLLECTION",
              "SEASON_MEMBERSHIP"
            ]
          },
          "externalNotificationSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionRequest"
            }
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFeeRequest"
            }
          },
          "gateUrl": {
            "type": "string"
          },
          "googleAnalyticsId": {
            "type": "string"
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "liveConferenceGreeterMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "liveStreamReplaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "majorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "mediaCreationRequest": {
            "$ref": "#/components/schemas/CreateEventMediaRequest"
          },
          "mediaIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "numInTour": {
            "type": "integer",
            "format": "int32"
          },
          "onlineHideDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "type": "string"
          },
          "optionalShortDescription": {
            "type": "string"
          },
          "paymentVerificationThreshold": {
            "type": "integer",
            "format": "int64"
          },
          "payoutDelaySeconds": {
            "type": "integer",
            "format": "int64"
          },
          "performerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "private": {
            "type": "boolean"
          },
          "scheduleMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "seatConfigurationId": {
            "type": "integer",
            "format": "int64"
          },
          "seatMapMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSponsorGroupRequest"
            }
          },
          "taxRate": {
            "type": "number"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentEnabled": {
            "type": "boolean"
          },
          "tokenAssignmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenTypePriceConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenTypePriceConfiguration"
            }
          },
          "tourId": {
            "type": "integer",
            "format": "int64"
          },
          "vanityName": {
            "type": "string"
          }
        }
      },
      "EventProfileUpdateRequest": {
        "type": "object",
        "properties": {
          "additionalEventDescription": {
            "type": "string"
          },
          "additionalRules": {
            "type": "string"
          },
          "avatarMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryPriceConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryPriceConfigurationRequest"
            }
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "creatorClientName": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "doorsCloseDate": {
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "emailMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventGeoRestrictionRequest"
            }
          },
          "eventLocationId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "eventPackageType": {
            "type": "string",
            "enum": [
              "PARENT"
            ]
          },
          "eventRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailRequest"
            }
          },
          "eventSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailRequest"
            }
          },
          "eventTimelineGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupRequest"
            }
          },
          "eventType": {
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "EXPERIENCE",
              "GOODS_AND_SERVICES",
              "PARKING",
              "CONFERENCE",
              "MISCELLANEOUS",
              "STREAMING",
              "COLLECTION",
              "SEASON_MEMBERSHIP"
            ]
          },
          "externalNotificationSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionRequest"
            }
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFeeRequest"
            }
          },
          "gateUrl": {
            "type": "string"
          },
          "googleAnalyticsId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "liveConferenceGreeterMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "liveStreamReplaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "majorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "mediaCreationRequest": {
            "$ref": "#/components/schemas/CreateEventMediaRequest"
          },
          "mediaIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minorCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "numInTour": {
            "type": "integer",
            "format": "int32"
          },
          "onlineHideDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "type": "string"
          },
          "optionalShortDescription": {
            "type": "string"
          },
          "paymentVerificationThreshold": {
            "type": "integer",
            "format": "int64"
          },
          "payoutDelaySeconds": {
            "type": "integer",
            "format": "int64"
          },
          "performerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "private": {
            "type": "boolean"
          },
          "scheduleMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "seatConfigurationId": {
            "type": "integer",
            "format": "int64"
          },
          "seatMapMediaId": {
            "type": "integer",
            "format": "int64"
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSponsorGroupRequest"
            }
          },
          "taxRate": {
            "type": "number"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentEnabled": {
            "type": "boolean"
          },
          "tokenAssignmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenTypePriceConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenTypePriceConfiguration"
            }
          },
          "tourId": {
            "type": "integer",
            "format": "int64"
          },
          "vanityName": {
            "type": "string"
          }
        }
      },
      "EventRescheduleRequest": {
        "type": "object",
        "properties": {
          "announcement": {
            "type": "string"
          },
          "announcementTranslations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventAnnouncementTranslationRequestItem"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "newDate": {
            "type": "string",
            "format": "date-time"
          },
          "refundDeadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventRestrictionTranslationResponse": {
        "type": "object",
        "properties": {
          "eventRestrictionTranslationResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventRestrictionTranslationResponseItem"
            }
          },
          "restrictionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventRestrictionTranslationResponseItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EventSearchResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSearchResponseItem"
            }
          }
        }
      },
      "EventSearchResponseItem": {
        "type": "object",
        "properties": {
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          }
        }
      },
      "EventSecondaryListings": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "activeMarketplaceEndDateTime": {
            "description": "Date that indicates the end time of the current draw",
            "type": "string",
            "format": "date-time"
          },
          "activeMarketplaceType": {
            "description": "Date that indicates the end time of the current live market",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "announcement": {
            "description": "Any announcement string for the event",
            "type": "string"
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "currency": {
            "description": "The currency used for this event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "earliestMarketplaceStartDateTime": {
            "description": "Date that indicates the earliest marketplace start date for this event",
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "description": "Event accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventActiveMarketplaceDetails": {
            "$ref": "#/components/schemas/EventActiveMarketplaceDetailsQo"
          },
          "eventDate": {
            "description": "The date and time the event takes place in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventSortDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "string"
          },
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryResponse"
            }
          },
          "language": {
            "description": "The primary language of the event",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location profile",
            "type": "string"
          },
          "majorCategories": {
            "description": "List of major categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "marketplaceInformation": {
            "description": "The list of marketplaces with resale offer groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResaleMarketplace"
            }
          },
          "media": {
            "description": "The list of media for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minQualifyingPrice": {
            "description": "The minimum offer price to buy one token. For Lotteries the price is constant and for Auctions it may change once the demand is higher than the inventory",
            "type": "number"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "offerGroupCountInActiveMarketplace": {
            "description": "The number of offer groups in the active marketplace",
            "type": "integer",
            "format": "int32"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "The performer names and ids ONLY",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerProfileResponse"
            }
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "shortName": {
            "description": "The short name of the event",
            "type": "string"
          },
          "soldOut": {
            "type": "boolean"
          },
          "state": {
            "description": "The state of the event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "UUID used by the Usher to scan for Users. Only returned to Ushers",
            "type": "string"
          },
          "usherUUID": {
            "description": "UUID to be used by the Usher App. Only returned to Ushers",
            "type": "string"
          },
          "vanityName": {
            "description": "The vanity name of the event",
            "type": "string"
          }
        }
      },
      "EventSponsorGroupRequest": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "sponsorIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "EventStreamCategoryResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryName": {
            "type": "string"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "maxSegment": {
            "type": "integer",
            "format": "int32"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "mediaLive": {
            "$ref": "#/components/schemas/MediaLiveInfoResponse"
          },
          "mediaPackage": {
            "$ref": "#/components/schemas/MediaPackageInfoResponse"
          },
          "minSegment": {
            "type": "integer",
            "format": "int32"
          },
          "previewUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EventStreamEventInfoResponse": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "replaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "vanityName": {
            "type": "string"
          }
        }
      },
      "EventStreamInfoResponse": {
        "type": "object",
        "properties": {
          "categoryStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventStreamCategoryResponse"
            }
          },
          "cloudfront": {
            "$ref": "#/components/schemas/CloudFrontInfoResponse"
          },
          "cloudfronts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudFrontInfoResponse"
            }
          },
          "event": {
            "$ref": "#/components/schemas/EventStreamEventInfoResponse"
          },
          "jobs": {
            "$ref": "#/components/schemas/EventStreamJobsInfoResponse"
          },
          "route53": {
            "$ref": "#/components/schemas/Route53InfoResponse"
          },
          "route53s": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route53InfoResponse"
            }
          },
          "streamSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreamSegment"
            }
          },
          "venueStream": {
            "$ref": "#/components/schemas/VenueStreamInfraInfoResponse"
          }
        }
      },
      "EventStreamJobsInfoResponse": {
        "type": "object",
        "properties": {
          "channelStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "channelStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "infraCreationDate": {
            "type": "string",
            "format": "date-time"
          },
          "infraDeletionDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventSubDetailRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "primaryTagType": {
            "type": "string",
            "enum": [
              "CLIENT",
              "LOCATION_PROFILE",
              "PERFORMER_PROFILE"
            ]
          },
          "secondaryDescription": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "COVID",
              "BAGS",
              "SOCIAL",
              "MERCHANDISE",
              "RECEIPT_EMAIL"
            ]
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EventSubDetailResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "eventRestrictionType": {
            "type": "string"
          },
          "icon": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EventSubDetailTranslationRequest": {
        "type": "object",
        "properties": {
          "eventSubDetailTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubDetailTranslation"
            }
          },
          "subDetailId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EventTagFilter": {
        "type": "object",
        "properties": {
          "clientIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "generateCategoryPageUrl": {
            "type": "boolean",
            "writeOnly": true
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "performerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "primaryTagType": {
            "type": "string",
            "enum": [
              "CLIENT",
              "LOCATION_PROFILE",
              "PERFORMER_PROFILE"
            ]
          }
        }
      },
      "EventTagInfoResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventListResponseItem"
            }
          },
          "tagInfo": {
            "$ref": "#/components/schemas/TagInfoResponse"
          }
        }
      },
      "EventTimelineGroupRequest": {
        "type": "object",
        "properties": {
          "eventTimelineRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineRequest"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineGroupResponse": {
        "description": "The timeline to display for the event",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineResponse"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineGroupTranslation": {
        "type": "object",
        "required": [
          "locale",
          "title"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineGroupTranslationRequest": {
        "type": "object",
        "properties": {
          "eventTimelineTranslationGroupRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslation"
            }
          },
          "groupId": {
            "type": "integer",
            "format": "int64"
          },
          "timelineTranslationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslationRequest"
            }
          }
        }
      },
      "EventTimelineGroupTranslationResponse": {
        "type": "object",
        "properties": {
          "eventTimelineTranslationGroupResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslationGroupResponseItem"
            }
          },
          "groupId": {
            "type": "integer",
            "format": "int64"
          },
          "timelineTranslationResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslationResponse"
            }
          }
        }
      },
      "EventTimelineRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineTranslation": {
        "type": "object",
        "required": [
          "description",
          "locale",
          "title"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineTranslationGroupResponseItem": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineTranslationRequest": {
        "type": "object",
        "properties": {
          "eventTimelineTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslationRequestItem"
            }
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventTimelineTranslationRequestItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTimelineTranslationResponse": {
        "type": "object",
        "properties": {
          "eventTimelineTranslationResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslationResponseItem"
            }
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventTimelineTranslationResponseItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "EventTranslation": {
        "type": "object",
        "required": [
          "creatorClientName",
          "eventName",
          "eventNameShort",
          "locale"
        ],
        "properties": {
          "additionalEventDescription": {
            "type": "string"
          },
          "additionalRules": {
            "type": "string"
          },
          "creatorClientName": {
            "type": "string"
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "gateUrl": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "optionalLongDescription": {
            "type": "string"
          },
          "optionalShortDescription": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "EventTranslationRequest": {
        "type": "object",
        "required": [
          "eventId",
          "eventTranslationRequestItems"
        ],
        "properties": {
          "eventId": {
            "type": "string"
          },
          "eventSubDetailTranslationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailTranslationRequest"
            }
          },
          "eventTimelineGroupTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslationRequest"
            }
          },
          "eventTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTranslation"
            }
          }
        }
      },
      "EventTranslationResponse": {
        "description": "Translations associated with the event",
        "type": "object",
        "required": [
          "eventId",
          "eventTranslationResponseItems"
        ],
        "properties": {
          "eventId": {
            "type": "string"
          },
          "eventNotificationSubscriptionTranslationResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslationResponse"
            }
          },
          "eventRestrictionTranslationResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventRestrictionTranslationResponse"
            }
          },
          "eventTimelineGroupTranslationResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslationResponse"
            }
          },
          "eventTranslationResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTranslation"
            }
          }
        }
      },
      "ExchangeDetailThymeLeaf": {
        "type": "object",
        "properties": {
          "dynamicPricingEnabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeInventoryCategoryDetailRequest": {
        "type": "object",
        "properties": {
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ExchangeInventoryCategoryMarketplaceDataRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "marketplaceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "marketplaceWithCodeRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ExchangeNotificationCommonData": {
        "type": "object",
        "required": [
          "bidId"
        ],
        "properties": {
          "bidId": {
            "type": "integer",
            "format": "int64"
          },
          "isPaymentFailedContext": {
            "type": "boolean"
          }
        }
      },
      "ExternalNotificationSubscriptionRequest": {
        "type": "object",
        "properties": {
          "displayString": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "ExternalNotificationSubscriptionResponse": {
        "description": "External notification subscription checkboxes shown at checkout",
        "type": "object",
        "properties": {
          "displayString": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ExternalNotificationSubscriptionTranslation": {
        "type": "object",
        "required": [
          "displayString",
          "locale"
        ],
        "properties": {
          "displayString": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "ExternalNotificationSubscriptionTranslationResponse": {
        "type": "object",
        "properties": {
          "externalNotificationSubscriptionId": {
            "type": "integer",
            "format": "int64"
          },
          "externalNotificationSubscriptionTranslationResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "ExternalPaymentCreditCardDetails": {
        "type": "object",
        "properties": {
          "cardHolderName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "lastDigits": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "ExternalProcessedPaymentTransaction": {
        "type": "object",
        "properties": {
          "creditCardDetails": {
            "$ref": "#/components/schemas/ExternalPaymentCreditCardDetails"
          },
          "merchantRefAddition": {
            "type": "string"
          },
          "providerType": {
            "type": "string",
            "enum": [
              "STRIPE_KLARNA",
              "CITCON_WECHATPAY",
              "CITON_ALIPAY",
              "SQUARE",
              "CASH",
              "FREE"
            ]
          },
          "success": {
            "type": "boolean"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "ExternalPurchaseQrCodeDataResponse": {
        "type": "object",
        "required": [
          "inventoryCategoryCode",
          "inventoryItemId",
          "qrCode"
        ],
        "properties": {
          "inventoryCategoryCode": {
            "type": "string"
          },
          "inventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "qrCode": {
            "type": "string"
          },
          "rowName": {
            "type": "string"
          },
          "seatCode": {
            "type": "string"
          },
          "seatName": {
            "type": "string"
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "FailedFillsData": {
        "type": "object",
        "properties": {
          "offerUnavailable": {
            "description": "The number of failures due to the offer being unavailable",
            "type": "integer",
            "format": "int32"
          },
          "paymentFailure": {
            "description": "The number of failures due to the payment failure",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "The total number of failures (expectedQuantityTransacted - actualQuantityTransacted)",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FeeBreakdownThymeleaf": {
        "type": "object",
        "properties": {
          "breakdownParentType": {
            "type": "string"
          },
          "feeValueType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "totalAmount": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FeeTranslation": {
        "type": "object",
        "required": [
          "locale",
          "name"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nameLong": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "FeeValueConfiguration": {
        "description": "The value configuration to use for STEPPED fee type",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeValueConfigurationItem"
            }
          }
        }
      },
      "FeeValueConfigurationItem": {
        "type": "object",
        "properties": {
          "feeValue": {
            "type": "number"
          },
          "feeValueType": {
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "PROFIT_PERCENTAGE",
              "STEPPED"
            ]
          },
          "maxTransactionAmount": {
            "type": "number"
          }
        }
      },
      "FingerprintLimitUpdateRequest": {
        "type": "object",
        "required": [
          "fingerprint"
        ],
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FirestoreDocInfoResponse": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "requiredFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "FixedModeScheduleActionStartSettings": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string"
          }
        }
      },
      "FollowModeScheduleActionStartSettings": {
        "type": "object",
        "properties": {
          "followPoint": {
            "type": "string"
          },
          "referenceActionName": {
            "type": "string"
          }
        }
      },
      "FooterInfoThymeLeaf": {
        "type": "object",
        "properties": {
          "footerAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GAInventoryCount": {
        "description": "Only supported for GA type inventory. Cannot be used together with inventoryReferences.",
        "type": "object",
        "required": [
          "inventoryCategoryCode",
          "sectionCounts"
        ],
        "properties": {
          "inventoryCategoryCode": {
            "type": "string"
          },
          "sectionCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GASectionInventoryCount"
            }
          }
        }
      },
      "GASectionInventoryCount": {
        "type": "object",
        "required": [
          "sectionCode"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "seasonMembershipParentInventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GatewayRefundFullTransactionRequest": {
        "type": "object",
        "properties": {
          "transactionToken": {
            "type": "string"
          }
        }
      },
      "GeoDataResponse": {
        "type": "object",
        "properties": {
          "cityId": {
            "type": "string"
          },
          "cityName": {
            "type": "string"
          },
          "countryId": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "geoRegionId": {
            "type": "string"
          },
          "geoRegionName": {
            "type": "string"
          }
        }
      },
      "GeoRegion": {
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "geoRegionName": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoRegionMl"
            }
          }
        }
      },
      "GeoRegionMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "geoRegion": {
            "$ref": "#/components/schemas/GeoRegion"
          },
          "geoRegionName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "GeoRegionResponse": {
        "type": "object",
        "properties": {
          "geoRegionAbbreviation": {
            "description": "The abbreviation of this geo region",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of this geo region",
            "type": "string"
          },
          "id": {
            "description": "The unique id of this geo region",
            "type": "string"
          },
          "translations": {
            "$ref": "#/components/schemas/GeoRegionMl"
          }
        }
      },
      "GeoRegionTranslation": {
        "description": "Translations for the Geo Region.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "GetAttendeeListResponse": {
        "type": "object",
        "properties": {
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          },
          "nextPageKey": {
            "description": "The key to use for requesting the next page. Will be null if there isno more pages.",
            "type": "string"
          }
        }
      },
      "GetAttendeeListSummary": {
        "type": "object",
        "properties": {
          "categoryCheckIns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlCategorySummary"
            }
          },
          "numAttendeesCheckedIn": {
            "type": "integer",
            "format": "int32"
          },
          "numCheckIns": {
            "type": "integer",
            "format": "int32"
          },
          "numInventoryWithMultipleCheckIns": {
            "type": "integer",
            "format": "int32"
          },
          "percentAttendeesCheckedIn": {
            "type": "number",
            "format": "double"
          },
          "percentCheckedIn": {
            "type": "number",
            "format": "double"
          },
          "totalAttendees": {
            "type": "integer",
            "format": "int32"
          },
          "totalCheckInsPossible": {
            "type": "integer",
            "format": "int32"
          },
          "totalSoldInventory": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetBidCheckoutRequest": {
        "type": "object",
        "required": [
          "matchCriteria",
          "price",
          "quantity"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expirationOptionCode": {
            "type": "string"
          },
          "expirationType": {
            "type": "string",
            "enum": [
              "BEFORE_EVENT_2H",
              "BEFORE_EVENT_24H",
              "BEFORE_EVENT_48H",
              "BEFORE_EVENT_72H"
            ]
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "matchCriteria": {
            "$ref": "#/components/schemas/BidMatchCriteria"
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "GetBidCheckoutResponse": {
        "type": "object",
        "properties": {
          "checkoutTermsAndConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsAndConditions"
            }
          },
          "message": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "GetBidExpirationOptionsResponse": {
        "description": "Used for showing the list of bid expiration options",
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "companionText": {
            "type": "string"
          },
          "expirationSeconds": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetBidResponse": {
        "type": "object",
        "properties": {
          "allowPartialFills": {
            "type": "boolean"
          },
          "cancelTime": {
            "type": "string",
            "format": "date-time"
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "expirationType": {
            "type": "string",
            "enum": [
              "BEFORE_EVENT_2H",
              "BEFORE_EVENT_24H",
              "BEFORE_EVENT_48H",
              "BEFORE_EVENT_72H"
            ]
          },
          "expireOptionCode": {
            "type": "string"
          },
          "expireTime": {
            "type": "string",
            "format": "date-time"
          },
          "fillType": {
            "type": "string",
            "enum": [
              "PRIMARY",
              "SECONDARY"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryName": {
            "type": "string"
          },
          "offerId": {
            "description": "The offer id associated with the bid after the bid has been successfully filled.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "FAILED",
              "CANCELLED",
              "FILLED",
              "EXPIRED"
            ]
          },
          "statusTime": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetBidStatsResponse": {
        "type": "object",
        "properties": {
          "bidQuantityToHighestOpenBidSecondaryMarketPrice": {
            "description": "Used before Sellers enter resale checkout. Shown as the 'Sell Now' price.",
            "type": "object",
            "additionalProperties": {
              "description": "Used before Sellers enter resale checkout. Shown as the 'Sell Now' price.",
              "type": "number"
            }
          },
          "medianOpenBidPrice": {
            "description": "Used before Buyers enter bid checkout.",
            "type": "number"
          }
        }
      },
      "GetBoxOfficeConfigResponse": {
        "type": "object",
        "required": [
          "boxOfficeEnabled",
          "completedUserProfileRequired",
          "eventId",
          "numMevDevices",
          "numPaymentDevices",
          "numPrinters",
          "qrCodePrintable"
        ],
        "properties": {
          "allowAccessControlCheckInAtBoxOffice": {
            "type": "boolean"
          },
          "boxOfficeAccessCode": {
            "type": "string"
          },
          "boxOfficeEnabled": {
            "type": "boolean"
          },
          "completedUserProfileRequired": {
            "type": "boolean"
          },
          "defaultBuyerEmail": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "numMevDevices": {
            "type": "integer",
            "format": "int32"
          },
          "numPaymentDevices": {
            "type": "integer",
            "format": "int32"
          },
          "numPrinters": {
            "type": "integer",
            "format": "int32"
          },
          "qrCodePrintable": {
            "type": "boolean"
          }
        }
      },
      "GetBoxOfficeEventListResponse": {
        "type": "object",
        "properties": {
          "boxOfficeEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBoxOfficeEventResponse"
            }
          }
        }
      },
      "GetBoxOfficeEventResponse": {
        "type": "object",
        "required": [
          "cityName",
          "defaultMediaUrl",
          "eventDate",
          "eventId",
          "eventName",
          "geoRegionAbbreviation",
          "locationName",
          "marketplaceData",
          "timeZoneOffset"
        ],
        "properties": {
          "cityName": {
            "type": "string"
          },
          "defaultMediaUrl": {
            "type": "string"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "marketplaceData": {
            "$ref": "#/components/schemas/GetBoxOfficeMarketplaceResponse"
          },
          "timeZoneOffset": {
            "type": "string"
          }
        }
      },
      "GetBoxOfficeMarketplaceResponse": {
        "type": "object",
        "required": [
          "marketplaceInventoryAmountType",
          "soldTokenCount",
          "unsoldTokenCount"
        ],
        "properties": {
          "marketplaceInventoryAmountType": {
            "type": "string",
            "enum": [
              "ALMOST_SOLD_OUT",
              "SOLD_OUT",
              "DEFAULT"
            ]
          },
          "soldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "unsoldTokenCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetBoxOfficePaymentDeviceResponse": {
        "type": "object",
        "required": [
          "currency",
          "deviceCode",
          "deviceName",
          "deviceType",
          "paired",
          "pairingId"
        ],
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deviceCode": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string",
            "enum": [
              "SQUARE_PAYMENT_TERMINAL"
            ]
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time"
          },
          "paired": {
            "type": "boolean"
          },
          "pairingId": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "GetBoxOfficePrinterResponse": {
        "type": "object",
        "required": [
          "id",
          "ipAddress",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ipAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GetBulkPrimaryFillPreviewResponse": {
        "type": "object",
        "properties": {
          "averageBidPrice": {
            "type": "number"
          },
          "basePriceRangeEnd": {
            "type": "number"
          },
          "basePriceRangeStart": {
            "type": "number"
          },
          "bidExpirationGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidExpirationGroup"
            }
          },
          "highestBidPrice": {
            "type": "number"
          },
          "inventoryCategory": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "lowestBidPrice": {
            "type": "number"
          },
          "maximumPriceForCategory": {
            "type": "number"
          },
          "medianBidPrice": {
            "type": "number"
          },
          "minimumPriceForCategory": {
            "type": "number"
          },
          "numUnsoldCategoryInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuantityRequested": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetBulkPrimaryFillResultResponse": {
        "type": "object",
        "properties": {
          "actualQuantityTransacted": {
            "type": "integer",
            "format": "int32"
          },
          "actualTotalSales": {
            "type": "number"
          },
          "bulkPrimaryFillCancelTime": {
            "type": "string",
            "format": "date-time"
          },
          "bulkPrimaryFillDate": {
            "type": "string",
            "format": "date-time"
          },
          "bulkPrimaryFillId": {
            "type": "integer",
            "format": "int64"
          },
          "bulkPrimaryFillStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "CALCULATING_FILLS",
              "RUNNING_FILLS",
              "CANCELLING",
              "FINISHED"
            ]
          },
          "bulkPrimaryFillStatusTime": {
            "type": "string",
            "format": "date-time"
          },
          "expectedQuantityTransacted": {
            "type": "integer",
            "format": "int32"
          },
          "expectedTotalSales": {
            "type": "number"
          },
          "failedFillsData": {
            "$ref": "#/components/schemas/FailedFillsData"
          },
          "inventoryCategory": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "maxQuantityToAccept": {
            "type": "integer",
            "format": "int32"
          },
          "minPriceToAccept": {
            "type": "number"
          },
          "progressPercent": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetBulkPrimaryFillSimResponse": {
        "type": "object",
        "properties": {
          "averageBidPrice": {
            "type": "number"
          },
          "basePriceRangeEnd": {
            "type": "number"
          },
          "basePriceRangeStart": {
            "type": "number"
          },
          "bidExpirationGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidExpirationGroup"
            }
          },
          "highestBidPrice": {
            "type": "number"
          },
          "inventoryCategory": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "lowestBidPrice": {
            "type": "number"
          },
          "maximumPriceForCategory": {
            "type": "number"
          },
          "medianBidPrice": {
            "type": "number"
          },
          "minimumPriceForCategory": {
            "type": "number"
          },
          "numUnsoldCategoryInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuantityRequested": {
            "type": "integer",
            "format": "int32"
          },
          "totalQuantityToAccept": {
            "type": "integer",
            "format": "int32"
          },
          "totalSales": {
            "type": "number"
          }
        }
      },
      "GetCategoryOfferGroupResponse": {
        "type": "object",
        "properties": {
          "allocatedOfferGroupInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "availableOfferGroupInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "totalOfferGroupInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "unallocatedOfferGroupInventoryCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetCityResponse": {
        "type": "object",
        "properties": {
          "geoRegionId": {
            "description": "The ID of the Geo Region this City belongs to.",
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "description": "The ID of this City.",
            "type": "integer",
            "format": "int64"
          },
          "latitude": {
            "description": "The latitude of this City.",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude of this City.",
            "type": "number"
          },
          "name": {
            "description": "The name of the City.",
            "type": "string"
          },
          "translations": {
            "description": "Translations for the City.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CityTranslation"
            }
          },
          "unLoCode": {
            "description": "The UN/LOCODE of this City.",
            "type": "string"
          }
        }
      },
      "GetClientAddressResponse": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "GetClientCustomerOrderDetailItemResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "inventoryChangeRelatedDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientCustomerOrderDetailItemResponse"
            }
          },
          "lastName": {
            "type": "string"
          },
          "potentialRefundTokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "purchaseReceipt": {
            "$ref": "#/components/schemas/CustomerOrderReceiptResponse"
          },
          "refundReceipts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderReceiptRefundResponse"
            }
          },
          "refundTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "soldInventoryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResaleInventoryItem"
            }
          }
        }
      },
      "GetClientCustomerOrderListItemResponse": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Currency to display (follows event).",
            "type": "string"
          },
          "nextPageKey": {
            "description": "The key to use for requesting the next page. Will be null if there isno more pages.",
            "type": "string"
          },
          "orders": {
            "description": "The list of customer orders.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientCustomerOrderListItemResponse"
            }
          }
        }
      },
      "GetClientFeeBuyerPriceFromEventRequest": {
        "type": "object",
        "required": [
          "basePrice",
          "eventId",
          "inventoryCategoryId"
        ],
        "properties": {
          "basePrice": {
            "type": "number"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "GetClientFeeBuyerPriceFromFeesRequest": {
        "type": "object",
        "required": [
          "basePrice",
          "clientId",
          "draftEventId",
          "inventoryCategory"
        ],
        "properties": {
          "basePrice": {
            "type": "number"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "customFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventCustomFeeRequest"
            }
          },
          "draftEventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategory": {
            "$ref": "#/components/schemas/BuyerPriceRequestInventoryCategoryDataWrapper"
          },
          "preconfiguredFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventPreconfiguredFeeOverrideRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "GetClientFeeBuyerPriceResponse": {
        "type": "object",
        "properties": {
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "GetClientOfferGroupDataResponse": {
        "type": "object",
        "properties": {
          "absurdPrice": {
            "description": "The absurd price",
            "type": "number"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "automaticDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetOfferGroupAutomaticDiscountResponse"
            }
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/GetOfferGroupResponse"
          },
          "choiceDiscounts": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          },
          "description": {
            "description": "The description for the offer group",
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "description": "Previous historical average, used in live markets",
            "type": "number"
          },
          "id": {
            "description": "The id of this offer group",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryCode": {
            "type": "string"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceId": {
            "description": "The id of the marketplace this offer group belongs to",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupOnlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "description": "The reserve price for the offer group",
            "type": "number"
          },
          "salesGroup": {
            "$ref": "#/components/schemas/GetSalesGroupResponse"
          },
          "seatConfigurationType": {
            "description": "Whether or not this offer group is GENERAL_ADMISSION or SEATED",
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedOfferIncrements": {
            "description": "The suggested offer increments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSuggestedOfferIncrementResponse"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTranslation"
            }
          },
          "visibleEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetClientPreconfiguredBoxOfficeResponse": {
        "type": "object",
        "required": [
          "boxOfficeEnabled"
        ],
        "properties": {
          "boxOfficeEnabled": {
            "type": "boolean"
          },
          "completedUserProfileRequired": {
            "type": "boolean"
          },
          "mevRequired": {
            "type": "boolean"
          }
        }
      },
      "GetClientProfileResponse": {
        "type": "object",
        "properties": {
          "avatarMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "clientAddress": {
            "$ref": "#/components/schemas/GetClientAddressResponse"
          },
          "clientUIConfig": {
            "$ref": "#/components/schemas/ClientUIConfig"
          },
          "contactEmailAddress": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "dataExportsEnabled": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          }
        }
      },
      "GetClientPromoCodeDataRequest": {
        "type": "object",
        "required": [
          "filterOption"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "filterOption": {
            "type": "string",
            "enum": [
              "NONE",
              "ACTIVE",
              "EXPIRED_OR_CONSUMED",
              "FUTURE"
            ]
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "searchQuery": {
            "type": "string"
          }
        }
      },
      "GetClientRefundFeeResponse": {
        "type": "object",
        "properties": {
          "chargebackFeeAmount": {
            "description": "The chargeback fee charged per charge back transaction",
            "type": "number"
          },
          "eventId": {
            "description": "The event id this client refund fee applies to",
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "description": "The unique identifier of this client refund fee",
            "type": "integer",
            "format": "int64"
          },
          "refundFeePercentage": {
            "description": "The refund percentage fee charged per refund transaction",
            "type": "number"
          }
        }
      },
      "GetClientRoleInfoResponse": {
        "description": "The roles this person can invite to organization if the option is available to them.",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          }
        }
      },
      "GetClientUserClientConfigInfoListItemResponse": {
        "type": "object",
        "required": [
          "assignableRoleInfos",
          "clientUserRoleInfo"
        ],
        "properties": {
          "assignableRoleInfos": {
            "description": "The list of roles that you can assign for this person.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientRoleInfoResponse"
            }
          },
          "clientUserRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "includeInNewEvents": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "GetClientUserClientConfigResponse": {
        "type": "object",
        "required": [
          "clientId",
          "clientName",
          "clientUserId",
          "clientUserRoleInfo",
          "invitableRoles"
        ],
        "properties": {
          "clientAvatarMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientName": {
            "type": "string"
          },
          "clientType": {
            "type": "string",
            "enum": [
              "AGENT",
              "ARTIST",
              "BOOKING_AGENT",
              "MANAGEMENT",
              "MISCELLANEOUS",
              "PERSONAL",
              "PROMOTER",
              "TALENT_BUYER",
              "VENUE",
              "YOOP"
            ]
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "includeInNewEvents": {
            "type": "boolean"
          },
          "invitableRoles": {
            "description": "The roles this person can invite to organization if the option is available to them.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientRoleInfoResponse"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "GetClientUserClientInfoListItemResponse": {
        "type": "object",
        "properties": {
          "clientConfig": {
            "$ref": "#/components/schemas/GetClientUserClientConfigInfoListItemResponse"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GetClientUserClientInviteResponse": {
        "type": "object",
        "properties": {
          "acceptedDate": {
            "type": "string",
            "format": "date-time"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "clientName": {
            "type": "string"
          },
          "declinedDate": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inviterClientUserFirstName": {
            "type": "string"
          },
          "inviterClientUserLastName": {
            "type": "string"
          },
          "revokedDate": {
            "type": "string",
            "format": "date-time"
          },
          "roleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "sentDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING_ACCEPT",
              "ACCEPTED",
              "DECLINED",
              "REVOKED"
            ]
          },
          "statusDate": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "GetClientUserEventCollabInviteApprovalResponse": {
        "type": "object",
        "properties": {
          "approvalStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED"
            ]
          },
          "approvalStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "approverClientId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteStatus": {
            "type": "string",
            "enum": [
              "PENDING_SEND",
              "PENDING_ACCEPT",
              "DECLINED",
              "ACCEPTED_PENDING_APPROVAL",
              "REVOKED",
              "APPROVAL_ACCEPTED",
              "APPROVAL_REJECTED"
            ]
          },
          "inviteStatusDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetClientUserEventCollabInviteResponse": {
        "type": "object",
        "required": [
          "createdDate",
          "email",
          "id",
          "inviterClientId",
          "inviterClientName",
          "inviterClientUserFirstName",
          "inviterClientUserId",
          "inviterClientUserLastName",
          "roleInfo",
          "status",
          "statusDate"
        ],
        "properties": {
          "acceptedDate": {
            "description": "When the invite was accepted.",
            "type": "string",
            "format": "date-time"
          },
          "approvals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientUserEventCollabInviteApprovalResponse"
            }
          },
          "createdDate": {
            "description": "When the invite was created.",
            "type": "string",
            "format": "date-time"
          },
          "declinedDate": {
            "description": "When the invite was declined.",
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "description": "The email that was invited.",
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventDraftId": {
            "description": "The ID of the event draft.",
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "description": "The ID of the event.",
            "type": "integer",
            "format": "int64"
          },
          "eventLocationName": {
            "type": "string"
          },
          "eventName": {
            "type": "string"
          },
          "eventTimeZoneOffset": {
            "type": "string"
          },
          "id": {
            "description": "The ID of the invite.",
            "type": "integer",
            "format": "int64"
          },
          "invitedClientId": {
            "type": "integer",
            "format": "int64"
          },
          "invitedClientMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "invitedClientName": {
            "type": "string"
          },
          "invitedClientUserFirstName": {
            "type": "string"
          },
          "invitedClientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "invitedClientUserLastName": {
            "type": "string"
          },
          "inviterClientId": {
            "type": "integer",
            "format": "int64"
          },
          "inviterClientMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "inviterClientName": {
            "type": "string"
          },
          "inviterClientUserFirstName": {
            "type": "string"
          },
          "inviterClientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "inviterClientUserLastName": {
            "type": "string"
          },
          "revokedDate": {
            "description": "When the invite was revoked.",
            "type": "string",
            "format": "date-time"
          },
          "roleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "status": {
            "description": "The status of the invite.",
            "type": "string",
            "enum": [
              "PENDING_SEND",
              "PENDING_ACCEPT",
              "DECLINED",
              "ACCEPTED_PENDING_APPROVAL",
              "REVOKED",
              "APPROVAL_ACCEPTED",
              "APPROVAL_REJECTED"
            ]
          },
          "statusDate": {
            "description": "When the latest status was set.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetClientUserEventCollabPublicAcceptResponse": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "invite": {
            "$ref": "#/components/schemas/GetClientUserEventCollabInviteResponse"
          }
        }
      },
      "GetClientUserFirebaseLoginResponse": {
        "type": "object",
        "properties": {
          "appConfigs": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "firebaseLoginToken": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "GetClientUserResponse": {
        "type": "object",
        "properties": {
          "clientConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientUserClientConfigResponse"
            }
          },
          "emailAddress": {
            "type": "string"
          },
          "emailState": {
            "type": "string",
            "enum": [
              "EMAIL_UNVERIFIED",
              "EMAIL_VERIFIED",
              "BLACK_LISTED"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GetCountryResponse": {
        "type": "object",
        "properties": {
          "codeISO2": {
            "description": "The ISO 2 Country code.",
            "type": "string"
          },
          "id": {
            "description": "The ID of this Country.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of this Country.",
            "type": "string"
          },
          "phoneCode": {
            "description": "The phone code for the Country.",
            "type": "string"
          },
          "translations": {
            "description": "The translations for the country.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryTranslation"
            }
          }
        }
      },
      "GetDiscountResponse": {
        "type": "object",
        "properties": {
          "advertisementString": {
            "description": "Customizable advertisement string for this discount item",
            "type": "string"
          },
          "applicationRuleJson": {
            "description": "The application rules for this discount item",
            "type": "string"
          },
          "discountApplicationLevel": {
            "description": "Application level of this discount item",
            "type": "integer",
            "format": "int32"
          },
          "discountCodeParentId": {
            "type": "integer",
            "format": "int64"
          },
          "discountCodeParentType": {
            "type": "string",
            "enum": [
              "EVENT"
            ]
          },
          "discountLimitType": {
            "description": "Limit type discount item",
            "type": "string",
            "enum": [
              "PER_CART",
              "PER_APPLICATION",
              "PER_INVENTORY_ACCESS_TOKEN"
            ]
          },
          "discountStatus": {
            "description": "Status of this discount item",
            "type": "string",
            "enum": [
              "ARCHIVED",
              "DEFAULT"
            ]
          },
          "endDate": {
            "description": "Expire date of this discount item",
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "description": "Global application limit allowed for this discount item",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID of this discount item",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Name of this discount item",
            "type": "string"
          },
          "parentType": {
            "type": "string",
            "enum": [
              "OFFER_GROUP_ID",
              "CODE",
              "INVENTORY_CHOICE_AND_OFFER_GROUP"
            ]
          },
          "primaryParentId": {
            "type": "integer",
            "format": "int64"
          },
          "requirementJson": {
            "description": "The requirements for applying this discount item",
            "type": "string"
          },
          "requirementMissingMessage": {
            "description": "Customizable string displayed when requirement of this discount item has not met",
            "type": "string"
          },
          "secondaryParentId": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "description": "Start date of this discount item",
            "type": "string",
            "format": "date-time"
          },
          "userLimit": {
            "description": "Per user application limit allowed for this discount item",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetEventAnalyticsTrackerResponse": {
        "type": "object",
        "required": [
          "code",
          "id",
          "type"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "serverAccessCode": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL"
            ]
          }
        }
      },
      "GetEventCalendarResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "additionalMedia": {
            "description": "Any additional media tied to this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "currentMarketplace": {
            "$ref": "#/components/schemas/GetMarketplaceCalendarResponse"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "endDate": {
            "description": "The date and time the event ends. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventName": {
            "description": "The name of the event.",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "integer",
            "format": "int64"
          },
          "locationName": {
            "description": "The location of the event.",
            "type": "string"
          },
          "onlineVisibleDate": {
            "description": "The date the event become visible to the users.",
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "description": "The date and time the event takes place. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetEventCollaboratorResponse": {
        "type": "object",
        "required": [
          "assignableRoleInfos"
        ],
        "properties": {
          "assignableRoleInfos": {
            "description": "The list of roles that you can assign for this person.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientRoleInfoResponse"
            }
          },
          "canInviteExternalMembers": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientName": {
            "type": "string"
          },
          "clientUserEmailAddress": {
            "type": "string"
          },
          "clientUserEventRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "clientUserFirstName": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserLastName": {
            "type": "string"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventPrimaryClient": {
            "type": "boolean"
          }
        }
      },
      "GetEventDraftResponse": {
        "type": "object",
        "properties": {
          "ageBasedChoicePreconfiguredData": {
            "$ref": "#/components/schemas/PreconfiguredClientAgeBasedChoiceConfiguration"
          },
          "archived": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inReview": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "reviewApproved": {
            "type": "boolean"
          }
        }
      },
      "GetEventExchangeConfigResponse": {
        "description": "This is used for the Client app facing exchange info.",
        "type": "object",
        "required": [
          "inventoryCategoryConfigs",
          "minBidPriceSetting"
        ],
        "properties": {
          "bidExpirationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidExpirationOption"
            }
          },
          "bidOnlineVisibleDelaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "canDisableExchange": {
            "type": "boolean"
          },
          "clientGuestBidPaymentRetryDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "exchangeEnabled": {
            "type": "boolean"
          },
          "exchangePrimaryMarketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryExchangeConfigResponse"
            }
          },
          "maxBidPrice": {
            "type": "number"
          },
          "minBidPrice": {
            "type": "number"
          },
          "minBidPriceSetting": {
            "type": "string",
            "enum": [
              "EVENT_ONLY",
              "CATEGORY_ONLY"
            ]
          },
          "verifyPaymentMethodEnabled": {
            "type": "boolean"
          }
        }
      },
      "GetEventMediaResponse": {
        "type": "object",
        "required": [
          "avatarMedia",
          "defaultMedia",
          "emailMedia"
        ],
        "properties": {
          "additionalMedia": {
            "description": "Any additional media tied to this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "seatMapMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "videoStreamMedia": {
            "description": "The event video stream media in order of display",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          }
        }
      },
      "GetEventResponse": {
        "type": "object",
        "required": [
          "currency",
          "eventAccessibilityType",
          "eventMedia",
          "eventName",
          "eventNameShort",
          "id",
          "language",
          "locationProfile",
          "majorCategories",
          "minorCategories",
          "performers",
          "primaryClient",
          "state",
          "ticketLimit",
          "timeZoneOffset",
          "type",
          "vanityName"
        ],
        "properties": {
          "additionalEventDescription": {
            "description": "Additional description for the event",
            "type": "string"
          },
          "additionalRules": {
            "description": "Additional rules for the event",
            "type": "string"
          },
          "ageBasedChoicePreconfiguredData": {
            "$ref": "#/components/schemas/PreconfiguredClientAgeBasedChoiceConfiguration"
          },
          "analyticsTrackers": {
            "description": "Trackers used to send data to facebook pixel, google analytics, etc.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventAnalyticsTrackerResponse"
            }
          },
          "announcement": {
            "description": "Any announcement string for the event",
            "type": "string"
          },
          "creatorClientName": {
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event",
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "description": "An event's accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDefaultListingTitle": {
            "description": "The event's default listing title.",
            "type": "string"
          },
          "eventEndDate": {
            "description": "The date and time the event ends.",
            "type": "string",
            "format": "date-time"
          },
          "eventMedia": {
            "$ref": "#/components/schemas/GetEventMediaResponse"
          },
          "eventName": {
            "description": "The name of the event",
            "type": "string"
          },
          "eventNameShort": {
            "description": "The short name of the event",
            "type": "string"
          },
          "eventPackageType": {
            "type": "string",
            "enum": [
              "PARENT"
            ]
          },
          "eventStartDate": {
            "description": "The date and time the event takes place. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventSubDetails": {
            "description": "Extra event info list to display",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSubDetailResponse"
            }
          },
          "eventTimelineGroups": {
            "description": "The timeline to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventTimelineGroupResponse"
            }
          },
          "eventTranslations": {
            "description": "Translations associated with the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTranslation"
            }
          },
          "exchangeConfig": {
            "$ref": "#/components/schemas/GetEventExchangeConfigResponse"
          },
          "externalNotificationSubscriptions": {
            "description": "External notification subscription checkboxes shown at checkout",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetExternalNotificationSubscriptionResponse"
            }
          },
          "feeData": {
            "$ref": "#/components/schemas/EventFeeConfigurationResponse"
          },
          "gateUrl": {
            "description": "The event's gate url.",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "liveStreamReplaySeconds": {
            "description": "The amount of time, in seconds, the live stream can be replayed.",
            "type": "integer",
            "format": "int32"
          },
          "locationProfile": {
            "$ref": "#/components/schemas/GetLocationProfileResponse"
          },
          "majorCategories": {
            "description": "A list of major categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMajorCategoryResponse"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minorCategories": {
            "description": "A list of minor categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMinorCategoryResponse"
            }
          },
          "numInTour": {
            "description": "The event number in this tour",
            "type": "integer",
            "format": "int32"
          },
          "onlineHideDate": {
            "description": "The date the event becomes invisible to the users",
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "description": "The date the event become visible to the users",
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "description": "An optional long description of the event",
            "type": "string"
          },
          "optionalShortDescription": {
            "description": "An optional short description of the event",
            "type": "string"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place.. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "A list of performers for the event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPerformerProfileResponse"
            }
          },
          "primaryClient": {
            "$ref": "#/components/schemas/GetClientProfileResponse"
          },
          "private": {
            "type": "boolean"
          },
          "refundDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "seatChartId": {
            "$ref": "#/components/schemas/GetSeatChartResponse"
          },
          "seatConfigId": {
            "type": "integer",
            "format": "int64"
          },
          "seatsIOChartEventKey": {
            "type": "string"
          },
          "sponsorGroups": {
            "description": "Sponsors associated with the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSponsorGroupRelationResponse"
            }
          },
          "state": {
            "description": "The event state",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "description": "The individual ticket limit for this event",
            "type": "integer",
            "format": "int32"
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "tokenAssignmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tourId": {
            "description": "The id of the event's tour",
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "description": "The event type",
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "EXPERIENCE",
              "GOODS_AND_SERVICES",
              "PARKING",
              "CONFERENCE",
              "MISCELLANEOUS",
              "STREAMING",
              "COLLECTION",
              "SEASON_MEMBERSHIP"
            ]
          },
          "vanityName": {
            "description": "The vanity name of the event",
            "type": "string"
          }
        }
      },
      "GetEventTimelineGroupResponse": {
        "type": "object",
        "required": [
          "eventId",
          "id",
          "timelineItems",
          "title"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "timelineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventTimelineResponse"
            }
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslation"
            }
          }
        }
      },
      "GetEventTimelineResponse": {
        "type": "object",
        "required": [
          "description",
          "id",
          "timelineGroupId",
          "title"
        ],
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "timelineGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslation"
            }
          }
        }
      },
      "GetExternalNotificationSubscriberListItemResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "GetExternalNotificationSubscriberListResponse": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetExternalNotificationSubscriberListItemResponse"
            }
          }
        }
      },
      "GetExternalNotificationSubscriptionResponse": {
        "type": "object",
        "required": [
          "archived",
          "displayString",
          "id"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "displayString": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "GetFeeResponse": {
        "type": "object",
        "required": [
          "includedInBase",
          "taxable"
        ],
        "properties": {
          "applicationFeeCodes": {
            "description": "For preconfigured fees only. This represents a list of preconfigured fee codes that this fee should apply to.",
            "type": "array",
            "items": {
              "description": "For preconfigured fees only. This represents a list of preconfigured fee codes that this fee should apply to.",
              "type": "string"
            }
          },
          "applicationLevel": {
            "description": "The application level for this fee",
            "type": "string",
            "enum": [
              "TOKEN",
              "TRANSACTION",
              "PREVIOUS_FEE",
              "PREVIOUS_FEE_TOKEN",
              "TOKEN_LIFT",
              "TOKEN_PROFIT"
            ]
          },
          "applyOrder": {
            "description": "The order in which this fee gets applied. Fees with higher order get applied on top of fees with lower order.",
            "type": "integer",
            "format": "int32"
          },
          "blacklistedCategoryCodes": {
            "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
            "type": "array",
            "items": {
              "description": "Category codes within the whitelisted category type that this fee shouldn't apply to. This can be used to have a common merch fee that shouldn't apply to a specific merch item.",
              "type": "string"
            }
          },
          "breakdownDisplayOption": {
            "description": "Fee's breakdown display option",
            "type": "string",
            "enum": [
              "ALL",
              "EMAIL"
            ]
          },
          "categoryTypes": {
            "description": "Category types this fee should apply to",
            "type": "array",
            "items": {
              "description": "Category types this fee should apply to",
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "customFeeApplicationRule": {
            "description": "For preconfigured fees only. Indicates how this fee should ",
            "type": "string",
            "enum": [
              "NONE",
              "ALL",
              "ONLY_TAXABLE"
            ]
          },
          "feeCode": {
            "description": "The unique code for this fee. The value will match preconfiguredFeeCode, for preconfigured fees",
            "type": "string"
          },
          "feeName": {
            "description": "The name for this fee",
            "type": "string"
          },
          "feeNameLong": {
            "description": "The optional long name for this fee",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this fee",
            "type": "integer",
            "format": "int64"
          },
          "includedInBase": {
            "description": "If the fee should be included in the base price or not",
            "type": "boolean"
          },
          "marketplaceRestriction": {
            "description": "Whether this fee applies for transactions in primary or secondary marketplaces",
            "type": "string",
            "enum": [
              "ONLY_PRIMARY",
              "ONLY_SECONDARY",
              "ONLY_BIDS"
            ]
          },
          "preconfiguredFeeCode": {
            "description": "If present, the code of the preconfigured fee used to create this fee.",
            "type": "string"
          },
          "reason": {
            "description": "The reason this fee was applied",
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          },
          "responsibilityType": {
            "description": "Who is responsible for paying this fee",
            "type": "string",
            "enum": [
              "CLIENT",
              "BUYER",
              "SELLER"
            ]
          },
          "subReason": {
            "description": "The sub reason this fee is applied",
            "type": "string",
            "enum": [
              "STATE_TAX",
              "FEDERAL_TAX"
            ]
          },
          "taxable": {
            "description": "If the fee is taxable or not",
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeTranslation"
            }
          },
          "value": {
            "description": "The value for this fee",
            "type": "number"
          },
          "valueConfiguration": {
            "$ref": "#/components/schemas/FeeValueConfiguration"
          },
          "valueType": {
            "description": "The value type for this fee",
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "PROFIT_PERCENTAGE",
              "STEPPED"
            ]
          }
        }
      },
      "GetGeoRegionResponse": {
        "type": "object",
        "properties": {
          "abbreviation": {
            "description": "The abbreviation for the Geo Region.",
            "type": "string"
          },
          "countryId": {
            "description": "The ID of the Country this Geo Region is in.",
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "description": "The ID of this Geo Region.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the Geo Region.",
            "type": "string"
          },
          "translations": {
            "description": "Translations for the Geo Region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoRegionTranslation"
            }
          }
        }
      },
      "GetInventoryCategoryExchangeConfigResponse": {
        "type": "object",
        "properties": {
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryName": {
            "type": "string"
          },
          "maxBidPrice": {
            "type": "number"
          },
          "minBidPrice": {
            "type": "number"
          },
          "sectionCodeStrings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GetInventoryCategoryMarketplaceDataResponse": {
        "type": "object",
        "properties": {
          "inventoryCategoryCode": {
            "type": "string"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "maxOfferGroupReservePrice": {
            "type": "number"
          },
          "minOfferGroupReservePrice": {
            "type": "number"
          },
          "soldOut": {
            "type": "boolean"
          }
        }
      },
      "GetInventoryCategoryResponse": {
        "type": "object",
        "required": [
          "accessibilityType",
          "code",
          "name",
          "type"
        ],
        "properties": {
          "accessControlRestrictions": {
            "$ref": "#/components/schemas/AccessControlRestrictionJson"
          },
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "accessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "STREAMING"
            ]
          },
          "allowTokenAssignment": {
            "type": "boolean"
          },
          "allowUpgradeFrom": {
            "type": "boolean"
          },
          "allowUpgradeTo": {
            "type": "boolean"
          },
          "childGroupingType": {
            "type": "string",
            "enum": [
              "BUNDLE",
              "GROUP",
              "HOTEL_ROOM",
              "TABLE"
            ]
          },
          "choiceConfigs": {
            "description": "Use choiceSets instead",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryChoiceSetResponse"
            }
          },
          "choiceSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryChoiceSetResponse"
            }
          },
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/InventoryCategoryUIDisplaySettings"
          },
          "emailRules": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "externalTaxCode": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "maxUserDateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandiseEmailDescription": {
            "type": "string"
          },
          "minUserAge": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleMaxPrice": {
            "type": "number"
          },
          "rules": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "upsellAllowed": {
            "type": "boolean"
          }
        }
      },
      "GetInventoryCategoryTagGroupResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Code of this tag group",
            "type": "string"
          },
          "id": {
            "description": "The ID of this tag group",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryId": {
            "description": "The category id this tag group assigned to",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Name of this tag group",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of this tag group",
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryTagResponse"
            }
          },
          "valueType": {
            "description": "Value render type of tags from this group",
            "type": "string",
            "enum": [
              "STRING",
              "NUMERIC",
              "DATE_RANGE"
            ]
          }
        }
      },
      "GetInventoryCategoryTagResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Code of this tag",
            "type": "string"
          },
          "iconUrl": {
            "description": "Optional url for icon image of this tag",
            "type": "string"
          },
          "id": {
            "description": "Id of this tag",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Optional name or value of this tag",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of this tag",
            "type": "integer",
            "format": "int32"
          },
          "valueJson": {
            "description": "Additional json value of this tag",
            "type": "string"
          }
        }
      },
      "GetInventoryCategoryTemplateResponse": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
          },
          "sku": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          }
        }
      },
      "GetInventoryChoiceResponse": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "choiceId": {
            "type": "integer",
            "format": "int64"
          },
          "choiceSetId": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "description": "The code of the choice",
            "type": "string"
          },
          "id": {
            "description": "The ID of the choice",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the choice",
            "type": "string"
          },
          "ranking": {
            "description": "The ranking of the choice",
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "description": "The tag of the choice",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryChoiceTagResponse"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceTranslation"
            }
          }
        }
      },
      "GetInventoryChoiceSetResponse": {
        "description": "Use choiceSets instead",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "choiceTagTypes": {
            "description": "The choice tags from the choices of the choice set.",
            "type": "array",
            "items": {
              "description": "The choice tags from the choices of the choice set.",
              "type": "string",
              "enum": [
                "AGE_BASED"
              ]
            }
          },
          "choices": {
            "description": "The choices in this choice set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryChoiceResponse"
            }
          },
          "code": {
            "description": "The code of the choice set.",
            "type": "string"
          },
          "defaultChoice": {
            "$ref": "#/components/schemas/GetInventoryChoiceResponse"
          },
          "description": {
            "description": "The description of the choice set.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the choice set.",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryId": {
            "description": "The ID of the inventory category this choice set belongs to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the choice set.",
            "type": "string"
          },
          "ranking": {
            "description": "The rank of the choice set.",
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "description": "Translations for the choice set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceSetTranslation"
            }
          }
        }
      },
      "GetInventoryChoiceTagResponse": {
        "description": "The tag of the choice",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AGE_BASED"
            ]
          },
          "value": {
            "type": "string",
            "enum": [
              "ADULT",
              "CHILD",
              "SENIOR"
            ]
          }
        }
      },
      "GetLocationProfileResponse": {
        "type": "object",
        "required": [
          "cityId",
          "cityName",
          "countryCode",
          "countryId",
          "countryName",
          "geoRegionId",
          "geoRegionName",
          "id",
          "postalCode"
        ],
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "cityId": {
            "type": "integer",
            "format": "int64"
          },
          "cityName": {
            "type": "string"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "countryCode": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int64"
          },
          "countryName": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "description": {
            "type": "string"
          },
          "geoAbbreviation": {
            "type": "string"
          },
          "geoRegionId": {
            "type": "integer",
            "format": "int64"
          },
          "geoRegionName": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "latitude": {
            "type": "number"
          },
          "locationName": {
            "type": "string"
          },
          "locationTypeName": {
            "type": "string"
          },
          "longitude": {
            "type": "number"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "GetLocationTypeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the location type.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the location type.",
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationTypeTranslation"
            }
          }
        }
      },
      "GetMajorCategoryResponse": {
        "description": "A list of major categories for the event",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id of this category",
            "type": "integer",
            "format": "int64"
          },
          "majorCategoryName": {
            "description": "The name of this category",
            "type": "string"
          }
        }
      },
      "GetMarketplaceCalendarResponse": {
        "description": "The first active marketplace currently on-going.",
        "type": "object",
        "required": [
          "endDate",
          "id",
          "startDate",
          "type"
        ],
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          }
        }
      },
      "GetMarketplaceResponse": {
        "type": "object",
        "properties": {
          "capacityDefaultString": {
            "description": "Default capacity string for this marketplace",
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceResponse"
            }
          },
          "code": {
            "description": "The code that grants access to this private marketplace. This is not a private marketplace if the code is null",
            "type": "string"
          },
          "displayOptions": {
            "description": "The display options for the marketplace",
            "type": "string"
          },
          "draftMode": {
            "description": "The draft mode for the marketplace",
            "type": "boolean"
          },
          "endCalculateWinnersDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "description": "Overall end for this marketplace",
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "description": "The ID for the event associated with this marketplace",
            "type": "integer",
            "format": "int64"
          },
          "forceAllocationTime": {
            "description": "The time to force allocation for the marketplace",
            "type": "string",
            "format": "date-time"
          },
          "forceAutoPay": {
            "description": "Does this marketplace force auto pay",
            "type": "boolean"
          },
          "id": {
            "description": "The ID for the marketplace",
            "type": "integer",
            "format": "int64"
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "maxManualPaymentDurationSeconds": {
            "description": "The max amount of time people have to pay manual payments for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "description": "The min amount of time people have to pay manual payments for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name for this row",
            "type": "string"
          },
          "onlineEndDateTime": {
            "description": "Default end date for online marketplace",
            "type": "string",
            "format": "date-time"
          },
          "private": {
            "type": "boolean"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "rules": {
            "description": "Rules for this marketplace",
            "type": "string"
          },
          "shippingMethod": {
            "description": "The shipping method for the marketplace",
            "type": "string"
          },
          "startDateTime": {
            "description": "Overall start time for this marketplace",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "description": "The marketplace state",
            "type": "string",
            "enum": [
              "CANCELLED",
              "PAUSED",
              "WINNERS_SELECTED",
              "ALLOCATE_READY"
            ]
          },
          "ticketLimit": {
            "description": "The ticket limit for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceTranslation"
            }
          },
          "type": {
            "description": "The marketplace type",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          }
        }
      },
      "GetMarketplaceWithCodeRequest": {
        "description": "Marketplace access codes and event ids",
        "type": "object",
        "required": [
          "eventId",
          "marketplaceCode"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceCode": {
            "type": "string"
          }
        }
      },
      "GetMediaResponse": {
        "type": "object",
        "properties": {
          "height": {
            "description": "The height in pixels of this media item",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID of this media item",
            "type": "integer",
            "format": "int64"
          },
          "longDescription": {
            "description": "A detailed description of this media item",
            "type": "string"
          },
          "mediaSubType": {
            "description": "The media sub type, e.g. STREAMING_HLS, STREAMING_DASH, etc",
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "description": "The media type, e.g. IMAGE, VIDEO, etc",
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "shortDescription": {
            "description": "A short description of this media item",
            "type": "string"
          },
          "translations": {
            "description": "Translations for this media item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaTranslation"
            }
          },
          "url": {
            "description": "The url to this media item",
            "type": "string"
          },
          "width": {
            "description": "The width in pixels of this media item",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetMevDeviceResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "serialNumber"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "GetMevInvoiceResponse": {
        "type": "object",
        "required": [
          "customerOrderId",
          "mevTransactionId"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "mevTransactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetMinorCategoryResponse": {
        "description": "A list of minor categories for the event",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id of this category",
            "type": "integer",
            "format": "int64"
          },
          "majorCategory": {
            "$ref": "#/components/schemas/GetMajorCategoryResponse"
          },
          "minorCategoryName": {
            "description": "The name of this category",
            "type": "string"
          }
        }
      },
      "GetOfferGroupAutomaticDiscountResponse": {
        "type": "object",
        "properties": {
          "advertisementString": {
            "description": "Customizable advertisement string for this discount item",
            "type": "string"
          },
          "applicationRuleJson": {
            "description": "The application rules for this discount item",
            "type": "string"
          },
          "discountApplicationLevel": {
            "description": "Application level of this discount item",
            "type": "integer",
            "format": "int32"
          },
          "discountCodeParentId": {
            "type": "integer",
            "format": "int64"
          },
          "discountCodeParentType": {
            "type": "string",
            "enum": [
              "EVENT"
            ]
          },
          "discountLimitType": {
            "description": "Limit type discount item",
            "type": "string",
            "enum": [
              "PER_CART",
              "PER_APPLICATION",
              "PER_INVENTORY_ACCESS_TOKEN"
            ]
          },
          "discountPercentage": {
            "type": "number"
          },
          "discountStatus": {
            "type": "string",
            "enum": [
              "ARCHIVED",
              "DEFAULT"
            ]
          },
          "discountValue": {
            "type": "number"
          },
          "discountValueType": {
            "type": "string",
            "enum": [
              "PERCENTAGE_DISCOUNT",
              "FLAT_PER_INVENTORY_DISCOUNT",
              "FLAT_PER_PARENT_INVENTORY_DISCOUNT"
            ]
          },
          "discountedPrice": {
            "type": "number"
          },
          "endDate": {
            "description": "Expire date of this discount item",
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "description": "Global application limit allowed for this discount item",
            "type": "integer",
            "format": "int32"
          },
          "globalUseCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID of this discount item",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Name of this discount item",
            "type": "string"
          },
          "parentType": {
            "type": "string",
            "enum": [
              "OFFER_GROUP_ID",
              "CODE",
              "INVENTORY_CHOICE_AND_OFFER_GROUP"
            ]
          },
          "primaryParentId": {
            "type": "integer",
            "format": "int64"
          },
          "requirementJson": {
            "description": "The requirements for applying this discount item",
            "type": "string"
          },
          "requirementMissingMessage": {
            "description": "Customizable string displayed when requirement of this discount item has not met",
            "type": "string"
          },
          "secondaryParentId": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "description": "Start date of this discount item",
            "type": "string",
            "format": "date-time"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          },
          "userLimit": {
            "description": "Per user application limit allowed for this discount item",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetOfferGroupResponse": {
        "type": "object",
        "properties": {
          "absurdPrice": {
            "description": "The absurd price",
            "type": "number"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "automaticDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetOfferGroupAutomaticDiscountResponse"
            }
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/GetOfferGroupResponse"
          },
          "choiceDiscounts": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          },
          "description": {
            "description": "The description for the offer group",
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "description": "Previous historical average, used in live markets",
            "type": "number"
          },
          "id": {
            "description": "The id of this offer group",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryCode": {
            "type": "string"
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceId": {
            "description": "The id of the marketplace this offer group belongs to",
            "type": "integer",
            "format": "int64"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "description": "The reserve price for the offer group",
            "type": "number"
          },
          "salesGroup": {
            "$ref": "#/components/schemas/GetSalesGroupResponse"
          },
          "seatConfigurationType": {
            "description": "Whether or not this offer group is GENERAL_ADMISSION or SEATED",
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedOfferIncrements": {
            "description": "The suggested offer increments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSuggestedOfferIncrementResponse"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTranslation"
            }
          },
          "visibleEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetOfferUpgradabilityRequestItem": {
        "type": "object",
        "required": [
          "inventoryItemIdsForUpgrade",
          "sourceOfferId"
        ],
        "properties": {
          "inventoryItemIdsForUpgrade": {
            "description": "IDs of inventory item for upgrade.",
            "type": "array",
            "items": {
              "description": "IDs of inventory item for upgrade.",
              "type": "integer",
              "format": "int64"
            }
          },
          "sourceOfferId": {
            "description": "ID of the offer for upgrade. ",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetOfferUpgradeOptionsRequest": {
        "type": "object",
        "required": [
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "cacheKey": {
            "type": "string"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryIds": {
            "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
            "type": "array",
            "items": {
              "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
              "type": "integer",
              "format": "int64"
            }
          },
          "ignoreSalesGroupParam": {
            "type": "boolean"
          },
          "includeSoldOut": {
            "type": "boolean"
          },
          "inventoryItemIdsForUpgrade": {
            "description": "IDs of inventory item for upgrade.",
            "type": "array",
            "items": {
              "description": "IDs of inventory item for upgrade.",
              "type": "integer",
              "format": "int64"
            }
          },
          "marketplaceCodeRequests": {
            "description": "List of marketplace codes and event ids use to find marketplaces",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "ID of the marketplaces to load offer groups for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplaces to load offer groups for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "The number of requested tokens.",
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "description": "The page size to load. Defaults to 20.",
            "type": "integer",
            "format": "int32"
          },
          "parentOfferGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "previousPageKey": {
            "description": "The key from the previous page. If null, the first page is returned.",
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "sectionCodes": {
            "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
            "type": "array",
            "items": {
              "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
              "type": "string"
            }
          },
          "sortCriteria": {
            "description": "The sort criteria to use. Defaults to QUALIFYING_PRICE.",
            "type": "string",
            "enum": [
              "AVERAGE_OFFER_PRICE",
              "QUALIFYING_PRICE",
              "INVENTORY_QUANTITY",
              "DESCRIPTION",
              "RANK"
            ]
          },
          "sortDescending": {
            "description": "Whether to sort the offer groups by the given criteria in descending order. Defaults to true.",
            "type": "boolean"
          },
          "sourceOfferId": {
            "description": "ID of the offer for upgrade. ",
            "type": "integer",
            "format": "int64"
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GetOffersUpgradabilityRequest": {
        "type": "object",
        "properties": {
          "offerUpgradeOptionsRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetOfferUpgradabilityRequestItem"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "GetPerformerLanguageResponse": {
        "description": "The performer's languages",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id of the fan club",
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "description": "The performer's language",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "locale": {
            "description": "The performer's language locale",
            "type": "string"
          },
          "name": {
            "description": "The performer's language name",
            "type": "string"
          }
        }
      },
      "GetPerformerProfileResponse": {
        "description": "A list of performers for the event.",
        "type": "object",
        "properties": {
          "aliases": {
            "description": "The performer's aliases",
            "type": "array",
            "items": {
              "description": "The performer's aliases",
              "type": "string"
            }
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "defaultMinorCategory": {
            "$ref": "#/components/schemas/GetMinorCategoryResponse"
          },
          "description": {
            "description": "The performer's description",
            "type": "string"
          },
          "homeCity": {
            "description": "The performer's home city",
            "type": "string"
          },
          "homeCountry": {
            "description": "The performer's home country",
            "type": "string"
          },
          "homeGeoRegion": {
            "description": "The performer's home geoRegion",
            "type": "string"
          },
          "id": {
            "description": "The unique id of the performer",
            "type": "integer",
            "format": "int64"
          },
          "languages": {
            "description": "The performer's languages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPerformerLanguageResponse"
            }
          },
          "majorCategories": {
            "description": "The major categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMajorCategoryResponse"
            }
          },
          "managementOrganization": {
            "description": "The performer's management company",
            "type": "string"
          },
          "medias": {
            "description": "Pictures and videos of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "minorCategories": {
            "description": "The minor categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMinorCategoryResponse"
            }
          },
          "name": {
            "description": "The performer's name",
            "type": "string"
          },
          "primaryLanguage": {
            "description": "The performer's primary language",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "primaryLocations": {
            "description": "The performer's primary locations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLocationProfileResponse"
            }
          },
          "promoter": {
            "description": "The performer's promoter",
            "type": "string"
          },
          "recordLabel": {
            "description": "The performer's record company",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "The performer's social media information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSocialMediaResponse"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerTranslation"
            }
          }
        }
      },
      "GetPersonalEventCollaboratorResponse": {
        "type": "object",
        "required": [
          "assignableRoleInfos"
        ],
        "properties": {
          "assignableRoleInfos": {
            "description": "The list of roles that you can assign for this person.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientRoleInfoResponse"
            }
          },
          "canInviteExternalMembers": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientName": {
            "type": "string"
          },
          "clientUserEmailAddress": {
            "type": "string"
          },
          "clientUserEventRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "clientUserFirstName": {
            "type": "string"
          },
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUserLastName": {
            "type": "string"
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventPrimaryClient": {
            "type": "boolean"
          },
          "invitableRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientRoleInfoResponse"
            }
          }
        }
      },
      "GetPlaceLookupByPlaceIdResponse": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "cityId": {
            "type": "integer",
            "format": "int64"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "utcOffset": {
            "type": "integer",
            "format": "int32"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "GetReportingInventoryCategoryTypeSalesResponse": {
        "type": "object",
        "properties": {
          "inventoryCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "totalInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalSales": {
            "type": "number"
          },
          "wonInventoryCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetSalesGroupResponse": {
        "type": "object",
        "properties": {
          "carouselMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "children": {
            "description": "All child Sales roups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSalesGroupResponse"
            }
          },
          "code": {
            "description": "The code used by the Sales Group.",
            "type": "string"
          },
          "details": {
            "description": "The details of the Sales Group.",
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UIDisplaySettings"
          },
          "eventId": {
            "description": "The ID of the Event this Sales Group is tied to.",
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "description": "The ID of the Sales Group.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the Sales Group.",
            "type": "string"
          },
          "title": {
            "description": "The title of the Sales Group",
            "type": "string"
          },
          "translations": {
            "description": "Translations for this Sales Group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupTranslation"
            }
          }
        }
      },
      "GetSalesGroupTreeRequestV2": {
        "type": "object",
        "required": [
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "includeSoldOut": {
            "description": "Whether to include sold out sales groups",
            "type": "boolean"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "marketplaceCodeRequests": {
            "description": "Marketplace access codes and event ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "ID of the marketplace to load sales group tree for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplace to load sales group tree for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "Number of tokens filter for sales group tree.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetSeatChartResponse": {
        "description": "The optional Seats.IO chart keys under this seat configuration if exist.",
        "type": "object",
        "properties": {
          "chartKey": {
            "description": "The unique key of the seats.io chart.",
            "type": "string"
          },
          "eventKey": {
            "description": "The unique key of the seats.io event from chart.",
            "type": "string"
          },
          "id": {
            "description": "The id of the seat.io chart key data.",
            "type": "integer",
            "format": "int64"
          },
          "locationProfileId": {
            "description": "The id of the location profile that this seats.io chart is tied to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the seat.io chart.",
            "type": "string"
          },
          "svgMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "thumbnailUrl": {
            "description": "The url of the thumbnail of the seats.io chart.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BASIC_JSON",
              "SEAT_IO"
            ]
          }
        }
      },
      "GetSeatChartSeatConfigurationRequest": {
        "type": "object",
        "properties": {
          "seatChartId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetSeatChartSeatConfigurationResponse": {
        "type": "object",
        "properties": {
          "seatMapMedia": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "sectionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          }
        }
      },
      "GetSeatConfigResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "id": {
            "description": "The id of the seat config.",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategories": {
            "description": "The inventory categories this seat config helps pre-refill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryRequest"
            }
          },
          "locationProfileId": {
            "description": "The id of the location profile that this seat config is tied to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the seat config.",
            "type": "string"
          },
          "salesGroups": {
            "description": "The sales groups this seat config helps pre-fill during event creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalesGroupRequest"
            }
          },
          "seatMap": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "seatsIOChart": {
            "$ref": "#/components/schemas/GetSeatChartResponse"
          },
          "sections": {
            "description": "The section inventory this seat config uses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          },
          "tagGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryTagGroupRequest"
            }
          }
        }
      },
      "GetSocialMediaResponse": {
        "description": "The performer's social media information",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of this social media record",
            "type": "string"
          },
          "id": {
            "description": "The unique id of this social media record",
            "type": "integer",
            "format": "int64"
          },
          "socialMediaType": {
            "description": "The type of this social media record (e.g. FACEBOOK)",
            "type": "string",
            "enum": [
              "FACEBOOK",
              "FLICKR",
              "GOOGLE_PLUS",
              "INSTAGRAM",
              "LINKEDIN",
              "PINTEREST",
              "SNAPCHAT",
              "TUMBLR",
              "TWITTER",
              "WEBSITE",
              "YOUTUBE"
            ]
          },
          "url": {
            "description": "The url of this social media record",
            "type": "string"
          }
        }
      },
      "GetSponsorGroupRelationResponse": {
        "description": "Sponsors associated with the event",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "parentType": {
            "type": "string",
            "enum": [
              "EVENT",
              "EVENT_DRAFT",
              "CLIENT",
              "LOCATION_PROFILE",
              "PERFORMER_PROFILE",
              "INVENTORY_CATEGORY",
              "SALES_GROUP",
              "CLIENT_GUEST_BULK_SEND"
            ]
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "sponsorGroup": {
            "$ref": "#/components/schemas/GetSponsorGroupResponse"
          }
        }
      },
      "GetSponsorGroupResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "sponsorList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSponsorResponse"
            }
          }
        }
      },
      "GetSponsorResponse": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "icon": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorTranslation"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GetSquareRefundResponse": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPLETED",
              "IN_PROGRESS",
              "PENDING",
              "CANCELED",
              "REJECTED",
              "FAILED",
              "CANCEL_REQUESTED"
            ]
          }
        }
      },
      "GetSubDetailResponse": {
        "type": "object",
        "required": [
          "description",
          "id"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "$ref": "#/components/schemas/GetMediaResponse"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubDetailTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "COVID",
              "BAGS",
              "SOCIAL",
              "MERCHANDISE",
              "RECEIPT_EMAIL"
            ]
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GetSuggestedOfferIncrementResponse": {
        "description": "The suggested offer increments",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedOfferIncrementTranslation"
            }
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetUpgradeOptionsSalesGroupTreeRequest": {
        "type": "object",
        "required": [
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "includeSoldOut": {
            "description": "Whether to include sold out sales groups",
            "type": "boolean"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "marketplaceCodeRequests": {
            "description": "Marketplace access codes and event ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "ID of the marketplace to load sales group tree for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplace to load sales group tree for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "Number of tokens filter for sales group tree.",
            "type": "integer",
            "format": "int32"
          },
          "upgradeOfferSourceRequest": {
            "$ref": "#/components/schemas/UpgradeOfferSourceRequest"
          }
        }
      },
      "HasPermissionsRequest": {
        "type": "object",
        "required": [
          "actions"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCESS_CONTROL_MANAGE_ACCESS",
                "ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED",
                "ACCESS_CONTROL_DOWNLOAD_MANIFEST",
                "ADMIN_USER_READ_PROFILE",
                "ADMIN_USER_CREATE_PROFILE",
                "ADMIN_USER_LOGOUT",
                "ADMIN_RESEND_NOTIFICATIONS",
                "BOX_OFFICE_ACCESS",
                "BOX_OFFICE_USER_SEARCH",
                "BOX_OFFICE_SALE",
                "BOX_OFFICE_CONFIG_SET",
                "BOX_OFFICE_CONFIG_READ",
                "BOX_OFFICE_READ_DEVICES",
                "BOX_OFFICE_MANAGE_DEVICES",
                "BOX_OFFICE_REPORTING",
                "CLIENT_READ_PROFILE",
                "CLIENT_CREATE_PROFILE",
                "CLIENT_CREATE_GATEWAY",
                "CLIENT_UPDATE_GATEWAY",
                "CLIENT_UPDATE_PROFILE",
                "CLIENT_MANAGE_WHITELABEL",
                "CLIENT_LIST_ALL",
                "CLIENT_UPDATE_FEATURES",
                "CLIENT_USERS_LIST",
                "CLIENT_USER_CLIENT_INVITE_CREATE",
                "CLIENT_USER_CLIENT_INVITE_REVOKE",
                "CLIENT_USER_CLIENT_INVITE_RESEND",
                "CLIENT_USER_CLIENT_INVITE_LIST",
                "CLIENT_USER_CLIENT_CONFIG_UPDATE",
                "CLIENT_USER_CLIENT_CONFIG_DELETE",
                "CLIENT_PRECONFIGURED_FEE_CREATE",
                "CLIENT_PRECONFIGURED_FEE_READ",
                "FEE_SET",
                "CLIENT_REFUND_FEE_SET",
                "CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE",
                "CLIENT_USER_ACTIVITY_INVALIDATE_CACHE",
                "CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE",
                "CLIENT_USER_CREATE_PROFILE",
                "CLIENT_USER_LOGOUT",
                "CLIENT_USER_READ_PROFILE",
                "CLIENT_USER_SET_PASSWORD",
                "CLIENT_USER_UPDATE_PROFILE",
                "DISCOUNT_CREATE",
                "DISCOUNT_UPDATE",
                "DISCOUNT_READ",
                "DISCOUNT_REPORTING",
                "EVENT_ANALYTICS_TRACKER_READ",
                "EVENT_ANALYTICS_TRACKER_UPDATE",
                "EVENT_CANCEL",
                "EVENT_CREATE_PROFILE",
                "EVENT_CLONE",
                "EVENT_POSTPONE",
                "EVENT_READ_FINANCE_DATA",
                "EVENT_READ_PROFILE",
                "EVENT_DISPLAY_PROFILE",
                "EVENT_SET_TRANSLATIONS",
                "EVENT_UPDATE_PROFILE",
                "EVENT_READ_PROFILE_WITH_SALES",
                "EVENT_LIST",
                "EVENT_NOTIFICATIONS_READ",
                "EVENT_NOTIFICATIONS_CREATE",
                "EVENT_NOTIFICATIONS_UPDATE",
                "EVENT_NOTIFICATIONS_DELETE",
                "EXCHANGE_CONFIG_WRITE",
                "EXCHANGE_CONFIG_READ",
                "EXCHANGE_PRIMARY_BULK_FILL_WRITE",
                "EXCHANGE_PRIMARY_BULK_FILL_READ",
                "SUB_DETAIL_CREATE",
                "SUB_DETAIL_UPDATE",
                "SUB_DETAIL_DELETE",
                "EVENT_TIMELINE_CREATE",
                "EVENT_TIMELINE_UPDATE",
                "EVENT_TIMELINE_DELETE",
                "EVENT_TIMELINE_GROUP_UPDATE",
                "EVENT_GET_EXTERNAL_NOTIFICATION_SUBSCRIBERS",
                "EVENT_AFFILIATE_CODE_CREATE",
                "EVENT_AFFILIATE_CODE_UPDATE",
                "EVENT_AFFILIATE_CODE_READ",
                "EVENT_DRAFT_CREATE",
                "EVENT_DRAFT_UPDATE",
                "EVENT_DRAFT_DELETE",
                "EVENT_DRAFT_REVIEW_SUBMIT",
                "EVENT_DRAFT_REVIEW_CANCEL",
                "EVENT_DRAFT_REVIEW_APPROVE",
                "EVENT_DRAFT_LIST",
                "EVENT_DRAFT_READ",
                "EVENT_COLLAB_INVITE_CREATE",
                "EVENT_COLLAB_INVITE_REVOKE",
                "EVENT_COLLAB_INVITE_RESEND",
                "EVENT_COLLAB_INVITE_ACCEPT",
                "EVENT_COLLAB_INVITE_READ",
                "EVENT_COLLAB_INVITE_LIST",
                "EVENT_COLLAB_INVITE_APPROVE",
                "EVENT_COLLAB_INVITE_REJECT",
                "EVENT_COLLAB_ASSIGN_ROLE",
                "EVENT_COLLAB_USERS_LIST",
                "EVENT_COLLAB_USERS_INTERNAL_ADD",
                "EVENT_COLLAB_USER_REMOVE",
                "EVENT_COLLAB_USER_UPDATE",
                "EVENT_MEDIA_UPDATE",
                "FIREBASE_LOGIN_CLIENT_USER",
                "INVENTORY_WRITE",
                "INVENTORY_READ",
                "INVENTORY_UPDATE_VALIDITY",
                "INVENTORY_CATEGORY_WRITE",
                "INVENTORY_CATEGORY_READ",
                "INVENTORY_CHOICE_SET_WRITE",
                "INVENTORY_CHOICE_SET_READ",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_WRITE",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_READ",
                "LOCATION_CITY_CREATE",
                "LOCATION_CITY_READ",
                "LOCATION_COUNTRY_CREATE",
                "LOCATION_COUNTRY_READ",
                "LOCATION_GEO_REGION_CREATE",
                "LOCATION_GEO_REGION_READ",
                "LOCATION_PROFILE_CREATE",
                "LOCATION_PROFILE_UPDATE",
                "LOCATION_PROFILE_READ",
                "LOCATION_PROFILE_SET_TRANSLATIONS",
                "LOCATION_UPDATE_PROFILE",
                "LOCATION_SEAT_CONFIG_CREATE",
                "LOCATION_SEAT_CONFIG_READ",
                "LOCATION_SEAT_CONFIG_UPDATE",
                "LOCATION_TYPE_CREATE",
                "LOCATION_TYPE_READ",
                "LOCATION_TYPE_UPDATE",
                "LIVE_CONFERENCE_MANAGE",
                "LIVE_CONFERENCE_READ",
                "MARKETPLACE_CANCEL",
                "MARKETPLACE_CREATE",
                "MARKETPLACE_READ",
                "MARKETPLACE_RUN_JOBS",
                "MARKETPLACE_UPDATE",
                "MARKETPLACE_DELETE",
                "MARKETPLACE_OFFER_OWNED_TOKEN_REFUND",
                "MEDIA_READ",
                "MEDIA_CREATE",
                "NOTIFICATIONS_SEND_CUSTOM_EMAIL",
                "NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST",
                "NOTIFICATIONS_TEST",
                "NOTIFICATIONS_CREATE",
                "OFFER_REFUND",
                "OFFER_GROUP_CANCEL",
                "OFFER_GROUP_CREATE",
                "OFFER_GROUP_UPDATE",
                "OFFER_GROUP_DELETE",
                "CUSTOMER_ORDER_LIST_READ",
                "CUSTOM_ORDER_LIST_GLOBAL_SEARCH",
                "PERFORMER_CREATE_PROFILE",
                "PERFORMER_UPDATE_PROFILE",
                "PERFORMER_SET_TRANSLATIONS",
                "PROMOTER_ASSIGN",
                "PROMOTER_READ",
                "READ_ACCESS_CONTROL_DATA",
                "READ_ACCESS_CONTROL_SUMMARY_DATA",
                "REPORTING_ACCESS_CONTROL_DATA",
                "REPORTING_READ_SALES_DATA",
                "REPORTING_READ_SALES_DATA_DATE_RANGE",
                "REPORTING_READ_CLIENT_FEES_DATA",
                "REPORTING_READ_TRANSACTIONS_DATA",
                "REPORTING_DISPLAY_REPORTS",
                "REPORTING_S3_EXPORT",
                "SALES_GROUP_READ",
                "SALES_GROUP_CREATE",
                "SALES_GROUP_UPDATE",
                "SEAT_CONFIGURATION_READ",
                "SEAT_CONFIGURATION_CREATE",
                "SPONSOR_CREATE",
                "SPONSOR_READ",
                "SPONSOR_GROUP_SET",
                "STREAM_INFRA_MANAGE",
                "STREAM_INFRA_READ",
                "TOUR_CREATE",
                "TOUR_SET_TRANSLATIONS",
                "TOUR_UPDATE",
                "USER_BLACKLIST_PROFILE",
                "USER_CREATE_PROFILE",
                "USER_SEARCH_PROFILE",
                "USER_UPDATE_PROFILE",
                "READ_ACCESS_CONTROL_RESTRICTIONS",
                "WRITE_ACCESS_CONTROL_RESTRICTIONS",
                "USER_PAYMENT_MEANS_UPDATE",
                "USER_TRANSACTIONS_READ"
              ]
            }
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "HasPermissionsRequestV2": {
        "type": "object",
        "required": [
          "actions",
          "resourceIds",
          "resourceType"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCESS_CONTROL_MANAGE_ACCESS",
                "ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED",
                "ACCESS_CONTROL_DOWNLOAD_MANIFEST",
                "ADMIN_USER_READ_PROFILE",
                "ADMIN_USER_CREATE_PROFILE",
                "ADMIN_USER_LOGOUT",
                "ADMIN_RESEND_NOTIFICATIONS",
                "BOX_OFFICE_ACCESS",
                "BOX_OFFICE_USER_SEARCH",
                "BOX_OFFICE_SALE",
                "BOX_OFFICE_CONFIG_SET",
                "BOX_OFFICE_CONFIG_READ",
                "BOX_OFFICE_READ_DEVICES",
                "BOX_OFFICE_MANAGE_DEVICES",
                "BOX_OFFICE_REPORTING",
                "CLIENT_READ_PROFILE",
                "CLIENT_CREATE_PROFILE",
                "CLIENT_CREATE_GATEWAY",
                "CLIENT_UPDATE_GATEWAY",
                "CLIENT_UPDATE_PROFILE",
                "CLIENT_MANAGE_WHITELABEL",
                "CLIENT_LIST_ALL",
                "CLIENT_UPDATE_FEATURES",
                "CLIENT_USERS_LIST",
                "CLIENT_USER_CLIENT_INVITE_CREATE",
                "CLIENT_USER_CLIENT_INVITE_REVOKE",
                "CLIENT_USER_CLIENT_INVITE_RESEND",
                "CLIENT_USER_CLIENT_INVITE_LIST",
                "CLIENT_USER_CLIENT_CONFIG_UPDATE",
                "CLIENT_USER_CLIENT_CONFIG_DELETE",
                "CLIENT_PRECONFIGURED_FEE_CREATE",
                "CLIENT_PRECONFIGURED_FEE_READ",
                "FEE_SET",
                "CLIENT_REFUND_FEE_SET",
                "CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE",
                "CLIENT_USER_ACTIVITY_INVALIDATE_CACHE",
                "CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE",
                "CLIENT_USER_CREATE_PROFILE",
                "CLIENT_USER_LOGOUT",
                "CLIENT_USER_READ_PROFILE",
                "CLIENT_USER_SET_PASSWORD",
                "CLIENT_USER_UPDATE_PROFILE",
                "DISCOUNT_CREATE",
                "DISCOUNT_UPDATE",
                "DISCOUNT_READ",
                "DISCOUNT_REPORTING",
                "EVENT_ANALYTICS_TRACKER_READ",
                "EVENT_ANALYTICS_TRACKER_UPDATE",
                "EVENT_CANCEL",
                "EVENT_CREATE_PROFILE",
                "EVENT_CLONE",
                "EVENT_POSTPONE",
                "EVENT_READ_FINANCE_DATA",
                "EVENT_READ_PROFILE",
                "EVENT_DISPLAY_PROFILE",
                "EVENT_SET_TRANSLATIONS",
                "EVENT_UPDATE_PROFILE",
                "EVENT_READ_PROFILE_WITH_SALES",
                "EVENT_LIST",
                "EVENT_NOTIFICATIONS_READ",
                "EVENT_NOTIFICATIONS_CREATE",
                "EVENT_NOTIFICATIONS_UPDATE",
                "EVENT_NOTIFICATIONS_DELETE",
                "EXCHANGE_CONFIG_WRITE",
                "EXCHANGE_CONFIG_READ",
                "EXCHANGE_PRIMARY_BULK_FILL_WRITE",
                "EXCHANGE_PRIMARY_BULK_FILL_READ",
                "SUB_DETAIL_CREATE",
                "SUB_DETAIL_UPDATE",
                "SUB_DETAIL_DELETE",
                "EVENT_TIMELINE_CREATE",
                "EVENT_TIMELINE_UPDATE",
                "EVENT_TIMELINE_DELETE",
                "EVENT_TIMELINE_GROUP_UPDATE",
                "EVENT_GET_EXTERNAL_NOTIFICATION_SUBSCRIBERS",
                "EVENT_AFFILIATE_CODE_CREATE",
                "EVENT_AFFILIATE_CODE_UPDATE",
                "EVENT_AFFILIATE_CODE_READ",
                "EVENT_DRAFT_CREATE",
                "EVENT_DRAFT_UPDATE",
                "EVENT_DRAFT_DELETE",
                "EVENT_DRAFT_REVIEW_SUBMIT",
                "EVENT_DRAFT_REVIEW_CANCEL",
                "EVENT_DRAFT_REVIEW_APPROVE",
                "EVENT_DRAFT_LIST",
                "EVENT_DRAFT_READ",
                "EVENT_COLLAB_INVITE_CREATE",
                "EVENT_COLLAB_INVITE_REVOKE",
                "EVENT_COLLAB_INVITE_RESEND",
                "EVENT_COLLAB_INVITE_ACCEPT",
                "EVENT_COLLAB_INVITE_READ",
                "EVENT_COLLAB_INVITE_LIST",
                "EVENT_COLLAB_INVITE_APPROVE",
                "EVENT_COLLAB_INVITE_REJECT",
                "EVENT_COLLAB_ASSIGN_ROLE",
                "EVENT_COLLAB_USERS_LIST",
                "EVENT_COLLAB_USERS_INTERNAL_ADD",
                "EVENT_COLLAB_USER_REMOVE",
                "EVENT_COLLAB_USER_UPDATE",
                "EVENT_MEDIA_UPDATE",
                "FIREBASE_LOGIN_CLIENT_USER",
                "INVENTORY_WRITE",
                "INVENTORY_READ",
                "INVENTORY_UPDATE_VALIDITY",
                "INVENTORY_CATEGORY_WRITE",
                "INVENTORY_CATEGORY_READ",
                "INVENTORY_CHOICE_SET_WRITE",
                "INVENTORY_CHOICE_SET_READ",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_WRITE",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_READ",
                "LOCATION_CITY_CREATE",
                "LOCATION_CITY_READ",
                "LOCATION_COUNTRY_CREATE",
                "LOCATION_COUNTRY_READ",
                "LOCATION_GEO_REGION_CREATE",
                "LOCATION_GEO_REGION_READ",
                "LOCATION_PROFILE_CREATE",
                "LOCATION_PROFILE_UPDATE",
                "LOCATION_PROFILE_READ",
                "LOCATION_PROFILE_SET_TRANSLATIONS",
                "LOCATION_UPDATE_PROFILE",
                "LOCATION_SEAT_CONFIG_CREATE",
                "LOCATION_SEAT_CONFIG_READ",
                "LOCATION_SEAT_CONFIG_UPDATE",
                "LOCATION_TYPE_CREATE",
                "LOCATION_TYPE_READ",
                "LOCATION_TYPE_UPDATE",
                "LIVE_CONFERENCE_MANAGE",
                "LIVE_CONFERENCE_READ",
                "MARKETPLACE_CANCEL",
                "MARKETPLACE_CREATE",
                "MARKETPLACE_READ",
                "MARKETPLACE_RUN_JOBS",
                "MARKETPLACE_UPDATE",
                "MARKETPLACE_DELETE",
                "MARKETPLACE_OFFER_OWNED_TOKEN_REFUND",
                "MEDIA_READ",
                "MEDIA_CREATE",
                "NOTIFICATIONS_SEND_CUSTOM_EMAIL",
                "NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST",
                "NOTIFICATIONS_TEST",
                "NOTIFICATIONS_CREATE",
                "OFFER_REFUND",
                "OFFER_GROUP_CANCEL",
                "OFFER_GROUP_CREATE",
                "OFFER_GROUP_UPDATE",
                "OFFER_GROUP_DELETE",
                "CUSTOMER_ORDER_LIST_READ",
                "CUSTOM_ORDER_LIST_GLOBAL_SEARCH",
                "PERFORMER_CREATE_PROFILE",
                "PERFORMER_UPDATE_PROFILE",
                "PERFORMER_SET_TRANSLATIONS",
                "PROMOTER_ASSIGN",
                "PROMOTER_READ",
                "READ_ACCESS_CONTROL_DATA",
                "READ_ACCESS_CONTROL_SUMMARY_DATA",
                "REPORTING_ACCESS_CONTROL_DATA",
                "REPORTING_READ_SALES_DATA",
                "REPORTING_READ_SALES_DATA_DATE_RANGE",
                "REPORTING_READ_CLIENT_FEES_DATA",
                "REPORTING_READ_TRANSACTIONS_DATA",
                "REPORTING_DISPLAY_REPORTS",
                "REPORTING_S3_EXPORT",
                "SALES_GROUP_READ",
                "SALES_GROUP_CREATE",
                "SALES_GROUP_UPDATE",
                "SEAT_CONFIGURATION_READ",
                "SEAT_CONFIGURATION_CREATE",
                "SPONSOR_CREATE",
                "SPONSOR_READ",
                "SPONSOR_GROUP_SET",
                "STREAM_INFRA_MANAGE",
                "STREAM_INFRA_READ",
                "TOUR_CREATE",
                "TOUR_SET_TRANSLATIONS",
                "TOUR_UPDATE",
                "USER_BLACKLIST_PROFILE",
                "USER_CREATE_PROFILE",
                "USER_SEARCH_PROFILE",
                "USER_UPDATE_PROFILE",
                "READ_ACCESS_CONTROL_RESTRICTIONS",
                "WRITE_ACCESS_CONTROL_RESTRICTIONS",
                "USER_PAYMENT_MEANS_UPDATE",
                "USER_TRANSACTIONS_READ"
              ]
            },
            "uniqueItems": true
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "AFFILIATE_CODE",
              "BULK_PRIMARY_FILL",
              "CLIENT",
              "CLIENT_USER_CLIENT_INVITE",
              "CUSTOMER_ORDER",
              "EVENT",
              "EVENT_DRAFT",
              "EVENT_COLLAB_INVITE",
              "EVENT_NOTIFICATION",
              "EVENT_TIMELINE",
              "EVENT_TIMELINE_GROUP",
              "DISCOUNT",
              "INVENTORY_ITEM",
              "INVENTORY_CATEGORY",
              "OFFER_GROUP",
              "OFFER",
              "MARKETPLACE",
              "LOCATION_PROFILE",
              "PURCHASE_TOKEN",
              "SALES_GROUP",
              "SEAT_CONFIG",
              "SEAT_CHART",
              "SUB_DETAIL",
              "TOKEN_ASSIGNMENT_INVITE_GROUP"
            ]
          }
        }
      },
      "HasPermissionsResponse": {
        "type": "object",
        "required": [
          "actionPermissions"
        ],
        "properties": {
          "actionPermissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCESS_CONTROL_MANAGE_ACCESS",
                "ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED",
                "ACCESS_CONTROL_DOWNLOAD_MANIFEST",
                "ADMIN_USER_READ_PROFILE",
                "ADMIN_USER_CREATE_PROFILE",
                "ADMIN_USER_LOGOUT",
                "ADMIN_RESEND_NOTIFICATIONS",
                "BOX_OFFICE_ACCESS",
                "BOX_OFFICE_USER_SEARCH",
                "BOX_OFFICE_SALE",
                "BOX_OFFICE_CONFIG_SET",
                "BOX_OFFICE_CONFIG_READ",
                "BOX_OFFICE_READ_DEVICES",
                "BOX_OFFICE_MANAGE_DEVICES",
                "BOX_OFFICE_REPORTING",
                "CLIENT_READ_PROFILE",
                "CLIENT_CREATE_PROFILE",
                "CLIENT_CREATE_GATEWAY",
                "CLIENT_UPDATE_GATEWAY",
                "CLIENT_UPDATE_PROFILE",
                "CLIENT_MANAGE_WHITELABEL",
                "CLIENT_LIST_ALL",
                "CLIENT_UPDATE_FEATURES",
                "CLIENT_USERS_LIST",
                "CLIENT_USER_CLIENT_INVITE_CREATE",
                "CLIENT_USER_CLIENT_INVITE_REVOKE",
                "CLIENT_USER_CLIENT_INVITE_RESEND",
                "CLIENT_USER_CLIENT_INVITE_LIST",
                "CLIENT_USER_CLIENT_CONFIG_UPDATE",
                "CLIENT_USER_CLIENT_CONFIG_DELETE",
                "CLIENT_PRECONFIGURED_FEE_CREATE",
                "CLIENT_PRECONFIGURED_FEE_READ",
                "FEE_SET",
                "CLIENT_REFUND_FEE_SET",
                "CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE",
                "CLIENT_USER_ACTIVITY_INVALIDATE_CACHE",
                "CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE",
                "CLIENT_USER_CREATE_PROFILE",
                "CLIENT_USER_LOGOUT",
                "CLIENT_USER_READ_PROFILE",
                "CLIENT_USER_SET_PASSWORD",
                "CLIENT_USER_UPDATE_PROFILE",
                "DISCOUNT_CREATE",
                "DISCOUNT_UPDATE",
                "DISCOUNT_READ",
                "DISCOUNT_REPORTING",
                "EVENT_ANALYTICS_TRACKER_READ",
                "EVENT_ANALYTICS_TRACKER_UPDATE",
                "EVENT_CANCEL",
                "EVENT_CREATE_PROFILE",
                "EVENT_CLONE",
                "EVENT_POSTPONE",
                "EVENT_READ_FINANCE_DATA",
                "EVENT_READ_PROFILE",
                "EVENT_DISPLAY_PROFILE",
                "EVENT_SET_TRANSLATIONS",
                "EVENT_UPDATE_PROFILE",
                "EVENT_READ_PROFILE_WITH_SALES",
                "EVENT_LIST",
                "EVENT_NOTIFICATIONS_READ",
                "EVENT_NOTIFICATIONS_CREATE",
                "EVENT_NOTIFICATIONS_UPDATE",
                "EVENT_NOTIFICATIONS_DELETE",
                "EXCHANGE_CONFIG_WRITE",
                "EXCHANGE_CONFIG_READ",
                "EXCHANGE_PRIMARY_BULK_FILL_WRITE",
                "EXCHANGE_PRIMARY_BULK_FILL_READ",
                "SUB_DETAIL_CREATE",
                "SUB_DETAIL_UPDATE",
                "SUB_DETAIL_DELETE",
                "EVENT_TIMELINE_CREATE",
                "EVENT_TIMELINE_UPDATE",
                "EVENT_TIMELINE_DELETE",
                "EVENT_TIMELINE_GROUP_UPDATE",
                "EVENT_GET_EXTERNAL_NOTIFICATION_SUBSCRIBERS",
                "EVENT_AFFILIATE_CODE_CREATE",
                "EVENT_AFFILIATE_CODE_UPDATE",
                "EVENT_AFFILIATE_CODE_READ",
                "EVENT_DRAFT_CREATE",
                "EVENT_DRAFT_UPDATE",
                "EVENT_DRAFT_DELETE",
                "EVENT_DRAFT_REVIEW_SUBMIT",
                "EVENT_DRAFT_REVIEW_CANCEL",
                "EVENT_DRAFT_REVIEW_APPROVE",
                "EVENT_DRAFT_LIST",
                "EVENT_DRAFT_READ",
                "EVENT_COLLAB_INVITE_CREATE",
                "EVENT_COLLAB_INVITE_REVOKE",
                "EVENT_COLLAB_INVITE_RESEND",
                "EVENT_COLLAB_INVITE_ACCEPT",
                "EVENT_COLLAB_INVITE_READ",
                "EVENT_COLLAB_INVITE_LIST",
                "EVENT_COLLAB_INVITE_APPROVE",
                "EVENT_COLLAB_INVITE_REJECT",
                "EVENT_COLLAB_ASSIGN_ROLE",
                "EVENT_COLLAB_USERS_LIST",
                "EVENT_COLLAB_USERS_INTERNAL_ADD",
                "EVENT_COLLAB_USER_REMOVE",
                "EVENT_COLLAB_USER_UPDATE",
                "EVENT_MEDIA_UPDATE",
                "FIREBASE_LOGIN_CLIENT_USER",
                "INVENTORY_WRITE",
                "INVENTORY_READ",
                "INVENTORY_UPDATE_VALIDITY",
                "INVENTORY_CATEGORY_WRITE",
                "INVENTORY_CATEGORY_READ",
                "INVENTORY_CHOICE_SET_WRITE",
                "INVENTORY_CHOICE_SET_READ",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_WRITE",
                "INVENTORY_CATEGORY_CHOICE_CONFIG_READ",
                "LOCATION_CITY_CREATE",
                "LOCATION_CITY_READ",
                "LOCATION_COUNTRY_CREATE",
                "LOCATION_COUNTRY_READ",
                "LOCATION_GEO_REGION_CREATE",
                "LOCATION_GEO_REGION_READ",
                "LOCATION_PROFILE_CREATE",
                "LOCATION_PROFILE_UPDATE",
                "LOCATION_PROFILE_READ",
                "LOCATION_PROFILE_SET_TRANSLATIONS",
                "LOCATION_UPDATE_PROFILE",
                "LOCATION_SEAT_CONFIG_CREATE",
                "LOCATION_SEAT_CONFIG_READ",
                "LOCATION_SEAT_CONFIG_UPDATE",
                "LOCATION_TYPE_CREATE",
                "LOCATION_TYPE_READ",
                "LOCATION_TYPE_UPDATE",
                "LIVE_CONFERENCE_MANAGE",
                "LIVE_CONFERENCE_READ",
                "MARKETPLACE_CANCEL",
                "MARKETPLACE_CREATE",
                "MARKETPLACE_READ",
                "MARKETPLACE_RUN_JOBS",
                "MARKETPLACE_UPDATE",
                "MARKETPLACE_DELETE",
                "MARKETPLACE_OFFER_OWNED_TOKEN_REFUND",
                "MEDIA_READ",
                "MEDIA_CREATE",
                "NOTIFICATIONS_SEND_CUSTOM_EMAIL",
                "NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST",
                "NOTIFICATIONS_TEST",
                "NOTIFICATIONS_CREATE",
                "OFFER_REFUND",
                "OFFER_GROUP_CANCEL",
                "OFFER_GROUP_CREATE",
                "OFFER_GROUP_UPDATE",
                "OFFER_GROUP_DELETE",
                "CUSTOMER_ORDER_LIST_READ",
                "CUSTOM_ORDER_LIST_GLOBAL_SEARCH",
                "PERFORMER_CREATE_PROFILE",
                "PERFORMER_UPDATE_PROFILE",
                "PERFORMER_SET_TRANSLATIONS",
                "PROMOTER_ASSIGN",
                "PROMOTER_READ",
                "READ_ACCESS_CONTROL_DATA",
                "READ_ACCESS_CONTROL_SUMMARY_DATA",
                "REPORTING_ACCESS_CONTROL_DATA",
                "REPORTING_READ_SALES_DATA",
                "REPORTING_READ_SALES_DATA_DATE_RANGE",
                "REPORTING_READ_CLIENT_FEES_DATA",
                "REPORTING_READ_TRANSACTIONS_DATA",
                "REPORTING_DISPLAY_REPORTS",
                "REPORTING_S3_EXPORT",
                "SALES_GROUP_READ",
                "SALES_GROUP_CREATE",
                "SALES_GROUP_UPDATE",
                "SEAT_CONFIGURATION_READ",
                "SEAT_CONFIGURATION_CREATE",
                "SPONSOR_CREATE",
                "SPONSOR_READ",
                "SPONSOR_GROUP_SET",
                "STREAM_INFRA_MANAGE",
                "STREAM_INFRA_READ",
                "TOUR_CREATE",
                "TOUR_SET_TRANSLATIONS",
                "TOUR_UPDATE",
                "USER_BLACKLIST_PROFILE",
                "USER_CREATE_PROFILE",
                "USER_SEARCH_PROFILE",
                "USER_UPDATE_PROFILE",
                "READ_ACCESS_CONTROL_RESTRICTIONS",
                "WRITE_ACCESS_CONTROL_RESTRICTIONS",
                "USER_PAYMENT_MEANS_UPDATE",
                "USER_TRANSACTIONS_READ"
              ]
            }
          }
        }
      },
      "HasPermissionsResponseV2": {
        "type": "object",
        "required": [
          "resourceIdToActions",
          "resourceType"
        ],
        "properties": {
          "resourceIdToActions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCESS_CONTROL_MANAGE_ACCESS",
                  "ACCESS_CONTROL_MANAGE_ACCESS_PRIVILEGED",
                  "ACCESS_CONTROL_DOWNLOAD_MANIFEST",
                  "ADMIN_USER_READ_PROFILE",
                  "ADMIN_USER_CREATE_PROFILE",
                  "ADMIN_USER_LOGOUT",
                  "ADMIN_RESEND_NOTIFICATIONS",
                  "BOX_OFFICE_ACCESS",
                  "BOX_OFFICE_USER_SEARCH",
                  "BOX_OFFICE_SALE",
                  "BOX_OFFICE_CONFIG_SET",
                  "BOX_OFFICE_CONFIG_READ",
                  "BOX_OFFICE_READ_DEVICES",
                  "BOX_OFFICE_MANAGE_DEVICES",
                  "BOX_OFFICE_REPORTING",
                  "CLIENT_READ_PROFILE",
                  "CLIENT_CREATE_PROFILE",
                  "CLIENT_CREATE_GATEWAY",
                  "CLIENT_UPDATE_GATEWAY",
                  "CLIENT_UPDATE_PROFILE",
                  "CLIENT_MANAGE_WHITELABEL",
                  "CLIENT_LIST_ALL",
                  "CLIENT_UPDATE_FEATURES",
                  "CLIENT_USERS_LIST",
                  "CLIENT_USER_CLIENT_INVITE_CREATE",
                  "CLIENT_USER_CLIENT_INVITE_REVOKE",
                  "CLIENT_USER_CLIENT_INVITE_RESEND",
                  "CLIENT_USER_CLIENT_INVITE_LIST",
                  "CLIENT_USER_CLIENT_CONFIG_UPDATE",
                  "CLIENT_USER_CLIENT_CONFIG_DELETE",
                  "CLIENT_PRECONFIGURED_FEE_CREATE",
                  "CLIENT_PRECONFIGURED_FEE_READ",
                  "FEE_SET",
                  "CLIENT_REFUND_FEE_SET",
                  "CLIENT_PRECONFIGURED_PAYMENT_CONFIGURATION_CREATE",
                  "CLIENT_USER_ACTIVITY_INVALIDATE_CACHE",
                  "CLIENT_NOTIFICATIONS_TRANSLATIONS_INVALIDATE_CACHE",
                  "CLIENT_USER_CREATE_PROFILE",
                  "CLIENT_USER_LOGOUT",
                  "CLIENT_USER_READ_PROFILE",
                  "CLIENT_USER_SET_PASSWORD",
                  "CLIENT_USER_UPDATE_PROFILE",
                  "DISCOUNT_CREATE",
                  "DISCOUNT_UPDATE",
                  "DISCOUNT_READ",
                  "DISCOUNT_REPORTING",
                  "EVENT_ANALYTICS_TRACKER_READ",
                  "EVENT_ANALYTICS_TRACKER_UPDATE",
                  "EVENT_CANCEL",
                  "EVENT_CREATE_PROFILE",
                  "EVENT_CLONE",
                  "EVENT_POSTPONE",
                  "EVENT_READ_FINANCE_DATA",
                  "EVENT_READ_PROFILE",
                  "EVENT_DISPLAY_PROFILE",
                  "EVENT_SET_TRANSLATIONS",
                  "EVENT_UPDATE_PROFILE",
                  "EVENT_READ_PROFILE_WITH_SALES",
                  "EVENT_LIST",
                  "EVENT_NOTIFICATIONS_READ",
                  "EVENT_NOTIFICATIONS_CREATE",
                  "EVENT_NOTIFICATIONS_UPDATE",
                  "EVENT_NOTIFICATIONS_DELETE",
                  "EXCHANGE_CONFIG_WRITE",
                  "EXCHANGE_CONFIG_READ",
                  "EXCHANGE_PRIMARY_BULK_FILL_WRITE",
                  "EXCHANGE_PRIMARY_BULK_FILL_READ",
                  "SUB_DETAIL_CREATE",
                  "SUB_DETAIL_UPDATE",
                  "SUB_DETAIL_DELETE",
                  "EVENT_TIMELINE_CREATE",
                  "EVENT_TIMELINE_UPDATE",
                  "EVENT_TIMELINE_DELETE",
                  "EVENT_TIMELINE_GROUP_UPDATE",
                  "EVENT_GET_EXTERNAL_NOTIFICATION_SUBSCRIBERS",
                  "EVENT_AFFILIATE_CODE_CREATE",
                  "EVENT_AFFILIATE_CODE_UPDATE",
                  "EVENT_AFFILIATE_CODE_READ",
                  "EVENT_DRAFT_CREATE",
                  "EVENT_DRAFT_UPDATE",
                  "EVENT_DRAFT_DELETE",
                  "EVENT_DRAFT_REVIEW_SUBMIT",
                  "EVENT_DRAFT_REVIEW_CANCEL",
                  "EVENT_DRAFT_REVIEW_APPROVE",
                  "EVENT_DRAFT_LIST",
                  "EVENT_DRAFT_READ",
                  "EVENT_COLLAB_INVITE_CREATE",
                  "EVENT_COLLAB_INVITE_REVOKE",
                  "EVENT_COLLAB_INVITE_RESEND",
                  "EVENT_COLLAB_INVITE_ACCEPT",
                  "EVENT_COLLAB_INVITE_READ",
                  "EVENT_COLLAB_INVITE_LIST",
                  "EVENT_COLLAB_INVITE_APPROVE",
                  "EVENT_COLLAB_INVITE_REJECT",
                  "EVENT_COLLAB_ASSIGN_ROLE",
                  "EVENT_COLLAB_USERS_LIST",
                  "EVENT_COLLAB_USERS_INTERNAL_ADD",
                  "EVENT_COLLAB_USER_REMOVE",
                  "EVENT_COLLAB_USER_UPDATE",
                  "EVENT_MEDIA_UPDATE",
                  "FIREBASE_LOGIN_CLIENT_USER",
                  "INVENTORY_WRITE",
                  "INVENTORY_READ",
                  "INVENTORY_UPDATE_VALIDITY",
                  "INVENTORY_CATEGORY_WRITE",
                  "INVENTORY_CATEGORY_READ",
                  "INVENTORY_CHOICE_SET_WRITE",
                  "INVENTORY_CHOICE_SET_READ",
                  "INVENTORY_CATEGORY_CHOICE_CONFIG_WRITE",
                  "INVENTORY_CATEGORY_CHOICE_CONFIG_READ",
                  "LOCATION_CITY_CREATE",
                  "LOCATION_CITY_READ",
                  "LOCATION_COUNTRY_CREATE",
                  "LOCATION_COUNTRY_READ",
                  "LOCATION_GEO_REGION_CREATE",
                  "LOCATION_GEO_REGION_READ",
                  "LOCATION_PROFILE_CREATE",
                  "LOCATION_PROFILE_UPDATE",
                  "LOCATION_PROFILE_READ",
                  "LOCATION_PROFILE_SET_TRANSLATIONS",
                  "LOCATION_UPDATE_PROFILE",
                  "LOCATION_SEAT_CONFIG_CREATE",
                  "LOCATION_SEAT_CONFIG_READ",
                  "LOCATION_SEAT_CONFIG_UPDATE",
                  "LOCATION_TYPE_CREATE",
                  "LOCATION_TYPE_READ",
                  "LOCATION_TYPE_UPDATE",
                  "LIVE_CONFERENCE_MANAGE",
                  "LIVE_CONFERENCE_READ",
                  "MARKETPLACE_CANCEL",
                  "MARKETPLACE_CREATE",
                  "MARKETPLACE_READ",
                  "MARKETPLACE_RUN_JOBS",
                  "MARKETPLACE_UPDATE",
                  "MARKETPLACE_DELETE",
                  "MARKETPLACE_OFFER_OWNED_TOKEN_REFUND",
                  "MEDIA_READ",
                  "MEDIA_CREATE",
                  "NOTIFICATIONS_SEND_CUSTOM_EMAIL",
                  "NOTIFICATIONS_READ_CUSTOM_EMAIL_LIST",
                  "NOTIFICATIONS_TEST",
                  "NOTIFICATIONS_CREATE",
                  "OFFER_REFUND",
                  "OFFER_GROUP_CANCEL",
                  "OFFER_GROUP_CREATE",
                  "OFFER_GROUP_UPDATE",
                  "OFFER_GROUP_DELETE",
                  "CUSTOMER_ORDER_LIST_READ",
                  "CUSTOM_ORDER_LIST_GLOBAL_SEARCH",
                  "PERFORMER_CREATE_PROFILE",
                  "PERFORMER_UPDATE_PROFILE",
                  "PERFORMER_SET_TRANSLATIONS",
                  "PROMOTER_ASSIGN",
                  "PROMOTER_READ",
                  "READ_ACCESS_CONTROL_DATA",
                  "READ_ACCESS_CONTROL_SUMMARY_DATA",
                  "REPORTING_ACCESS_CONTROL_DATA",
                  "REPORTING_READ_SALES_DATA",
                  "REPORTING_READ_SALES_DATA_DATE_RANGE",
                  "REPORTING_READ_CLIENT_FEES_DATA",
                  "REPORTING_READ_TRANSACTIONS_DATA",
                  "REPORTING_DISPLAY_REPORTS",
                  "REPORTING_S3_EXPORT",
                  "SALES_GROUP_READ",
                  "SALES_GROUP_CREATE",
                  "SALES_GROUP_UPDATE",
                  "SEAT_CONFIGURATION_READ",
                  "SEAT_CONFIGURATION_CREATE",
                  "SPONSOR_CREATE",
                  "SPONSOR_READ",
                  "SPONSOR_GROUP_SET",
                  "STREAM_INFRA_MANAGE",
                  "STREAM_INFRA_READ",
                  "TOUR_CREATE",
                  "TOUR_SET_TRANSLATIONS",
                  "TOUR_UPDATE",
                  "USER_BLACKLIST_PROFILE",
                  "USER_CREATE_PROFILE",
                  "USER_SEARCH_PROFILE",
                  "USER_UPDATE_PROFILE",
                  "READ_ACCESS_CONTROL_RESTRICTIONS",
                  "WRITE_ACCESS_CONTROL_RESTRICTIONS",
                  "USER_PAYMENT_MEANS_UPDATE",
                  "USER_TRANSACTIONS_READ"
                ]
              },
              "uniqueItems": true
            }
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "AFFILIATE_CODE",
              "BULK_PRIMARY_FILL",
              "CLIENT",
              "CLIENT_USER_CLIENT_INVITE",
              "CUSTOMER_ORDER",
              "EVENT",
              "EVENT_DRAFT",
              "EVENT_COLLAB_INVITE",
              "EVENT_NOTIFICATION",
              "EVENT_TIMELINE",
              "EVENT_TIMELINE_GROUP",
              "DISCOUNT",
              "INVENTORY_ITEM",
              "INVENTORY_CATEGORY",
              "OFFER_GROUP",
              "OFFER",
              "MARKETPLACE",
              "LOCATION_PROFILE",
              "PURCHASE_TOKEN",
              "SALES_GROUP",
              "SEAT_CONFIG",
              "SEAT_CHART",
              "SUB_DETAIL",
              "TOKEN_ASSIGNMENT_INVITE_GROUP"
            ]
          }
        }
      },
      "HeaderInfoThymeLeaf": {
        "type": "object",
        "properties": {
          "headerImageHeight": {
            "type": "integer",
            "format": "int32"
          },
          "headerImageUrl": {
            "type": "string"
          },
          "headerImageWidth": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HlsId3SegmentTaggingScheduleActionSettings": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          }
        }
      },
      "HlsTimedMetadataScheduleActionSettings": {
        "type": "object",
        "properties": {
          "id3": {
            "type": "string"
          }
        }
      },
      "ImmediateModeScheduleActionStartSettings": {
        "type": "object"
      },
      "InitiateExternalPaymentBoxOfficeRequest": {
        "type": "object",
        "required": [
          "deviceId",
          "email",
          "generateQrCode",
          "pairingId",
          "purchaseToken"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createAccountRequest": {
            "$ref": "#/components/schemas/CreateAccountBoxOfficeRequest"
          },
          "creationRequestDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCreationRequestData"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "deviceId": {
            "description": "The id of the physical Square terminal device being used for checkout. This is the same as the device's serial number.",
            "type": "string"
          },
          "email": {
            "description": "The  email address of the customer on whose behalf the client user is attempting to make a transaction.",
            "type": "string"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "generateQrCode": {
            "description": "Whether or not a QR code should be generated upon successful transaction.",
            "type": "boolean"
          },
          "oldBidId": {
            "description": "ID of any bid that this purchase replaces. Used when Buy Now is triggered with an existing bid. The old bid will be cancelled.",
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "pairingId": {
            "description": "The id of a Square DeviceCode object, which acts as an account that a user needs to log into to accept payments.",
            "type": "string"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InitiateExternalPaymentCartRequest": {
        "type": "object",
        "required": [
          "purchaseToken"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creationRequestDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCreationRequestData"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "deviceId": {
            "description": "The id of the physical Square terminal device being used for checkout. This is the same as the device's serial number.",
            "type": "string"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "failureUrl": {
            "description": "The success callback url to call after payment fails.",
            "type": "string"
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "generateQrCode": {
            "description": "Whether or not a QR code should be generated upon successful transaction.",
            "type": "boolean"
          },
          "oldBidId": {
            "description": "ID of any bid that this purchase replaces. Used when Buy Now is triggered with an existing bid. The old bid will be cancelled.",
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodType": {
            "description": "The payment method type. Only types that initiate an external payment request are supported.",
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "successUrl": {
            "description": "The success callback url to call after payment is complete.",
            "type": "string"
          }
        }
      },
      "InitiateExternalPaymentRequest": {
        "type": "object",
        "required": [
          "offerGroupId",
          "purchaseToken",
          "seatCodes"
        ],
        "properties": {
          "checkedCheckboxIds": {
            "description": "The list of checked checkbox ids.",
            "type": "array",
            "items": {
              "description": "The list of checked checkbox ids.",
              "type": "string"
            }
          },
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "failureUrl": {
            "description": "The success callback url to call after payment fails.",
            "type": "string"
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodType": {
            "description": "The payment method type. Only types that initiate an external payment request are supported.",
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "seatCodes": {
            "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
            "type": "array",
            "items": {
              "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          },
          "successUrl": {
            "description": "The success callback url to call after payment is complete.",
            "type": "string"
          }
        }
      },
      "InitiateExternalPaymentResponse": {
        "type": "object",
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "externalPaymentUrl": {
            "type": "string"
          },
          "signedExternalPaymentKey": {
            "type": "string"
          },
          "squareData": {
            "$ref": "#/components/schemas/SquareInitiatePaymentData"
          },
          "stripeKlarnaData": {
            "$ref": "#/components/schemas/StripeKlarnaPaymentKeyData"
          }
        }
      },
      "InitiateResetPasswordClientUserRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          }
        }
      },
      "InitiateResetPasswordRequest": {
        "type": "object",
        "required": [
          "emailAddress"
        ],
        "properties": {
          "emailAddress": {
            "description": "The email address for the User's EnovLAB account",
            "type": "string"
          }
        }
      },
      "InputClippingSettings": {
        "type": "object",
        "properties": {
          "inputTimecodeSource": {
            "type": "string"
          },
          "startTimecode": {
            "$ref": "#/components/schemas/StartTimecode"
          },
          "stopTimecode": {
            "$ref": "#/components/schemas/StopTimecode"
          }
        }
      },
      "InputDestinationRequest": {
        "type": "object",
        "properties": {
          "streamName": {
            "type": "string"
          }
        }
      },
      "InputLocation": {
        "type": "object",
        "properties": {
          "passwordParam": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "InputPrepareScheduleActionSettings": {
        "type": "object",
        "properties": {
          "inputAttachmentNameReference": {
            "type": "string"
          },
          "inputClippingSettings": {
            "$ref": "#/components/schemas/InputClippingSettings"
          },
          "urlPath": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InputSwitchScheduleActionSettings": {
        "type": "object",
        "properties": {
          "inputAttachmentNameReference": {
            "type": "string"
          },
          "inputClippingSettings": {
            "$ref": "#/components/schemas/InputClippingSettings"
          },
          "urlPath": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InventoryCategoryDataThymeleaf": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string"
          },
          "inventoryCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InventoryCategoryEventStreamAccess": {
        "type": "object",
        "properties": {
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "maxSegment": {
            "type": "integer",
            "format": "int32"
          },
          "minSegment": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InventoryCategoryTagGroupTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventoryCategoryTagTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "valueJson": {
            "type": "string"
          }
        }
      },
      "InventoryCategoryTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "details": {
            "type": "string"
          },
          "emailMerchandiseDescription": {
            "type": "string"
          },
          "emailRules": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          }
        }
      },
      "InventoryCategoryUIDisplaySettings": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SHOW_ADDITIONAL_DETAILS_ON_LISTINGS",
                "SHOW_MORE_INFO_ICON_ON_LISTINGS",
                "SHOW_INVENTORY_CATEGORY_DETAIL_SCREEN",
                "PRICE_OVERRIDE",
                "PRICE_OVERRIDE_WARNING"
              ]
            }
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "InventoryChangeData": {
        "type": "object",
        "properties": {
          "inventoryDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChangeDataItem"
            }
          }
        }
      },
      "InventoryChangeDataItem": {
        "type": "object",
        "properties": {
          "changeFromCustomerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "changeFromOfferId": {
            "type": "integer",
            "format": "int64"
          },
          "changeToCustomerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "changeToOfferId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "purchaseTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InventoryChoiceRequest": {
        "type": "object",
        "properties": {
          "offerInventoryChoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          }
        }
      },
      "InventoryChoiceSetTranslation": {
        "description": "Translations for the choice set.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventoryChoiceTranslation": {
        "type": "object",
        "required": [
          "locale",
          "name"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventoryConfigurationGroupTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventoryGateDataThymeleaf": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "InventoryGroupingListResponse": {
        "type": "object",
        "properties": {
          "defaultSelectionGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSection"
            }
          }
        }
      },
      "InventoryItemCollectionThymeleaf": {
        "type": "object",
        "properties": {
          "categoryData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryDataThymeleaf"
            }
          },
          "gateData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryGateDataThymeleaf"
            },
            "uniqueItems": true
          },
          "inventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemThymeleaf"
            }
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventorySectionDataThymeleaf"
            }
          }
        }
      },
      "InventoryItemSeatingData": {
        "type": "object",
        "properties": {
          "row": {
            "$ref": "#/components/schemas/InventoryItemSeatingDataDetail"
          },
          "seat": {
            "$ref": "#/components/schemas/InventoryItemSeatingDataDetail"
          },
          "section": {
            "$ref": "#/components/schemas/InventoryItemSeatingDataDetail"
          }
        }
      },
      "InventoryItemSeatingDataDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "seatingChartId": {
            "type": "string"
          }
        }
      },
      "InventoryItemThymeleaf": {
        "type": "object",
        "properties": {
          "categoryDetails": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "gateNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryType": {
            "type": "string"
          },
          "rowName": {
            "type": "string"
          },
          "seatName": {
            "type": "string"
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "InventoryManifestItemResponse": {
        "type": "object",
        "properties": {
          "accessed": {
            "type": "boolean"
          },
          "assigneeUserId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryResponse": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "guestDateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "guestFirstName": {
            "type": "string"
          },
          "guestGender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "guestLastName": {
            "type": "string"
          },
          "inventoryCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "inventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "inviterUserId": {
            "type": "integer",
            "format": "int64"
          },
          "lastAccessed": {
            "type": "string",
            "format": "date-time"
          },
          "lastClientUserAction": {
            "type": "string",
            "enum": [
              "DECLINED",
              "FINAL_DECLINED",
              "CHECK_IN_GRANTED",
              "CHECK_IN_RESCAN",
              "ID_VERIFY",
              "PROFILE_PICTURE_VERIFY",
              "MERCHANDISE_PICKED_UP"
            ]
          },
          "lastClientUserActionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastClientUserActionReason": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandisePickedUp": {
            "type": "boolean"
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "pendingAssignmentEmail": {
            "type": "string"
          },
          "purchaserUserId": {
            "type": "integer",
            "format": "int64"
          },
          "row": {
            "type": "string"
          },
          "seat": {
            "type": "string"
          },
          "section": {
            "type": "string"
          },
          "selectedInventoryCategoryChoiceConfigurationResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedInventoryChoiceResponse"
            }
          },
          "selfAssignedUserId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "GUEST",
              "GUEST_CHILD"
            ]
          },
          "tokenValidationStatus": {
            "type": "string",
            "enum": [
              "VALID",
              "INVALID"
            ]
          },
          "userCheckInInfo": {
            "$ref": "#/components/schemas/UserCheckInInfoLogResponse"
          }
        }
      },
      "InventoryManifestResponse": {
        "type": "object",
        "properties": {
          "inventoryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryManifestItemResponse"
            }
          },
          "processedGuids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlOfflineBatchGuid"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryManifestUser"
            }
          }
        }
      },
      "InventoryManifestUser": {
        "type": "object",
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "lastName": {
            "type": "string"
          },
          "pictureVerified": {
            "type": "boolean"
          },
          "userEventKey": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InventoryReference": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "codeType": {
            "type": "string",
            "enum": [
              "SECTION",
              "ROW",
              "SEAT"
            ]
          }
        }
      },
      "InventoryReferenceV2": {
        "description": "Cannot be used together with inventoryCount.",
        "type": "object",
        "required": [
          "codeType"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "codeType": {
            "type": "string",
            "enum": [
              "SECTION",
              "ROW",
              "SEAT"
            ]
          },
          "seasonMembershipParentInventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "seatingChartId": {
            "type": "string"
          }
        }
      },
      "InventoryRowDataThymeleaf": {
        "type": "object",
        "properties": {
          "rowName": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemThymeleaf"
            }
          }
        }
      },
      "InventoryRowTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventorySeatTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventorySectionDataThymeleaf": {
        "type": "object",
        "properties": {
          "gaInventoryItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItemThymeleaf"
            }
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryRowDataThymeleaf"
            }
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "InventorySectionRequest": {
        "type": "object",
        "properties": {
          "sectionInventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          }
        }
      },
      "InventorySectionTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "InventorySummary": {
        "description": "Count and price details of sold inventory in the group.",
        "type": "object",
        "properties": {
          "averagePrice": {
            "type": "number"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "maxPrice": {
            "type": "number"
          },
          "minPrice": {
            "type": "number"
          }
        }
      },
      "ListAvailableSeatDataRequest": {
        "type": "object",
        "properties": {
          "fetchEventSeatMap": {
            "type": "boolean"
          },
          "marketplaceCodeRequests": {
            "description": "Marketplace access codes and event ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "Range of public marketplaces to select offer groups from",
            "type": "array",
            "items": {
              "description": "Range of public marketplaces to select offer groups from",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ListBidsRequest": {
        "type": "object",
        "properties": {
          "eventDateFilterType": {
            "type": "string",
            "enum": [
              "NONE",
              "CURRENT_AND_FUTURE",
              "PAST"
            ]
          },
          "eventIdFilters": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "matchCriteriaFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidMatchCriteria"
            },
            "uniqueItems": true
          },
          "requestId": {
            "type": "string"
          },
          "statusFilters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OPEN",
                "FAILED",
                "CANCELLED",
                "FILLED",
                "EXPIRED"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "ListBidsResponse": {
        "type": "object",
        "properties": {
          "bids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          }
        }
      },
      "ListBoxOfficePaymentDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBoxOfficePaymentDeviceResponse"
            }
          }
        }
      },
      "ListBoxOfficePrintersResponse": {
        "type": "object",
        "properties": {
          "printers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBoxOfficePrinterResponse"
            }
          }
        }
      },
      "ListBulkPrimaryFillPreviewsResponse": {
        "type": "object",
        "properties": {
          "previews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBulkPrimaryFillPreviewResponse"
            }
          }
        }
      },
      "ListBulkPrimaryFillResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBulkPrimaryFillResultResponse"
            }
          }
        }
      },
      "ListBulkPrimaryFillSimsRequest": {
        "type": "object",
        "properties": {
          "bulkPrimaryFills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkPrimaryFillRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "ListBulkPrimaryFillSimsResponse": {
        "type": "object",
        "properties": {
          "sims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBulkPrimaryFillSimResponse"
            }
          }
        }
      },
      "ListCitiesRequest": {
        "type": "object",
        "properties": {
          "cityIds": {
            "description": "Specific cities to list.",
            "type": "array",
            "items": {
              "description": "Specific cities to list.",
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "geoRegionId": {
            "description": "The ID of the Geo Region to list Cities for.",
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "ListMevDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMevDeviceResponse"
            }
          }
        }
      },
      "ListUpgradeOptionsSeatDataRequest": {
        "type": "object",
        "properties": {
          "fetchEventSeatMap": {
            "type": "boolean"
          },
          "marketplaceCodeRequests": {
            "description": "Marketplace access codes and event ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "Range of public marketplaces to select offer groups from",
            "type": "array",
            "items": {
              "description": "Range of public marketplaces to select offer groups from",
              "type": "integer",
              "format": "int64"
            }
          },
          "upgradeOfferSourceRequest": {
            "$ref": "#/components/schemas/UpgradeOfferSourceRequest"
          }
        }
      },
      "LiveConferenceAcceptResponse": {
        "type": "object",
        "properties": {
          "liveConferenceRoomExternalId": {
            "type": "string"
          },
          "liveConferenceToken": {
            "type": "string"
          }
        }
      },
      "LiveConferenceCandidateResponse": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string"
          },
          "disconnectedTime": {
            "type": "string",
            "format": "date-time"
          },
          "firstName": {
            "type": "string"
          },
          "millisInLiveRoom": {
            "type": "integer",
            "format": "int64"
          },
          "millisInLobby": {
            "type": "integer",
            "format": "int64"
          },
          "numDisconnects": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "INVITED",
              "ACCEPTED",
              "WAITING",
              "LIVE",
              "REJECTED",
              "LEFT",
              "EXPIRED",
              "KICKED",
              "ENDED"
            ]
          },
          "statusTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LiveConferenceCandidateStatsResponse": {
        "type": "object",
        "properties": {
          "numInvited": {
            "type": "integer",
            "format": "int32"
          },
          "numWaitingPriority0": {
            "type": "integer",
            "format": "int32"
          },
          "numWaitingPriority1": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LiveConferenceCandidatesResponse": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveConferenceCandidateResponse"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LiveConferenceConfigResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteExpirationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "maxSetupSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitingRoomDisconnectSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitingRoomDisconnects": {
            "type": "integer",
            "format": "int32"
          },
          "maxWaitingRoomParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "meetingName": {
            "type": "string"
          },
          "minWaitingRoomSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "notPreviouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "previouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "roomId": {
            "type": "string"
          }
        }
      },
      "LiveConferenceFinishedSetupResponse": {
        "type": "object",
        "properties": {
          "liveConferenceApiUrl": {
            "type": "string"
          },
          "liveConferenceRoomExternalId": {
            "type": "string"
          },
          "liveConferenceTenantNetworkId": {
            "type": "integer",
            "format": "int32"
          },
          "liveConferenceToken": {
            "type": "string"
          }
        }
      },
      "LiveConferenceInfoResponse": {
        "type": "object",
        "properties": {
          "candidateStats": {
            "$ref": "#/components/schemas/LiveConferenceCandidateStatsResponse"
          },
          "conferenceConfig": {
            "$ref": "#/components/schemas/LiveConferenceConfigResponse"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "vanityName": {
            "type": "string"
          },
          "viewerStats": {
            "$ref": "#/components/schemas/LiveConferenceViewerStatsResponse"
          }
        }
      },
      "LiveConferenceRegistrationResponse": {
        "type": "object",
        "properties": {
          "continuePolling": {
            "type": "boolean"
          },
          "invitationExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "nextPollTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_INVITED",
              "INVITED",
              "ACCEPTED",
              "WAITING",
              "LIVE",
              "REJECTED",
              "LEFT",
              "EXPIRED",
              "KICKED"
            ]
          }
        }
      },
      "LiveConferenceRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "supportsAcceptedState": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorAddUsersRequest": {
        "type": "object",
        "properties": {
          "Credentials": {
            "$ref": "#/components/schemas/LiveConferenceVendorRequestCredentials"
          },
          "Event": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveConferenceVendorNewUser"
            }
          }
        }
      },
      "LiveConferenceVendorAddUsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddUserResult"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorGetUsersRequest": {
        "type": "object",
        "properties": {
          "Credentials": {
            "$ref": "#/components/schemas/LiveConferenceVendorRequestCredentials"
          },
          "Event": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "includeOfflineSessions": {
            "type": "boolean"
          },
          "includeRemovedSessions": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorGetUsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConferenceVendorUser"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorNewUser": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LiveConferenceVendorRemoveUsersRequest": {
        "type": "object",
        "properties": {
          "Credentials": {
            "$ref": "#/components/schemas/LiveConferenceVendorRequestCredentials"
          },
          "Event": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "allUsers": {
            "type": "boolean"
          },
          "tokenIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      },
      "LiveConferenceVendorRemoveUsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoveUserResult"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorRequestCredentials": {
        "type": "object",
        "properties": {
          "adminToken": {
            "type": "string"
          },
          "roomId": {
            "type": "string"
          },
          "tenantRootNetworkId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LiveConferenceVendorSetApiEventHookRequest": {
        "type": "object",
        "properties": {
          "Credentials": {
            "$ref": "#/components/schemas/LiveConferenceVendorRequestCredentials"
          },
          "Event": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/EventHookRequestStructure"
          }
        }
      },
      "LiveConferenceVendorSetApiEventHookResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorSetUsersPriorityRequest": {
        "type": "object",
        "properties": {
          "Credentials": {
            "$ref": "#/components/schemas/LiveConferenceVendorRequestCredentials"
          },
          "Event": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveConferenceVendorUserPriority"
            }
          }
        }
      },
      "LiveConferenceVendorSetUsersPriorityResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetUserPriorityResult"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LiveConferenceVendorUserPriority": {
        "type": "object",
        "properties": {
          "sessionPriority": {
            "type": "integer",
            "format": "int32"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "LiveConferenceViewerStatsResponse": {
        "type": "object",
        "properties": {
          "numInvitable": {
            "type": "integer",
            "format": "int32"
          },
          "numRecent": {
            "type": "integer",
            "format": "int32"
          },
          "numTotal": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "cityName": {
            "type": "string"
          },
          "countryIsoCode": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "geoRegionName": {
            "type": "string"
          }
        }
      },
      "LocationFilter": {
        "type": "object",
        "properties": {
          "cityId": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "radiusInMeters": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "LocationGateResponse": {
        "description": "The list of gates for this offer group",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "LocationProfile": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "id": {
            "description": "The ID for the location profile profile",
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileMl"
            }
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "LocationProfileGateTranslation": {
        "description": "The translations for the gate.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "LocationProfileMl": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationProfileResponse": {
        "description": "The performer's primary locations",
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "cityId": {
            "type": "string"
          },
          "cityName": {
            "type": "string"
          },
          "countryId": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "description": {
            "type": "string"
          },
          "geoLocationId": {
            "type": "string"
          },
          "geoLocationName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "latitude": {
            "type": "number"
          },
          "locationName": {
            "type": "string"
          },
          "locationTypeName": {
            "type": "string"
          },
          "longitude": {
            "type": "number"
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "socialMediaInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaResponse"
            }
          },
          "translation": {
            "$ref": "#/components/schemas/LocationProfileMl"
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "LocationProfileTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "LocationType": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID for the location profile type",
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationTypeMl"
            }
          }
        }
      },
      "LocationTypeMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "locationTypeName": {
            "type": "string"
          }
        }
      },
      "LocationTypeTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "LockingCartCheckoutRequest": {
        "type": "object",
        "required": [
          "previousPurchaseToken"
        ],
        "properties": {
          "checkoutRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockingPurchaseCheckoutRequest"
            }
          },
          "discountCode": {
            "type": "string"
          },
          "offerGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "previousPurchaseToken": {
            "description": "The purchase token already returned from a previous checkout. This will be used tounlock that inventory before locking the new list of seat codes provided.",
            "type": "string"
          }
        }
      },
      "LockingCartPurchaseCheckoutResponse": {
        "type": "object",
        "properties": {
          "baseCheckoutResponse": {
            "$ref": "#/components/schemas/CartCheckoutResponse"
          },
          "cartCheckoutPriceModificationResponse": {
            "$ref": "#/components/schemas/CartCheckoutPriceModificationResponse"
          },
          "purchaseToken": {
            "description": "The token used to complete the purchase.",
            "type": "string"
          },
          "tokenExpiration": {
            "description": "The time when the token will expire.",
            "type": "string",
            "format": "date-time"
          },
          "userCheckoutInfo": {
            "$ref": "#/components/schemas/UserCheckoutInfo"
          }
        }
      },
      "LockingPurchaseCheckoutRequest": {
        "type": "object",
        "properties": {
          "inventoryChoiceIds": {
            "description": "The choice config of this purchase.",
            "type": "array",
            "items": {
              "description": "The choice config of this purchase.",
              "type": "integer",
              "format": "int64"
            }
          },
          "numTokens": {
            "description": "The number of tokens to purchase.",
            "type": "integer",
            "format": "int32"
          },
          "offerGroupId": {
            "description": "ID of the offer group for which this purchase request applies to",
            "type": "integer",
            "format": "int64"
          },
          "offerPerTokenPrice": {
            "description": "The price per token to purchase.",
            "type": "number"
          },
          "requestGuid": {
            "type": "string"
          },
          "seatCodes": {
            "description": "The list of seat codes to lock for purchase.",
            "type": "array",
            "items": {
              "description": "The list of seat codes to lock for purchase.",
              "type": "string"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "upgradeCheckoutRequest": {
            "$ref": "#/components/schemas/OfferUpgradeCheckoutRequest"
          },
          "userDisplayedPrice": {
            "type": "number"
          }
        }
      },
      "LoginOrCreateAccountAndAcceptClientInviteRequest": {
        "type": "object",
        "required": [
          "acceptanceCode",
          "inviteId",
          "password"
        ],
        "properties": {
          "acceptanceCode": {
            "type": "string"
          },
          "createAccount": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "emailAddress",
          "password"
        ],
        "properties": {
          "emailAddress": {
            "description": "The email address the user is choosing to create an account",
            "type": "string"
          },
          "password": {
            "description": "The password selected by the user",
            "type": "string"
          }
        }
      },
      "MajorCategory": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID for the major category",
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "majorCategoryName": {
            "description": "The name of the major category",
            "type": "string"
          }
        }
      },
      "MajorCategoryResponse": {
        "description": "The name of the parent major category",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id of this category",
            "type": "string"
          },
          "majorCategoryName": {
            "description": "The name of this category",
            "type": "string"
          }
        }
      },
      "MarketplaceActivityStatusResponse": {
        "type": "object",
        "properties": {
          "earliestOfferDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MarketplaceCategoryPriceResponse": {
        "description": "Pricing details of inventory in the given category.",
        "type": "object",
        "properties": {
          "hasArtistOfferGroups": {
            "description": "Whether the given category has artist listings with available tokens",
            "type": "boolean"
          },
          "hasResaleOfferGroups": {
            "description": "Whether the given category has resale listings with available tokens",
            "type": "boolean"
          },
          "maxPrice": {
            "description": "The maximum price for tokens in this category in any offer group",
            "type": "number"
          },
          "minPrice": {
            "description": "The minimum price for tokens in this category in any offer group",
            "type": "number"
          }
        }
      },
      "MarketplaceDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "childMarketplace": {
            "type": "boolean"
          },
          "exchangeMarketplace": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceEndCalculateWinnersDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "marketplaceEndDate": {
            "type": "string"
          },
          "marketplaceEndTime": {
            "type": "string"
          },
          "marketplaceEndTimeZone": {
            "type": "string"
          },
          "marketplaceForceAllocationDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "marketplaceRules": {
            "type": "string"
          },
          "marketplaceStartDate": {
            "type": "string"
          },
          "marketplaceStartTime": {
            "type": "string"
          },
          "marketplaceStartTimeZone": {
            "type": "string"
          },
          "marketplaceType": {
            "type": "string"
          },
          "marketplaceTypeDisplayString": {
            "type": "string"
          }
        }
      },
      "MarketplaceRequest": {
        "type": "object",
        "required": [
          "endDateTime",
          "eventId",
          "marketplaceType",
          "startDateTime"
        ],
        "properties": {
          "capacityDefaultString": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "displayOptions": {
            "type": "string"
          },
          "endCalculateWinnersDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "forceAllocationDate": {
            "type": "string",
            "format": "date-time"
          },
          "forceAutoPay": {
            "type": "boolean"
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceType": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "maxManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "rules": {
            "type": "string"
          },
          "shippingMethod": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MarketplaceRescheduleRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "endCalculateWinnersDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "forceAllocationDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MarketplaceResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "The code that grants access to this private marketplace. This is not a private marketplace if the code is null",
            "type": "string"
          },
          "displayOptions": {
            "description": "The display options for the marketplace",
            "type": "string"
          },
          "draftMode": {
            "description": "The draft mode for the marketplace",
            "type": "boolean"
          },
          "endDateTime": {
            "description": "Overall end for this marketplace",
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "description": "The ID for the event associated with this marketplace",
            "type": "integer",
            "format": "int64"
          },
          "forceAllocationTime": {
            "description": "The time to force allocation for the marketplace",
            "type": "string",
            "format": "date-time"
          },
          "forceAutoPay": {
            "description": "Does this marketplace force auto pay",
            "type": "boolean"
          },
          "id": {
            "description": "The ID for the marketplace",
            "type": "integer",
            "format": "int64"
          },
          "maxManualPaymentDurationSeconds": {
            "description": "The max amount of time people have to pay manual payments for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "description": "The min amount of time people have to pay manual payments for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name for this row",
            "type": "string"
          },
          "rules": {
            "description": "Rules for this marketplace",
            "type": "string"
          },
          "shippingMethod": {
            "description": "The shipping method for the marketplace",
            "type": "string"
          },
          "startDateTime": {
            "description": "Overall start time for this marketplace",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "description": "The marketplace state",
            "type": "string",
            "enum": [
              "CANCELLED",
              "PAUSED",
              "WINNERS_SELECTED",
              "ALLOCATE_READY"
            ]
          },
          "ticketLimit": {
            "description": "The ticket limit for the marketplace",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "description": "The marketplace type",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          }
        }
      },
      "MarketplaceSalesOverTimeRequest": {
        "type": "object",
        "properties": {
          "aggregation": {
            "type": "string",
            "enum": [
              "GENDER",
              "AGE_RANGE",
              "CATEGORY"
            ]
          },
          "begin": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "filterCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "filterCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "interval": {
            "$ref": "#/components/schemas/DateHistogramInterval"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "timeZone": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "rules": {
                "type": "object",
                "properties": {
                  "fixedOffset": {
                    "type": "boolean"
                  },
                  "transitionRules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dayOfMonthIndicator": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "dayOfWeek": {
                          "type": "string",
                          "enum": [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY"
                          ]
                        },
                        "localTime": {
                          "$ref": "#/components/schemas/LocalTime"
                        },
                        "midnightEndOfDay": {
                          "type": "boolean"
                        },
                        "month": {
                          "type": "string",
                          "enum": [
                            "JANUARY",
                            "FEBRUARY",
                            "MARCH",
                            "APRIL",
                            "MAY",
                            "JUNE",
                            "JULY",
                            "AUGUST",
                            "SEPTEMBER",
                            "OCTOBER",
                            "NOVEMBER",
                            "DECEMBER"
                          ]
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "standardOffset": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "timeDefinition": {
                          "type": "string",
                          "enum": [
                            "UTC",
                            "WALL",
                            "STANDARD"
                          ]
                        }
                      }
                    }
                  },
                  "transitions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dateTimeAfter": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "dateTimeBefore": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "duration": {
                          "type": "object",
                          "properties": {
                            "nano": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "negative": {
                              "type": "boolean"
                            },
                            "seconds": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "units": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dateBased": {
                                    "type": "boolean"
                                  },
                                  "durationEstimated": {
                                    "type": "boolean"
                                  },
                                  "timeBased": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "zero": {
                              "type": "boolean"
                            }
                          }
                        },
                        "gap": {
                          "type": "boolean"
                        },
                        "instant": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "overlap": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MarketplaceSalesOverTimeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ESearchBucket"
            }
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MarketplaceTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "capacityDefaultString": {
            "type": "string"
          },
          "displayOptions": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "resaleForbiddenString": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          }
        }
      },
      "MarketplaceTranslationsRequest": {
        "type": "object",
        "required": [
          "marketplaceId",
          "marketplaceTranslationRequestItemList"
        ],
        "properties": {
          "marketplaceId": {
            "type": "string"
          },
          "marketplaceTranslationRequestItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceTranslation"
            }
          }
        }
      },
      "MarketplaceUpdateRequest": {
        "type": "object",
        "required": [
          "endDateTime",
          "eventId",
          "id",
          "marketplaceType",
          "startDateTime"
        ],
        "properties": {
          "capacityDefaultString": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "displayOptions": {
            "type": "string"
          },
          "endCalculateWinnersDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "forceAllocationDate": {
            "type": "string",
            "format": "date-time"
          },
          "forceAutoPay": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceType": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "maxManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "rules": {
            "type": "string"
          },
          "shippingMethod": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Media": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "mediaSubType": {
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "shortDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaMl"
            }
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MediaLiveInfoResponse": {
        "type": "object",
        "properties": {
          "attachedInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaLiveInputInfoResponse"
            }
          },
          "channelName": {
            "type": "string"
          },
          "channelState": {
            "type": "string"
          },
          "scheduledActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleAction"
            }
          }
        }
      },
      "MediaLiveInputInfoResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MediaMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "MediaPackageEndpointResponse": {
        "type": "object",
        "properties": {
          "drmAssetId": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "MediaPackageInfoResponse": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaPackageEndpointResponse"
            }
          }
        }
      },
      "MediaResponse": {
        "type": "object",
        "properties": {
          "height": {
            "description": "The height in pixels of this media item",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID of this media item",
            "type": "string"
          },
          "longDescription": {
            "description": "A detailed description of this media item",
            "type": "string"
          },
          "mediaSubType": {
            "description": "The media sub type, e.g. STREAMING_HLS, STREAMING_DASH, etc",
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "description": "The media type, e.g. IMAGE, VIDEO, etc",
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "shortDescription": {
            "description": "A short description of this media item",
            "type": "string"
          },
          "translations": {
            "$ref": "#/components/schemas/MediaMl"
          },
          "url": {
            "description": "The url to this media item",
            "type": "string"
          },
          "width": {
            "description": "The width in pixels of this media item",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MediaTranslation": {
        "description": "Translations for this media item.",
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "MerchandiseInfoThymeleaf": {
        "type": "object",
        "properties": {
          "choiceInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferChoiceInfoThymeleaf"
            }
          },
          "mediaUrl": {
            "type": "string"
          },
          "merchandiseDescription": {
            "type": "string"
          },
          "shippingAddress": {
            "type": "string"
          },
          "shippingFullName": {
            "type": "string"
          }
        }
      },
      "MinorCategory": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID for the minor category",
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "majorCategory": {
            "$ref": "#/components/schemas/MajorCategory"
          },
          "minorCategoryName": {
            "description": "The name of the minor category",
            "type": "string"
          }
        }
      },
      "MinorCategoryResponse": {
        "description": "The performer's default minor category",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id of this category",
            "type": "string"
          },
          "majorCategory": {
            "$ref": "#/components/schemas/MajorCategoryResponse"
          },
          "minorCategoryName": {
            "description": "The name of this category",
            "type": "string"
          }
        }
      },
      "MotionGraphicsActivateScheduleActionSettings": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "passwordParam": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "MotionGraphicsDeactivateScheduleActionSettings": {
        "type": "object"
      },
      "NotificationCommon": {
        "type": "object",
        "properties": {
          "archiveListing": {
            "type": "boolean"
          },
          "assignmentData": {
            "$ref": "#/components/schemas/TokenAssignmentNotificationCommonData"
          },
          "boxOfficeNotificationCommonData": {
            "$ref": "#/components/schemas/BoxOfficeNotificationCommonData"
          },
          "clientGuestAssignmentNotificationCommonData": {
            "$ref": "#/components/schemas/ClientGuestAssignmentNotificationCommonData"
          },
          "clientToPromoterNotificationCommonData": {
            "$ref": "#/components/schemas/ClientToPromoterNotificationCommonData"
          },
          "clientUserClientData": {
            "$ref": "#/components/schemas/ClientUserClientNotificationCommonData"
          },
          "clientUserClientInviteData": {
            "$ref": "#/components/schemas/ClientUserClientInviteNotificationCommonData"
          },
          "clientUserEventCollabData": {
            "$ref": "#/components/schemas/ClientUserEventCollabNotificationCommonData"
          },
          "clientUserEventCollabInviteData": {
            "$ref": "#/components/schemas/ClientUserEventCollabInviteNotificationCommonData"
          },
          "clientUserProfileData": {
            "$ref": "#/components/schemas/ClientUserProfileNotificationCommonData"
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "exchangeNotificationCommonData": {
            "$ref": "#/components/schemas/ExchangeNotificationCommonData"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "offerRefundData": {
            "$ref": "#/components/schemas/OfferRefundNotificationCommonData"
          },
          "payoutTransactionId": {
            "type": "integer",
            "format": "int64"
          },
          "promoterAssignmentNotificationCommonData": {
            "$ref": "#/components/schemas/PromoterAssignmentNotificationCommonData"
          },
          "refundOfferId": {
            "type": "integer",
            "format": "int64"
          },
          "resaleOfferGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NotificationCommonTranslated": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string"
          },
          "accessControlMode": {
            "type": "string"
          },
          "accessControlSubMode": {
            "type": "string"
          },
          "bidDetailData": {
            "$ref": "#/components/schemas/BidDetailsThymeleaf"
          },
          "buyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "cardHolderName": {
            "type": "string"
          },
          "cdnBaseUrl": {
            "type": "string"
          },
          "childMarketplace": {
            "type": "boolean"
          },
          "clientGuestInviteData": {
            "$ref": "#/components/schemas/ClientGuestInviteThymeleaf"
          },
          "clientId": {
            "type": "string"
          },
          "clientPromoterInviteData": {
            "$ref": "#/components/schemas/ClientPromoterInviteThymeleaf"
          },
          "clientUserClientData": {
            "$ref": "#/components/schemas/ClientUserClientThymeleaf"
          },
          "clientUserClientInviteData": {
            "$ref": "#/components/schemas/ClientUserClientInviteThymeleaf"
          },
          "clientUserEventCollabData": {
            "$ref": "#/components/schemas/ClientUserEventCollabThymeleaf"
          },
          "clientUserEventCollabInviteData": {
            "$ref": "#/components/schemas/ClientUserEventCollabInviteThymeleaf"
          },
          "clientUserProfileData": {
            "$ref": "#/components/schemas/ClientUserProfileDataThymeleaf"
          },
          "currentDate": {
            "type": "string"
          },
          "currentTime": {
            "type": "string"
          },
          "currentTimeZone": {
            "type": "string"
          },
          "customerOrderPricingDetails": {
            "$ref": "#/components/schemas/CustomerOrderPricingDetailsThymeleaf"
          },
          "deepLinkBaseUrl": {
            "type": "string"
          },
          "deepLinkEventList": {
            "type": "string"
          },
          "deepLinkMyProfile": {
            "type": "string"
          },
          "deepLinkSecured": {
            "type": "string"
          },
          "deepLinkSelling": {
            "type": "string"
          },
          "deepLinkWithEventId": {
            "type": "string"
          },
          "deepLinkWithEventIdAndMarketplaceId": {
            "type": "string"
          },
          "deepLinkWithEventIdAndMarketplaceIdAndGetTokens": {
            "type": "string"
          },
          "deepLinkWithEventIdAndMarketplaceIdAndOfferGroupId": {
            "type": "string"
          },
          "deepLinkWithEventIdAndMarketplaceIdAndOfferGroupIdAndOfferId": {
            "type": "string"
          },
          "deepLinkWithEventIdAndMarketplaceIdAndOfferId": {
            "type": "string"
          },
          "defaultImageUrl": {
            "type": "string"
          },
          "environmentBaseUrl": {
            "type": "string"
          },
          "eventAccessibilityType": {
            "type": "string"
          },
          "eventAddress": {
            "type": "string"
          },
          "eventAnnouncement": {
            "type": "string"
          },
          "eventDate": {
            "type": "string"
          },
          "eventDoorsCloseDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "eventDoorsOpenDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "eventEmailImageUrl": {
            "type": "string"
          },
          "eventEndDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventMerchandiseData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventNameShort": {
            "type": "string"
          },
          "eventRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventStartDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "eventSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "exchangeDetail": {
            "$ref": "#/components/schemas/ExchangeDetailThymeLeaf"
          },
          "externalMerchandiseFulfillmentCode": {
            "type": "string"
          },
          "externalMerchandiseFulfillmentUrl": {
            "type": "string"
          },
          "footerInfo": {
            "$ref": "#/components/schemas/FooterInfoThymeLeaf"
          },
          "headerInfo": {
            "$ref": "#/components/schemas/HeaderInfoThymeLeaf"
          },
          "includedBuyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "isChildMarketplace": {
            "type": "boolean",
            "writeOnly": true
          },
          "locationName": {
            "type": "string"
          },
          "marketplaceEndCalculateWinnersDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "marketplaceEndDate": {
            "type": "string"
          },
          "marketplaceEndTime": {
            "type": "string"
          },
          "marketplaceEndTimeZone": {
            "type": "string"
          },
          "marketplaceForceAllocationDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceRules": {
            "type": "string"
          },
          "marketplaceStartDate": {
            "type": "string"
          },
          "marketplaceStartTime": {
            "type": "string"
          },
          "marketplaceStartTimeZone": {
            "type": "string"
          },
          "marketplaceType": {
            "type": "string"
          },
          "minimumAge": {
            "type": "string"
          },
          "nextMarketplaceStartDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "nextMarketplaceType": {
            "type": "string"
          },
          "nextMarketplaceTypeDisplayString": {
            "type": "string"
          },
          "offerChance": {
            "type": "string"
          },
          "offerChanceDisplay": {
            "type": "string"
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupDetails": {
            "$ref": "#/components/schemas/OfferGroupDetailsThymeleaf"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroupSeatConfigurationType": {
            "type": "string"
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "offerInventoryData": {
            "$ref": "#/components/schemas/InventoryItemCollectionThymeleaf"
          },
          "offerNumberOfAccessTokens": {
            "type": "string"
          },
          "offerNumberOfTokens": {
            "type": "string"
          },
          "offerPricePerToken": {
            "type": "string"
          },
          "offerPricingDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "offerRefundData": {
            "$ref": "#/components/schemas/OfferRefundDataThymeleaf"
          },
          "offerRetryEndDate": {
            "type": "string"
          },
          "offerRetryEndTime": {
            "type": "string"
          },
          "offerTotalCost": {
            "type": "string"
          },
          "offerTotalFees": {
            "type": "string"
          },
          "offerTotalTokenCost": {
            "type": "string"
          },
          "originalEventDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "promoterUserPurchaseInviteData": {
            "$ref": "#/components/schemas/PromoterUserPurchaseInviteThymeleaf"
          },
          "receiptEmailSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "refundDeadline": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "sellingOfferGroupDetails": {
            "$ref": "#/components/schemas/SellingOfferGroupDetailsThymeleaf"
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "tokenAssignmentData": {
            "$ref": "#/components/schemas/TokenAssignmentDataThymeleaf"
          },
          "transactionCardLastDigits": {
            "type": "string"
          },
          "transactionCardType": {
            "type": "string"
          },
          "transactionDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NotificationCommonTranslatedTestRequest": {
        "type": "object",
        "required": [
          "notificationType",
          "toEmailAddress"
        ],
        "properties": {
          "notificationCommonTranslatedOverrideValues": {
            "$ref": "#/components/schemas/NotificationCommonTranslated"
          },
          "notificationType": {
            "type": "string",
            "enum": [
              "USER_EMAIL_VERIFICATION",
              "USER_EMAIL_VERIFICATION_BOX_OFFICE",
              "USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "USER_PASSWORD_CHANGED",
              "USER_WELCOME",
              "USER_MOBILE_NUMBER_VERIFICATION",
              "USER_PAYMENT_METHOD_CHANGED",
              "USER_CLOSE_ACCOUNT_CONFIRMATION",
              "CLIENT_USER_NEW_ACCOUNT_SET_PASSWORD",
              "CLIENT_USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "CLIENT_USER_PASSWORD_CHANGED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_REMOVED_FROM_CLIENT",
              "SELF_CLIENT_USER_CLIENT_PERMISSION_CHANGED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITER_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_ADDED_TO_EVENT_COLLAB",
              "SELF_CLIENT_USER_REMOVED_FROM_EVENT_COLLAB",
              "SELF_CLIENT_USER_EVENT_COLLAB_PERMISSION_CHANGED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_CREATED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "USER_DRAW_TOKEN_COUNT_UPDATE",
              "USER_DRAW_DELETE_ENTRY",
              "USER_DRAW_WON_NEEDS_CLAIM",
              "USER_DRAW_WON_PAYMENT_FAILED",
              "USER_DRAW_WON_PAYMENT_SUCCESS",
              "USER_DRAW_WON_INVENTORY_ALLOCATED",
              "USER_DRAW_LOST_PAYMENT_FAILURE",
              "USER_DRAW_LOST_PAYMENT_DECLINED",
              "USER_DRAW_LOST_CLAIM_TIME_EXPIRED",
              "USER_DRAW_LOST_NOT_CHOSEN",
              "USER_DRAW_INITIAL_ENTRY",
              "USER_AUCTION_INITIAL_BID_CONFIRMATION",
              "USER_AUCTION_BID_UPDATED",
              "USER_AUCTION_DELETE_BID",
              "USER_AUCTION_WON_PAYMENT_FAILED",
              "USER_AUCTION_WON_PAYMENT_SUCCESS",
              "USER_AUCTION_LOST_OUTBID",
              "USER_AUCTION_LOST_PAYMENT_FAILURE",
              "USER_AUCTION_INVENTORY_ALLOCATED",
              "USER_AUCTION_OFFER_CHANCE_CHANGE",
              "USER_AUCTION_ENDING_SOON",
              "USER_MARKET_OFFER_INITIAL_CONFIRMATION",
              "USER_MARKET_OFFER_UPDATED",
              "USER_MARKET_OFFER_DELETED",
              "USER_MARKET_OFFER_PAYMENT_FAILED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_ACCEPTED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_REJECTED",
              "USER_MARKET_OFFER_SELLER_OFFER_FULFILLED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_COMPLETED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_FAILED",
              "USER_BUY_NOW_CONFIRMATION",
              "USER_STREAMING_BUY_NOW_CONFIRMATION",
              "USER_PAYMENT_REFUND_EVENT_CANCEL",
              "USER_PAYMENT_REFUND",
              "USER_PAYMENT_REFUND_FAILURE",
              "USER_TOKEN_ASSIGNMENT_INVITE_SENT",
              "USER_TOKEN_ASSIGNMENT_INVITE_ACCEPTED",
              "USER_TOKEN_ASSIGNMENT_INVITE_DECLINED",
              "USER_TOKEN_ASSIGNMENT_REVOKE_INVITEE_CONFIRMATION",
              "USER_TOKEN_ASSIGNMENT_INVITEE_CANCEL",
              "USER_TOKEN_ASSIGNMENT_BOUNCED",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE",
              "INVITEE_TOKEN_ASSIGNMENT_DECLINED",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_INVITE_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_ACCEPTED",
              "INVITEE_TOKEN_ASSIGNMENT_CANCEL",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_TOKEN_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE_REMINDER",
              "USER_EVENT_REMINDER_EVENT_READY",
              "USER_EVENT_REMINDER_ASSIGNMENTS_REQUIRED",
              "USER_EVENT_REMINDER_PREPARE",
              "PRIVACY_POLICY_UPDATE",
              "FRAUD_DETECTED",
              "USER_MARKET_BUY_CONFIRMATION",
              "USER_MARKET_POST_CONFIRMATION",
              "USER_MARKET_POST_UPDATED",
              "USER_MARKET_POST_CANCELLED",
              "USER_MARKET_SOLD_CONFIRMATION",
              "USER_EVENT_CANCELLED",
              "USER_EVENT_POSTPONED",
              "USER_EVENT_RESCHEDULED",
              "LIVE_STREAM_STARTED",
              "PROMOTER_CLIENT_INVITE",
              "USER_PROMOTER_CASH_INVITE",
              "USER_PROMOTER_USER_CREDIT_INVITE",
              "USER_PROMOTER_REVOKED",
              "PROMOTER_USER_DECLINED",
              "USER_PROMOTER_DECLINED",
              "PROMOTER_USER_CASH_PURCHASE",
              "PROMOTER_USER_REGULAR_PURCHASE",
              "PROMOTER_CLIENT_REVOKE",
              "USER_CLIENT_GUEST_INVITE_SENT",
              "USER_CLIENT_GUEST_INVITE_DECLINED",
              "USER_CLIENT_GUEST_INVITE_REMINDER",
              "USER_CLIENT_GUEST_INVITE_REVOKE",
              "USER_CUSTOM_EVENT_EMAIL",
              "CLIENT_DEMO_REQUEST_EMAIL"
            ]
          },
          "toEmailAddress": {
            "type": "string"
          }
        }
      },
      "NotificationCustomEmailContentRequest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "NotificationCustomEmailListResponse": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationCustomEmailResponse"
            }
          }
        }
      },
      "NotificationCustomEmailPreviewRequest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "locale": {
            "type": "string"
          },
          "previewEmailAddress": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "NotificationCustomEmailRequest": {
        "type": "object",
        "properties": {
          "defaultContent": {
            "$ref": "#/components/schemas/NotificationCustomEmailContentRequest"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "translatedContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationCustomEmailContentRequest"
            }
          }
        }
      },
      "NotificationCustomEmailResponse": {
        "type": "object",
        "properties": {
          "sentDate": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "NotificationDataObjectForTest": {
        "type": "object",
        "properties": {
          "inviteeEmailAddress": {
            "type": "string"
          },
          "inviteeFirstName": {
            "type": "string"
          },
          "inviteeLastName": {
            "type": "string"
          },
          "inviterFirstName": {
            "type": "string"
          },
          "inviterLastName": {
            "type": "string"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "oldChance": {
            "type": "string"
          },
          "prevNumTokens": {
            "type": "string"
          },
          "timeToResolve": {
            "type": "string"
          },
          "tokenAssignmentConfirmationDeepLink": {
            "type": "string"
          },
          "tokenAssignmentDeclineLink": {
            "type": "string"
          },
          "verificationLink": {
            "type": "string"
          }
        }
      },
      "NotificationGroupResponse": {
        "description": "List of notification groups",
        "type": "object",
        "properties": {
          "eventInfo": {
            "$ref": "#/components/schemas/EventListResponseItem"
          },
          "lastNotificationTimestampForGroup": {
            "description": "Latest notification date for this group",
            "type": "string",
            "format": "date-time"
          },
          "notificationItemResponses": {
            "description": "List of notification groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationItemResponse"
            }
          },
          "unreadCount": {
            "description": "Number of unread notifications in this group",
            "type": "string"
          }
        }
      },
      "NotificationItemResponse": {
        "description": "List of notification groups",
        "type": "object",
        "properties": {
          "body": {
            "description": "Detailed body of this notification",
            "type": "string"
          },
          "createdTimestamp": {
            "description": "The date and time this notification was created",
            "type": "string",
            "format": "date-time"
          },
          "deepLinkUrl": {
            "description": "Deeplink url for this notification",
            "type": "string"
          },
          "eventId": {
            "description": "The event id this notification is related to if applicable",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of this notification item",
            "type": "string"
          },
          "imageUrl": {
            "description": "Url to the image of this notification",
            "type": "string"
          },
          "lastNotificationTimestampForEvent": {
            "description": "The latest createdTimestamp for eventId or if eventId is null the createdTimestamp",
            "type": "string",
            "format": "date-time"
          },
          "notificationType": {
            "description": "Type of this notification",
            "type": "string",
            "enum": [
              "USER_EMAIL_VERIFICATION",
              "USER_EMAIL_VERIFICATION_BOX_OFFICE",
              "USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "USER_PASSWORD_CHANGED",
              "USER_WELCOME",
              "USER_MOBILE_NUMBER_VERIFICATION",
              "USER_PAYMENT_METHOD_CHANGED",
              "USER_CLOSE_ACCOUNT_CONFIRMATION",
              "CLIENT_USER_NEW_ACCOUNT_SET_PASSWORD",
              "CLIENT_USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "CLIENT_USER_PASSWORD_CHANGED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_REMOVED_FROM_CLIENT",
              "SELF_CLIENT_USER_CLIENT_PERMISSION_CHANGED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITER_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_ADDED_TO_EVENT_COLLAB",
              "SELF_CLIENT_USER_REMOVED_FROM_EVENT_COLLAB",
              "SELF_CLIENT_USER_EVENT_COLLAB_PERMISSION_CHANGED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_CREATED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "USER_DRAW_TOKEN_COUNT_UPDATE",
              "USER_DRAW_DELETE_ENTRY",
              "USER_DRAW_WON_NEEDS_CLAIM",
              "USER_DRAW_WON_PAYMENT_FAILED",
              "USER_DRAW_WON_PAYMENT_SUCCESS",
              "USER_DRAW_WON_INVENTORY_ALLOCATED",
              "USER_DRAW_LOST_PAYMENT_FAILURE",
              "USER_DRAW_LOST_PAYMENT_DECLINED",
              "USER_DRAW_LOST_CLAIM_TIME_EXPIRED",
              "USER_DRAW_LOST_NOT_CHOSEN",
              "USER_DRAW_INITIAL_ENTRY",
              "USER_AUCTION_INITIAL_BID_CONFIRMATION",
              "USER_AUCTION_BID_UPDATED",
              "USER_AUCTION_DELETE_BID",
              "USER_AUCTION_WON_PAYMENT_FAILED",
              "USER_AUCTION_WON_PAYMENT_SUCCESS",
              "USER_AUCTION_LOST_OUTBID",
              "USER_AUCTION_LOST_PAYMENT_FAILURE",
              "USER_AUCTION_INVENTORY_ALLOCATED",
              "USER_AUCTION_OFFER_CHANCE_CHANGE",
              "USER_AUCTION_ENDING_SOON",
              "USER_MARKET_OFFER_INITIAL_CONFIRMATION",
              "USER_MARKET_OFFER_UPDATED",
              "USER_MARKET_OFFER_DELETED",
              "USER_MARKET_OFFER_PAYMENT_FAILED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_ACCEPTED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_REJECTED",
              "USER_MARKET_OFFER_SELLER_OFFER_FULFILLED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_COMPLETED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_FAILED",
              "USER_BUY_NOW_CONFIRMATION",
              "USER_STREAMING_BUY_NOW_CONFIRMATION",
              "USER_PAYMENT_REFUND_EVENT_CANCEL",
              "USER_PAYMENT_REFUND",
              "USER_PAYMENT_REFUND_FAILURE",
              "USER_TOKEN_ASSIGNMENT_INVITE_SENT",
              "USER_TOKEN_ASSIGNMENT_INVITE_ACCEPTED",
              "USER_TOKEN_ASSIGNMENT_INVITE_DECLINED",
              "USER_TOKEN_ASSIGNMENT_REVOKE_INVITEE_CONFIRMATION",
              "USER_TOKEN_ASSIGNMENT_INVITEE_CANCEL",
              "USER_TOKEN_ASSIGNMENT_BOUNCED",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE",
              "INVITEE_TOKEN_ASSIGNMENT_DECLINED",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_INVITE_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_ACCEPTED",
              "INVITEE_TOKEN_ASSIGNMENT_CANCEL",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_TOKEN_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE_REMINDER",
              "USER_EVENT_REMINDER_EVENT_READY",
              "USER_EVENT_REMINDER_ASSIGNMENTS_REQUIRED",
              "USER_EVENT_REMINDER_PREPARE",
              "PRIVACY_POLICY_UPDATE",
              "FRAUD_DETECTED",
              "USER_MARKET_BUY_CONFIRMATION",
              "USER_MARKET_POST_CONFIRMATION",
              "USER_MARKET_POST_UPDATED",
              "USER_MARKET_POST_CANCELLED",
              "USER_MARKET_SOLD_CONFIRMATION",
              "USER_EVENT_CANCELLED",
              "USER_EVENT_POSTPONED",
              "USER_EVENT_RESCHEDULED",
              "LIVE_STREAM_STARTED",
              "PROMOTER_CLIENT_INVITE",
              "USER_PROMOTER_CASH_INVITE",
              "USER_PROMOTER_USER_CREDIT_INVITE",
              "USER_PROMOTER_REVOKED",
              "PROMOTER_USER_DECLINED",
              "USER_PROMOTER_DECLINED",
              "PROMOTER_USER_CASH_PURCHASE",
              "PROMOTER_USER_REGULAR_PURCHASE",
              "PROMOTER_CLIENT_REVOKE",
              "USER_CLIENT_GUEST_INVITE_SENT",
              "USER_CLIENT_GUEST_INVITE_DECLINED",
              "USER_CLIENT_GUEST_INVITE_REMINDER",
              "USER_CLIENT_GUEST_INVITE_REVOKE",
              "USER_CUSTOM_EVENT_EMAIL",
              "CLIENT_DEMO_REQUEST_EMAIL"
            ]
          },
          "offerGroupId": {
            "description": "The offer group id this notification is related to if applicable",
            "type": "string"
          },
          "read": {
            "description": "Flag indicating if this message was previously read",
            "type": "boolean"
          },
          "readTimestamp": {
            "description": "The date and time this notification was read",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "description": "Title of this notification",
            "type": "string"
          }
        }
      },
      "NotificationListRequest": {
        "type": "object",
        "required": [
          "notificationIds"
        ],
        "properties": {
          "notificationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NotificationResponse": {
        "type": "object",
        "properties": {
          "notificationGroupResponses": {
            "description": "List of notification groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationGroupResponse"
            }
          },
          "unreadCount": {
            "description": "Number of unread notifications",
            "type": "string"
          },
          "userProfile": {
            "$ref": "#/components/schemas/UserProfileResponse"
          }
        }
      },
      "NotificationSettingItemResponse": {
        "type": "object",
        "properties": {
          "description": {
            "description": "The short description for the user notification setting",
            "type": "string"
          },
          "notificationDeliveryType": {
            "description": "The notification delivery type for the user notification setting",
            "type": "string",
            "enum": [
              "EMAIL",
              "SMS",
              "PUSH",
              "INBOX"
            ]
          },
          "notificationGroup": {
            "description": "The notification group for the user notification setting",
            "type": "string",
            "enum": [
              "MARKETPLACE",
              "PAYMENT",
              "SYSTEM"
            ]
          },
          "shouldSend": {
            "description": "A flag for whether or not the user should get notifications for the notification group",
            "type": "boolean"
          },
          "title": {
            "description": "The title of user notification setting",
            "type": "string"
          }
        }
      },
      "NotificationSettingsListResponse": {
        "type": "object",
        "properties": {
          "notificationSettingItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSettingItemResponse"
            }
          }
        }
      },
      "NotificationTestRequest": {
        "type": "object",
        "required": [
          "notificationType",
          "userId"
        ],
        "properties": {
          "currencyLocale": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/NotificationDataObjectForTest"
          },
          "notificationCommon": {
            "$ref": "#/components/schemas/NotificationCommon"
          },
          "notificationType": {
            "type": "string",
            "enum": [
              "USER_EMAIL_VERIFICATION",
              "USER_EMAIL_VERIFICATION_BOX_OFFICE",
              "USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "USER_PASSWORD_CHANGED",
              "USER_WELCOME",
              "USER_MOBILE_NUMBER_VERIFICATION",
              "USER_PAYMENT_METHOD_CHANGED",
              "USER_CLOSE_ACCOUNT_CONFIRMATION",
              "CLIENT_USER_NEW_ACCOUNT_SET_PASSWORD",
              "CLIENT_USER_EMAIL_VERIFICATION_RESET_PASSWORD",
              "CLIENT_USER_PASSWORD_CHANGED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_REMOVED_FROM_CLIENT",
              "SELF_CLIENT_USER_CLIENT_PERMISSION_CHANGED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_SENT",
              "INVITER_CLIENT_USER_CLIENT_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_DECLINED",
              "INVITER_CLIENT_USER_CLIENT_INVITE_REVOKED",
              "SELF_CLIENT_USER_ADDED_TO_EVENT_COLLAB",
              "SELF_CLIENT_USER_REMOVED_FROM_EVENT_COLLAB",
              "SELF_CLIENT_USER_EVENT_COLLAB_PERMISSION_CHANGED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITEE_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_SENT",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_ACCEPTED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_DECLINED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_REVOKED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_CREATED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_FULLY_APPROVED",
              "INVITER_CLIENT_USER_EVENT_COLLAB_INVITE_APPROVAL_REJECTED",
              "USER_DRAW_TOKEN_COUNT_UPDATE",
              "USER_DRAW_DELETE_ENTRY",
              "USER_DRAW_WON_NEEDS_CLAIM",
              "USER_DRAW_WON_PAYMENT_FAILED",
              "USER_DRAW_WON_PAYMENT_SUCCESS",
              "USER_DRAW_WON_INVENTORY_ALLOCATED",
              "USER_DRAW_LOST_PAYMENT_FAILURE",
              "USER_DRAW_LOST_PAYMENT_DECLINED",
              "USER_DRAW_LOST_CLAIM_TIME_EXPIRED",
              "USER_DRAW_LOST_NOT_CHOSEN",
              "USER_DRAW_INITIAL_ENTRY",
              "USER_AUCTION_INITIAL_BID_CONFIRMATION",
              "USER_AUCTION_BID_UPDATED",
              "USER_AUCTION_DELETE_BID",
              "USER_AUCTION_WON_PAYMENT_FAILED",
              "USER_AUCTION_WON_PAYMENT_SUCCESS",
              "USER_AUCTION_LOST_OUTBID",
              "USER_AUCTION_LOST_PAYMENT_FAILURE",
              "USER_AUCTION_INVENTORY_ALLOCATED",
              "USER_AUCTION_OFFER_CHANCE_CHANGE",
              "USER_AUCTION_ENDING_SOON",
              "USER_MARKET_OFFER_INITIAL_CONFIRMATION",
              "USER_MARKET_OFFER_UPDATED",
              "USER_MARKET_OFFER_DELETED",
              "USER_MARKET_OFFER_PAYMENT_FAILED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_ACCEPTED",
              "USER_MARKET_OFFER_PAYMENT_FAILED_RETRY_REJECTED",
              "USER_MARKET_OFFER_SELLER_OFFER_FULFILLED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_COMPLETED",
              "USER_MARKET_OFFER_SELLER_PAYOUT_FAILED",
              "USER_BUY_NOW_CONFIRMATION",
              "USER_STREAMING_BUY_NOW_CONFIRMATION",
              "USER_PAYMENT_REFUND_EVENT_CANCEL",
              "USER_PAYMENT_REFUND",
              "USER_PAYMENT_REFUND_FAILURE",
              "USER_TOKEN_ASSIGNMENT_INVITE_SENT",
              "USER_TOKEN_ASSIGNMENT_INVITE_ACCEPTED",
              "USER_TOKEN_ASSIGNMENT_INVITE_DECLINED",
              "USER_TOKEN_ASSIGNMENT_REVOKE_INVITEE_CONFIRMATION",
              "USER_TOKEN_ASSIGNMENT_INVITEE_CANCEL",
              "USER_TOKEN_ASSIGNMENT_BOUNCED",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE",
              "INVITEE_TOKEN_ASSIGNMENT_DECLINED",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_INVITE_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_ACCEPTED",
              "INVITEE_TOKEN_ASSIGNMENT_CANCEL",
              "INVITEE_TOKEN_ASSIGNMENT_OWNER_TOKEN_RECLAIM",
              "INVITEE_TOKEN_ASSIGNMENT_INVITE_REMINDER",
              "USER_EVENT_REMINDER_EVENT_READY",
              "USER_EVENT_REMINDER_ASSIGNMENTS_REQUIRED",
              "USER_EVENT_REMINDER_PREPARE",
              "PRIVACY_POLICY_UPDATE",
              "FRAUD_DETECTED",
              "USER_MARKET_BUY_CONFIRMATION",
              "USER_MARKET_POST_CONFIRMATION",
              "USER_MARKET_POST_UPDATED",
              "USER_MARKET_POST_CANCELLED",
              "USER_MARKET_SOLD_CONFIRMATION",
              "USER_EVENT_CANCELLED",
              "USER_EVENT_POSTPONED",
              "USER_EVENT_RESCHEDULED",
              "LIVE_STREAM_STARTED",
              "PROMOTER_CLIENT_INVITE",
              "USER_PROMOTER_CASH_INVITE",
              "USER_PROMOTER_USER_CREDIT_INVITE",
              "USER_PROMOTER_REVOKED",
              "PROMOTER_USER_DECLINED",
              "USER_PROMOTER_DECLINED",
              "PROMOTER_USER_CASH_PURCHASE",
              "PROMOTER_USER_REGULAR_PURCHASE",
              "PROMOTER_CLIENT_REVOKE",
              "USER_CLIENT_GUEST_INVITE_SENT",
              "USER_CLIENT_GUEST_INVITE_DECLINED",
              "USER_CLIENT_GUEST_INVITE_REMINDER",
              "USER_CLIENT_GUEST_INVITE_REVOKE",
              "USER_CUSTOM_EVENT_EMAIL",
              "CLIENT_DEMO_REQUEST_EMAIL"
            ]
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NotificationUnreadCountResponse": {
        "type": "object",
        "properties": {
          "unreadCount": {
            "description": "Number of unread notifications",
            "type": "string"
          }
        }
      },
      "NotificationUserData": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "emailVerificationCode": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "profilePictureVerificationStatus": {
            "type": "boolean"
          }
        }
      },
      "OfferCategoryChoiceRequest": {
        "type": "object",
        "properties": {
          "inventoryChoiceId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferChoiceInfoThymeleaf": {
        "type": "object",
        "properties": {
          "choiceConfigName": {
            "type": "string"
          },
          "choiceName": {
            "type": "string"
          }
        }
      },
      "OfferChoiceRequest": {
        "type": "object",
        "properties": {
          "inventoryChoiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceRequest"
            }
          }
        }
      },
      "OfferCreationRequestData": {
        "type": "object",
        "properties": {
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "serverGuid": {
            "type": "string"
          }
        }
      },
      "OfferDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "inventoryItemCollection": {
            "$ref": "#/components/schemas/InventoryItemCollectionThymeleaf"
          },
          "offerChance": {
            "type": "string"
          },
          "offerChanceDisplay": {
            "type": "string"
          },
          "offerGroupDetails": {
            "$ref": "#/components/schemas/OfferGroupDetailsThymeleaf"
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "offerPricingDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "offerRetryEndDate": {
            "type": "string"
          },
          "offerRetryEndTime": {
            "type": "string"
          },
          "resaleForbiddenContext": {
            "$ref": "#/components/schemas/ResaleForbiddenContext"
          }
        }
      },
      "OfferGroupAssignmentCheckoutResponse": {
        "type": "object",
        "properties": {
          "appliedDiscounts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "blacklistedQuantities": {
            "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
            "type": "array",
            "items": {
              "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
              "type": "integer",
              "format": "int64"
            }
          },
          "checkoutTermsAndConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsAndConditions"
            }
          },
          "choiceDiscountSetList": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroupResponse": {
            "$ref": "#/components/schemas/SimpleOfferGroupResponse"
          },
          "oldPayoutMethod": {
            "$ref": "#/components/schemas/PayoutMethodResponse"
          },
          "requestGuid": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutSeat"
            }
          },
          "sectionCodes": {
            "description": "The section codes this offer group belongs to",
            "type": "array",
            "items": {
              "description": "The section codes this offer group belongs to",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "OfferGroupDetailResponse": {
        "type": "object",
        "properties": {
          "choiceDiscountSetList": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          }
        }
      },
      "OfferGroupDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "accessibilityType": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryType": {
            "type": "string"
          },
          "marketplaceDetails": {
            "$ref": "#/components/schemas/MarketplaceDetailsThymeleaf"
          },
          "minimumAge": {
            "type": "string"
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupSeatConfigurationType": {
            "type": "string"
          },
          "promoterInfo": {
            "$ref": "#/components/schemas/NotificationUserData"
          },
          "rules": {
            "type": "string"
          }
        }
      },
      "OfferGroupPriceRequest": {
        "type": "object",
        "properties": {
          "absurdPrice": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "reservePrice": {
            "type": "number"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OfferGroupResponse": {
        "type": "object",
        "properties": {
          "description": {
            "description": "The description for the offer group",
            "type": "string"
          },
          "historicalAveragePrice": {
            "description": "Previous historical average, used in live markets",
            "type": "number"
          },
          "id": {
            "description": "The id of this offer group",
            "type": "integer",
            "format": "int64"
          },
          "marketplaceId": {
            "description": "The id of the marketplace this offer group belongs to",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupInviteDetailId": {
            "type": "integer",
            "format": "int64"
          },
          "reservePrice": {
            "description": "The reserve price for the offer group",
            "type": "number"
          },
          "seatConfigurationType": {
            "description": "Whether or not this offer group is GENERAL_ADMISSION or SEATED",
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "suggestedOfferIncrementIds": {
            "description": "The ids of suggested offer increments",
            "type": "array",
            "items": {
              "description": "The ids of suggested offer increments",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "OfferGroupSettings": {
        "type": "object",
        "required": [
          "allowDynamicPrice"
        ],
        "properties": {
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "numInventory": {
            "description": "Required for all non-CHARITY type categories.",
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "OfferGroupTierItemRequest": {
        "type": "object",
        "properties": {
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "soldOutRequirementOfferGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferGroupTierRequest": {
        "type": "object",
        "properties": {
          "tierItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTierItemRequest"
            }
          }
        }
      },
      "OfferGroupTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "additionalDetails": {
            "type": "string"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "OfferGroupTranslationsRequest": {
        "type": "object",
        "required": [
          "offerGroupId",
          "offerGroupTranslationRequestItemList"
        ],
        "properties": {
          "offerGroupId": {
            "type": "string"
          },
          "offerGroupTranslationRequestItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTranslation"
            }
          },
          "suggestedOfferIncrementTranslationRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedOfferIncrementTranslationRequest"
            }
          }
        }
      },
      "OfferGroupUpdateRequest": {
        "type": "object",
        "required": [
          "id",
          "inventoryReferences"
        ],
        "properties": {
          "absurdPrice": {
            "type": "number"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "type": "number"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryReference"
            }
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "type": "number"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedOfferIncrements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSuggestedOfferIncrementRequest"
            }
          }
        }
      },
      "OfferPricingBreakdownItemResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount of money for this order associated with this fee.",
            "type": "number"
          },
          "applyOrder": {
            "type": "integer",
            "format": "int32"
          },
          "breakdownDisplayOption": {
            "type": "string",
            "enum": [
              "ALL",
              "EMAIL"
            ]
          },
          "breakdownType": {
            "type": "string",
            "enum": [
              "DISCOUNT",
              "FEE",
              "INVENTORY_CARRY_OVER",
              "FEE_CARRY_OVER"
            ]
          },
          "discountResponse": {
            "$ref": "#/components/schemas/OfferPricingDiscountBreakdownItemResponse"
          },
          "externalTax": {
            "type": "boolean"
          },
          "feeId": {
            "type": "integer",
            "format": "int64"
          },
          "feeResponse": {
            "$ref": "#/components/schemas/OfferPricingFeeBreakdownItemResponse"
          },
          "name": {
            "description": "The name of this fee",
            "type": "string"
          },
          "nameLong": {
            "description": "The optional long name of this fee",
            "type": "string"
          },
          "reason": {
            "description": "The reason this fee was applied",
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          },
          "subReason": {
            "description": "The sub reason this fee was applied",
            "type": "string",
            "enum": [
              "STATE_TAX",
              "FEDERAL_TAX"
            ]
          },
          "value": {
            "description": "The value associated with this fee. Should be used alongside valueType. For example for a 10% fee, the value will be 10 and the value type will be PERCENT.",
            "type": "number"
          },
          "valueType": {
            "description": "The type of value. Used to distinguish between percentage fees and fixed amount fees",
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "TBD"
            ]
          }
        }
      },
      "OfferPricingDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "amountPerToken": {
            "type": "string"
          },
          "amountSavedPerToken": {
            "type": "string"
          },
          "autoPayEnabled": {
            "type": "boolean"
          },
          "buyNowPrice": {
            "type": "string"
          },
          "buyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "includedBuyerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "includedSellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "merchandiseInfo": {
            "$ref": "#/components/schemas/MerchandiseInfoThymeleaf"
          },
          "numberOfAccessTokens": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodDetails": {
            "$ref": "#/components/schemas/PaymentMethodDetailsThymeleaf"
          },
          "pricePerToken": {
            "type": "string"
          },
          "purchasedForFree": {
            "type": "boolean"
          },
          "sellerFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeBreakdownThymeleaf"
            }
          },
          "totalAmount": {
            "type": "string"
          },
          "totalAmountRaw": {
            "type": "number"
          },
          "totalFees": {
            "type": "string"
          },
          "totalTokenAmount": {
            "type": "string"
          },
          "transactionDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferPricingDiscountBreakdownItemResponse": {
        "type": "object",
        "properties": {
          "advertisementString": {
            "type": "string"
          },
          "discountCode": {
            "type": "string"
          },
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "requirementMissingMessage": {
            "type": "string"
          }
        }
      },
      "OfferPricingFeeBreakdownItemResponse": {
        "type": "object",
        "properties": {
          "applicationLevel": {
            "description": "At what level this fee is applied. Only makes sense with value type AMOUNT as percentage fees will be the same regardless of weather they are applied at transaction or token level",
            "type": "string",
            "enum": [
              "TOKEN",
              "TRANSACTION",
              "PREVIOUS_FEE",
              "PREVIOUS_FEE_TOKEN",
              "TOKEN_LIFT",
              "TOKEN_PROFIT"
            ]
          },
          "breakdownDisplayOption": {
            "type": "string",
            "enum": [
              "ALL",
              "EMAIL"
            ]
          },
          "externalTax": {
            "type": "boolean"
          },
          "feeCode": {
            "description": "The identifying code for this fee",
            "type": "string"
          },
          "feeId": {
            "type": "integer",
            "format": "int64"
          },
          "includedInBase": {
            "description": "If the fee was included in base",
            "type": "boolean"
          },
          "name": {
            "description": "The name of this fee",
            "type": "string"
          },
          "nameLong": {
            "description": "The optional long name of this fee",
            "type": "string"
          },
          "reason": {
            "description": "The reason this fee was applied",
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          },
          "responsibilityType": {
            "description": "The party charged for this fee. Should be either BUYER or SELLER.",
            "type": "string",
            "enum": [
              "CLIENT",
              "BUYER",
              "SELLER"
            ]
          },
          "subReason": {
            "description": "The sub reason this fee was applied",
            "type": "string",
            "enum": [
              "STATE_TAX",
              "FEDERAL_TAX"
            ]
          },
          "value": {
            "description": "The value associated with this fee. Should be used alongside valueType. For example for a 10% fee, the value will be 10 and the value type will be PERCENT.",
            "type": "number"
          },
          "valueType": {
            "description": "The type of value. Used to distinguish between percentage fees and fixed amount fees",
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "TBD"
            ]
          }
        }
      },
      "OfferRefundDataThymeleaf": {
        "type": "object",
        "properties": {
          "inventoryDetails": {
            "$ref": "#/components/schemas/InventoryItemCollectionThymeleaf"
          },
          "offerGroupDetails": {
            "$ref": "#/components/schemas/OfferGroupDetailsThymeleaf"
          },
          "refundDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "transactionData": {
            "$ref": "#/components/schemas/TransactionDataThymeleaf"
          }
        }
      },
      "OfferRefundNotificationCommonData": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "refundTransactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferUpgradableResponseItem": {
        "type": "object",
        "properties": {
          "hasUpgradeOptions": {
            "type": "boolean"
          },
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferUpgradeCheckoutRequest": {
        "type": "object",
        "properties": {
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OfferUserDemographicsRequest": {
        "type": "object",
        "properties": {
          "accessControlScanTimeRangeId": {
            "type": "integer",
            "format": "int64"
          },
          "countAllOffers": {
            "description": "Whether the demographics should include all offers. Defaults to only counting winning (paid) offers. This can only be set to true if a marketplace ID is provided whose type is Wish List or My Price.",
            "type": "boolean"
          },
          "eventId": {
            "description": "The event ID to fetch the demographics for.",
            "type": "integer",
            "format": "int64"
          },
          "excludeChildrenMarketplaces": {
            "description": "Whether children marketplace data should be excluded. Defaults to false",
            "type": "boolean"
          },
          "includeOnlyBoxOfficeSales": {
            "type": "boolean"
          },
          "marketplaceIds": {
            "description": "The marketplace IDs to fetch the demographics for. If not set, the result set includes data for the entire event.",
            "type": "array",
            "items": {
              "description": "The marketplace IDs to fetch the demographics for. If not set, the result set includes data for the entire event.",
              "type": "integer",
              "format": "int64"
            }
          },
          "promoterUserId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupId": {
            "description": "The sales group to filter on. Defaults to null (all inventory)",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OffersUpgradabilityResponse": {
        "type": "object",
        "properties": {
          "offerUpgradableResponseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferUpgradableResponseItem"
            }
          }
        }
      },
      "PauseStateScheduleActionSettings": {
        "type": "object",
        "properties": {
          "pipelines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelinePauseStateSettings"
            }
          }
        }
      },
      "PaymentCreateCTPaymentGatewayRequest": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "companyNumber": {
            "type": "string"
          },
          "merchantNumber": {
            "type": "string"
          }
        }
      },
      "PaymentCreateGatewayRequest": {
        "type": "object",
        "properties": {
          "ctPaymentGatewayRequest": {
            "$ref": "#/components/schemas/PaymentCreateCTPaymentGatewayRequest"
          },
          "description": {
            "type": "string"
          },
          "nmiGatewayRequest": {
            "$ref": "#/components/schemas/PaymentCreateNMIGatewayRequest"
          },
          "stripeGatewayRequest": {
            "$ref": "#/components/schemas/PaymentCreateStripeGatewayRequest"
          }
        }
      },
      "PaymentCreateNMIGatewayRequest": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "PaymentCreateStripeGatewayRequest": {
        "type": "object",
        "properties": {
          "apiSecretKey": {
            "type": "string"
          }
        }
      },
      "PaymentMeans": {
        "description": "The payment means associated with this offer",
        "type": "object",
        "properties": {
          "cardHolderName": {
            "description": "The card holder name",
            "type": "string"
          },
          "cardType": {
            "description": "The user's card type. Visa, Mastercard etc",
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "country": {
            "description": "The two digit country code for this card",
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultMeans": {
            "description": "Whether this card is the default",
            "type": "boolean"
          },
          "expirationMonth": {
            "description": "The card expiration month",
            "type": "integer",
            "format": "int64"
          },
          "expirationYear": {
            "description": "The card expiration year",
            "type": "integer",
            "format": "int64"
          },
          "externalPaymentMethodId": {
            "description": "The external (Spreedly) id for this payment method",
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "lastDigits": {
            "description": "The last 4 digits user's card",
            "type": "string"
          },
          "lastVerifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymentMeansState": {
            "description": "The card status",
            "type": "string",
            "enum": [
              "VALID",
              "INVALID",
              "ARCHIVED",
              "EXPIRED"
            ]
          },
          "paymentMethodId": {
            "description": "The id for this payment method",
            "type": "string"
          },
          "postalCode": {
            "description": "The zip/postal code for the card",
            "type": "string"
          },
          "type": {
            "description": "The user's payment means type. Now it can only be CREDIT_CARD",
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "usageLimitPerEvent": {
            "type": "integer",
            "format": "int32"
          },
          "verificationRequirement": {
            "type": "string",
            "enum": [
              "NOT_REQUIRED",
              "VERIFY_OVER_THRESHOLD",
              "VERIFY"
            ]
          }
        }
      },
      "PaymentMeansRequest": {
        "type": "object",
        "required": [
          "cardType",
          "countryCode",
          "tokenId"
        ],
        "properties": {
          "cardType": {
            "description": "The payment card type",
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "countryCode": {
            "description": "Country code for the card",
            "type": "string"
          },
          "recaptcha": {
            "description": "The client's Recaptcha response from Google",
            "type": "string"
          },
          "setDefault": {
            "description": "Should this card be default",
            "type": "boolean"
          },
          "tokenId": {
            "description": "The payment token id for the card",
            "type": "string"
          }
        }
      },
      "PaymentMeansUpdateRequest": {
        "type": "object",
        "required": [
          "expirationMonth",
          "expirationYear",
          "paymentMethodId",
          "postalCode"
        ],
        "properties": {
          "cardType": {
            "description": "The card type of the payment method being updated",
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "expirationMonth": {
            "description": "The country code to update the payment means with.",
            "type": "integer",
            "format": "int64"
          },
          "expirationYear": {
            "description": "The country code to update the payment means with.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method Id of the payment method to update",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code to update the payment means with",
            "type": "string"
          },
          "setDefault": {
            "description": "Should set this card as default",
            "type": "boolean"
          }
        }
      },
      "PaymentMethodConfigurationResponse": {
        "type": "object",
        "properties": {
          "afterpayPaymentData": {
            "$ref": "#/components/schemas/StripeDirectUserData"
          },
          "availablePaymentMethods": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREDIT_CARD",
                "PHYSICAL_POS_SQUARE",
                "ALIPAY",
                "WECHATPAY",
                "STRIPE_KLARNA",
                "STRIPE_AFTERPAY",
                "CASH",
                "NOT_REQUIRED"
              ]
            },
            "uniqueItems": true
          },
          "klarnaPaymentData": {
            "$ref": "#/components/schemas/StripeDirectUserData"
          }
        }
      },
      "PaymentMethodDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "cardHolderName": {
            "type": "string"
          },
          "cardLastDigits": {
            "type": "string"
          },
          "creditCardType": {
            "type": "string"
          },
          "paymentMethodType": {
            "type": "string"
          }
        }
      },
      "PaymentMethodsResponse": {
        "type": "object",
        "properties": {
          "paymentMeans": {
            "description": "User's list of payment means stored with payment service provider.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMeans"
            }
          },
          "supportedPaymentMethods": {
            "description": "Supported payment methods for this user.",
            "type": "array",
            "items": {
              "description": "Supported payment methods for this user.",
              "type": "string",
              "enum": [
                "CREDIT_CARD",
                "PHYSICAL_POS_SQUARE",
                "ALIPAY",
                "WECHATPAY",
                "STRIPE_KLARNA",
                "STRIPE_AFTERPAY",
                "CASH",
                "NOT_REQUIRED"
              ]
            }
          }
        }
      },
      "PaymentProcessOneDollarTestRequest": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "paymentMethodToken": {
            "type": "string"
          },
          "spreedlyGatewayId": {
            "type": "string"
          }
        }
      },
      "PaymentUpdateGatewayRequest": {
        "type": "object",
        "required": [
          "gatewayToken"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "gatewayToken": {
            "type": "string"
          }
        }
      },
      "PayoutMethodListResponse": {
        "type": "object",
        "properties": {
          "payoutMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutMethodResponse"
            }
          }
        }
      },
      "PayoutMethodResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "LAST_ATTEMPT_FAILED"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "PAYPAL",
              "BANK_ACCOUNT"
            ]
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PaypalPayoutRequest": {
        "type": "object",
        "properties": {
          "paypalToken": {
            "type": "string"
          }
        }
      },
      "PerformerAlias": {
        "type": "object",
        "properties": {
          "aliasName": {
            "description": "The performer profile aliasName",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The ID for the performer aliasName",
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          }
        }
      },
      "PerformerLanguage": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PerformerLanguageRequest": {
        "description": "Languages for the Performer",
        "type": "object",
        "required": [
          "language",
          "locale",
          "name"
        ],
        "properties": {
          "language": {
            "description": "The performer's language",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "locale": {
            "description": "The performer's language locale",
            "type": "string"
          },
          "name": {
            "description": "The performer's language name",
            "type": "string"
          }
        }
      },
      "PerformerProfile": {
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerAlias"
            },
            "uniqueItems": true
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/Media"
          },
          "defaultMinorCategory": {
            "$ref": "#/components/schemas/MinorCategory"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "homeCity": {
            "$ref": "#/components/schemas/City"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerLanguage"
            },
            "uniqueItems": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "majorCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategory"
            },
            "uniqueItems": true
          },
          "managementOrganization": {
            "type": "string"
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Media"
            },
            "uniqueItems": true
          },
          "minorCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinorCategory"
            },
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "primaryLanguage": {
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "primaryLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfile"
            },
            "uniqueItems": true
          },
          "promoter": {
            "type": "string"
          },
          "recordLabel": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerProfileMl"
            }
          }
        }
      },
      "PerformerProfileMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "managementOrganization": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "performerProfile": {
            "$ref": "#/components/schemas/PerformerProfile"
          },
          "primaryLanguage": {
            "type": "string"
          },
          "promoter": {
            "type": "string"
          },
          "recordLabel": {
            "type": "string"
          }
        }
      },
      "PerformerProfileResponse": {
        "type": "object",
        "properties": {
          "aliases": {
            "description": "The performer's aliases",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerAlias"
            },
            "uniqueItems": true
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultMinorCategory": {
            "$ref": "#/components/schemas/MinorCategoryResponse"
          },
          "description": {
            "description": "The performer's description",
            "type": "string"
          },
          "homeCity": {
            "description": "The performer's home city",
            "type": "string"
          },
          "homeCountry": {
            "description": "The performer's home country",
            "type": "string"
          },
          "homeGeoRegion": {
            "description": "The performer's home geoRegion",
            "type": "string"
          },
          "id": {
            "description": "The unique id of the performer",
            "type": "string"
          },
          "majorCategories": {
            "description": "The major categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "managementOrganization": {
            "description": "The performer's management company",
            "type": "string"
          },
          "medias": {
            "description": "Pictures and videos of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minorCategories": {
            "description": "The minor categories of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinorCategoryResponse"
            }
          },
          "name": {
            "description": "The performer's name",
            "type": "string"
          },
          "primaryLanguage": {
            "description": "The performer's primary language",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "primaryLocations": {
            "description": "The performer's primary locations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileResponse"
            }
          },
          "promoter": {
            "description": "The performer's promoter",
            "type": "string"
          },
          "recordLabel": {
            "description": "The performer's record company",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "The performer's social media information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaResponse"
            }
          },
          "translation": {
            "$ref": "#/components/schemas/PerformerProfileMl"
          }
        }
      },
      "PerformerProfileUpdateRequest": {
        "type": "object",
        "required": [
          "majorCategoryIds",
          "minorCategoryIds",
          "name",
          "performerId"
        ],
        "properties": {
          "aliases": {
            "description": "The performer's aliases",
            "type": "array",
            "items": {
              "description": "The performer's aliases",
              "type": "string"
            }
          },
          "clientId": {
            "description": "The id of the client related to the Performer",
            "type": "integer",
            "format": "int64"
          },
          "defaultMediaId": {
            "description": "Default media ID for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "defaultMinorCategoryId": {
            "description": "Default minor category Id for for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "homeCityId": {
            "description": "Home City ID for the Performer",
            "type": "integer",
            "format": "int64"
          },
          "languages": {
            "description": "Languages for the Performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerLanguageRequest"
            }
          },
          "majorCategoryIds": {
            "description": "The performer's major categories",
            "type": "array",
            "items": {
              "description": "The performer's major categories",
              "type": "integer",
              "format": "int64"
            }
          },
          "managementOrganization": {
            "description": "Management organization for the Performer",
            "type": "string"
          },
          "mediaIds": {
            "description": "Media Ids for the Performer's media",
            "type": "array",
            "items": {
              "description": "Media Ids for the Performer's media",
              "type": "integer",
              "format": "int64"
            }
          },
          "minorCategoryIds": {
            "description": "The list of ID for the minor categories the Performer falls into",
            "type": "array",
            "items": {
              "description": "The list of ID for the minor categories the Performer falls into",
              "type": "integer",
              "format": "int64"
            }
          },
          "name": {
            "description": "The performer's name",
            "type": "string"
          },
          "performerDescription": {
            "description": "Description for the Performer",
            "type": "string"
          },
          "performerId": {
            "description": "Usher's first name",
            "type": "string"
          },
          "primaryLanguage": {
            "description": "Primary language for the Performer",
            "type": "string",
            "enum": [
              "ENGLISH",
              "FRENCH",
              "SPANISH"
            ]
          },
          "primaryLocationIds": {
            "description": "The Performers primary location profile ids",
            "type": "array",
            "items": {
              "description": "The Performers primary location profile ids",
              "type": "integer",
              "format": "int64"
            }
          },
          "promoter": {
            "description": "Promoter for the Performer",
            "type": "string"
          },
          "recordLabel": {
            "description": "Record label for the Performer",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "Social media list for the Performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaRequest"
            }
          }
        }
      },
      "PerformerTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "managementOrganization": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "primaryLanguage": {
            "type": "string"
          },
          "promoter": {
            "type": "string"
          },
          "recordLabel": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "PerformerTranslationRequest": {
        "type": "object",
        "required": [
          "performerProfileId",
          "performerTranslationRequestItems"
        ],
        "properties": {
          "performerProfileId": {
            "type": "string"
          },
          "performerTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerTranslation"
            }
          }
        }
      },
      "PipelinePauseStateSettings": {
        "type": "object",
        "properties": {
          "pipelineId": {
            "type": "string"
          }
        }
      },
      "PreconfiguredAgeBasedChoiceItem": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "minAge": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PreconfiguredBoxOfficeConfiguration": {
        "type": "object",
        "properties": {
          "boxOfficeEnabled": {
            "type": "boolean"
          },
          "completedUserProfileRequired": {
            "type": "boolean"
          },
          "mevRequired": {
            "type": "boolean"
          }
        }
      },
      "PreconfiguredClientAgeBasedChoiceConfiguration": {
        "type": "object",
        "properties": {
          "adult": {
            "$ref": "#/components/schemas/PreconfiguredAgeBasedChoiceItem"
          },
          "child": {
            "$ref": "#/components/schemas/PreconfiguredAgeBasedChoiceItem"
          },
          "senior": {
            "$ref": "#/components/schemas/PreconfiguredAgeBasedChoiceItem"
          }
        }
      },
      "PreconfiguredFeeConfiguration": {
        "type": "object",
        "properties": {
          "bidFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          },
          "clientFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          },
          "defaultBuyerFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          },
          "resaleBuyerFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          },
          "resaleClientFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          },
          "resaleSellerFeeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreconfiguredFeeConfigurationItem"
            }
          }
        }
      },
      "PreconfiguredFeeConfigurationItem": {
        "type": "object",
        "properties": {
          "applicationFeeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "applyOrder": {
            "type": "integer",
            "format": "int32"
          },
          "breakdownDisplayOption": {
            "type": "string",
            "enum": [
              "ALL",
              "EMAIL"
            ]
          },
          "categoryTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "code": {
            "type": "string"
          },
          "customFeeApplicationRule": {
            "type": "string",
            "enum": [
              "NONE",
              "ALL",
              "ONLY_TAXABLE"
            ]
          },
          "feeName": {
            "type": "string"
          },
          "feeNameLong": {
            "type": "string"
          },
          "feeReason": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          },
          "feeSubReason": {
            "type": "string",
            "enum": [
              "STATE_TAX",
              "FEDERAL_TAX"
            ]
          },
          "includedInBase": {
            "type": "boolean"
          },
          "onLift": {
            "type": "boolean"
          },
          "onPreviousFee": {
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeTranslation"
            }
          },
          "value": {
            "type": "number"
          },
          "valueConfiguration": {
            "$ref": "#/components/schemas/FeeValueConfiguration"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "AMOUNT",
              "PERCENTAGE",
              "PROFIT_PERCENTAGE",
              "STEPPED"
            ]
          }
        }
      },
      "PricingTier": {
        "type": "object",
        "required": [
          "price"
        ],
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          }
        }
      },
      "ProcessExternalPaymentBoxOfficeRequest": {
        "type": "object",
        "required": [
          "customerOrderId",
          "signedExternalPaymentKey"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "generateQrCode": {
            "type": "boolean"
          },
          "mevSerialNumber": {
            "type": "string"
          },
          "signedExternalPaymentKey": {
            "type": "string"
          }
        }
      },
      "ProcessExternalPaymentBoxOfficeResponse": {
        "type": "object",
        "properties": {
          "cardBrand": {
            "type": "string"
          },
          "checkoutStatus": {
            "type": "string",
            "enum": [
              "COMPLETED",
              "IN_PROGRESS",
              "PENDING",
              "CANCELED",
              "REJECTED",
              "FAILED",
              "CANCEL_REQUESTED"
            ]
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "lastDigits": {
            "type": "string"
          },
          "qrCode": {
            "type": "string"
          },
          "qrCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalPurchaseQrCodeDataResponse"
            }
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProcessRefundClientRequest": {
        "type": "object",
        "properties": {
          "blacklistUser": {
            "type": "boolean"
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "offerList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessRefundOfferRequestItem"
            }
          },
          "payoutPreventionType": {
            "type": "string",
            "enum": [
              "RESALE_FROM_CURRENT_OFFER"
            ]
          },
          "reason": {
            "type": "string"
          },
          "refundProcessingMode": {
            "type": "string",
            "enum": [
              "REGULAR",
              "FORCE_SUCCESS_ON_FAILURE",
              "FORCE_SUCCESS_WITHOUT_ATTEMPT"
            ]
          },
          "sendNotifications": {
            "type": "boolean"
          },
          "shouldRevokeInventory": {
            "type": "boolean"
          },
          "validationType": {
            "type": "string",
            "enum": [
              "OWNERSHIP",
              "FINAL_NON_REVOKED_OFFER",
              "NONE"
            ]
          }
        }
      },
      "ProcessRefundOfferInventoryFeeRequestItem": {
        "type": "object",
        "properties": {
          "feeId": {
            "type": "integer",
            "format": "int64"
          },
          "refundAmount": {
            "type": "number"
          }
        }
      },
      "ProcessRefundOfferInventoryRequestItem": {
        "type": "object",
        "properties": {
          "baseAmountRefund": {
            "type": "number"
          },
          "feeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessRefundOfferInventoryFeeRequestItem"
            }
          },
          "feeRefundType": {
            "type": "string",
            "enum": [
              "ALL_FEES",
              "PROVIDED_LIST"
            ]
          },
          "inventoryItemId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProcessRefundOfferRequestItem": {
        "type": "object",
        "properties": {
          "inventoryDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessRefundOfferInventoryRequestItem"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProcessedTokenPriceData": {
        "type": "object",
        "properties": {
          "amountDiscountToProvideOnUpgrade": {
            "type": "number"
          },
          "resalePurchasePrice": {
            "type": "number"
          }
        }
      },
      "PromoCodeClientDataListResponse": {
        "type": "object",
        "properties": {
          "dataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoCodeClientDataListResponseItem"
            }
          }
        }
      },
      "PromoCodeClientDataListResponseItem": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "discountPercentage": {
            "type": "number"
          },
          "discountValue": {
            "type": "number"
          },
          "discountValueType": {
            "type": "string",
            "enum": [
              "PERCENTAGE_DISCOUNT",
              "FLAT_PER_INVENTORY_DISCOUNT",
              "FLAT_PER_PARENT_INVENTORY_DISCOUNT"
            ]
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "globalUseCount": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryCategoryWhitelist": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ARCHIVED",
              "EXPIRED",
              "LIMIT_REACHED",
              "DEFAULT"
            ]
          },
          "totalDiscountAmountGiven": {
            "type": "number"
          },
          "totalEventAccessInventoryAffected": {
            "type": "integer",
            "format": "int32"
          },
          "totalInventoryAffected": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PromoterAssignmentNotificationCommonData": {
        "type": "object",
        "properties": {
          "assigneeEmailAddress": {
            "type": "string"
          },
          "lockToken": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PromoterAvailableTokenAssignmentGroupListResponse": {
        "type": "object",
        "properties": {
          "accessControlConfigurationResponse": {
            "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
          },
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "additionalDescription": {
            "description": "Additional description for the event",
            "type": "string"
          },
          "addressLine1": {
            "description": "The address line 1 of the location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the location",
            "type": "string"
          },
          "analyticsTrackers": {
            "description": "Analytics trackers for this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventAnalyticsTrackerResponse"
            }
          },
          "announcement": {
            "description": "Any announcement for the event",
            "type": "string"
          },
          "assigneeTokenInformation": {
            "description": "Information for the tokens that others have assigned to this user for an event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "auxiliaryMarketplaceInformation": {
            "description": "The list of auxiliary marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "bids": {
            "description": "Information for the bids that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          },
          "boxOfficeConfig": {
            "$ref": "#/components/schemas/GetBoxOfficeConfigResponse"
          },
          "categoryDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "clientIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "countryName": {
            "description": "The country in which the event takes place",
            "type": "string"
          },
          "creatorClientName": {
            "description": "The creator client name of the event",
            "type": "string"
          },
          "currency": {
            "description": "The currency for the recommended price",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deepLinkForStreaming": {
            "description": "The deepLink to my yoop streaming page",
            "type": "string"
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultPurchasePeopleQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "discountCodesAllowed": {
            "type": "boolean"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "eventAccessibilityType": {
            "description": "An event's accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "description": "The date time of this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventRestrictions": {
            "description": "The restrictions to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventTimelineGroups": {
            "description": "The timeline to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupResponse"
            }
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeConfigurationResponse": {
            "$ref": "#/components/schemas/EventFeeConfigurationResponse"
          },
          "forceIdCheck": {
            "type": "boolean"
          },
          "gateUrl": {
            "description": "The gate url for this event",
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of the geographic region in which the event takes place (e.g. state)",
            "type": "string"
          },
          "hasActiveOrFuturePrivateMarketplace": {
            "description": "Represent if event contain at least one active password protected marketplace in open or open in future state",
            "type": "boolean"
          },
          "hasAtLeastOneSalesGroup": {
            "description": "Represent if event contain at least one sales group",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this event",
            "type": "string"
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "latitude": {
            "description": "The latitude of the event location",
            "type": "number"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "liveStreamEndDate": {
            "description": "The date time this event's live stream ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "liveStreamReplaySeconds": {
            "description": "The amount of time, in seconds, the live stream can be replayed",
            "type": "integer",
            "format": "int32"
          },
          "liveStreamStartDate": {
            "description": "The date and time the event live stream takes place in local time. ",
            "type": "string",
            "format": "date-time"
          },
          "locationId": {
            "description": "The name of the event location",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location",
            "type": "string"
          },
          "longitude": {
            "description": "The longitude of the event location",
            "type": "number"
          },
          "marketplaceInformation": {
            "description": "The list of marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "media": {
            "description": "Additional images and video for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "description": "The amount of time, in seconds, purchased items must hold before being able to resale",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "notificationSubscriptions": {
            "description": "The subscription options for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionResponse"
            }
          },
          "numInTour": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "optionalLongDescription": {
            "description": "An optional long description of the event",
            "type": "string"
          },
          "optionalShortDescription": {
            "description": "An optional short description of the event",
            "type": "string"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "A list of performers that will be performing at the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicPerformerResponse"
            }
          },
          "postalCode": {
            "description": "The postal code for the location",
            "type": "string"
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "receiptResponseList": {
            "description": "The receipts associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderReceiptResponse"
            }
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatChart": {
            "$ref": "#/components/schemas/GetSeatChartResponse"
          },
          "seatMap": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatsIOChartEventKey": {
            "type": "string"
          },
          "shippingGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventGeoRestrictionResponse"
            }
          },
          "shortName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "sponsorGroups": {
            "description": "The sponsor groups for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "state": {
            "description": "The state of this event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "tokenAssignmentGroupList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoterTokenAssignmentGroupResponse"
            }
          },
          "tokenInformation": {
            "description": "Information for the tokens that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "tourResponse": {
            "$ref": "#/components/schemas/TourResponse"
          },
          "transactionPeriodMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "userEventKey": {
            "description": "The event key the user has",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "The user uuid prefix for the event",
            "type": "string"
          },
          "usherUUID": {
            "description": "The usher uuid for the event",
            "type": "string"
          },
          "vanityName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "videoStreamMedias": {
            "description": "Video stream medias for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          }
        }
      },
      "PromoterEventCategoryDetailResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryName": {
            "type": "string"
          },
          "soldInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalCashForClient": {
            "type": "number"
          },
          "totalCommission": {
            "type": "number"
          },
          "totalInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalSales": {
            "type": "number"
          }
        }
      },
      "PromoterEventCompletedTransactionResponse": {
        "type": "object",
        "properties": {
          "cashForClient": {
            "type": "number"
          },
          "commission": {
            "type": "number"
          },
          "recipientName": {
            "type": "string"
          }
        }
      },
      "PromoterEventDetailResponse": {
        "type": "object",
        "properties": {
          "eventInfo": {
            "$ref": "#/components/schemas/EventListResponseItem"
          },
          "soldInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalCommission": {
            "type": "number"
          },
          "totalInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalSales": {
            "type": "number"
          }
        }
      },
      "PromoterEventListResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoterEventDetailResponse"
            }
          }
        }
      },
      "PromoterEventOverviewResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoterEventCategoryDetailResponse"
            }
          },
          "eventInfo": {
            "$ref": "#/components/schemas/EventListResponseItem"
          },
          "soldInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalCashForClient": {
            "type": "number"
          },
          "totalCommission": {
            "type": "number"
          },
          "totalInventory": {
            "type": "integer",
            "format": "int32"
          },
          "totalSales": {
            "type": "number"
          }
        }
      },
      "PromoterEventTransactionDetailResponse": {
        "type": "object",
        "properties": {
          "inviteStatus": {
            "type": "string",
            "enum": [
              "DECLINED",
              "REVOKED",
              "BOUNCED"
            ]
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "recipientEmail": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "DECLINED"
            ]
          },
          "statusDate": {
            "type": "string",
            "format": "date-time"
          },
          "tokenPrice": {
            "type": "number"
          },
          "totalTransactionAmount": {
            "type": "number"
          }
        }
      },
      "PromoterEventTransactionResponse": {
        "type": "object",
        "properties": {
          "completedTransactionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoterEventCompletedTransactionResponse"
            }
          },
          "pendingTransactionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoterEventTransactionDetailResponse"
            }
          }
        }
      },
      "PromoterSellingOfferGroupDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "archivedOfferGroupDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "description": {
            "type": "string"
          },
          "fineprint": {
            "type": "string"
          },
          "payoutDateTime": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "payoutMethodType": {
            "type": "string"
          },
          "payoutMethodUsername": {
            "type": "string"
          },
          "payoutTransactionId": {
            "type": "integer",
            "format": "int64"
          },
          "resaleOfferGroupDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "soldOfferDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
            }
          },
          "totalCashOwed": {
            "type": "string"
          },
          "totalCommission": {
            "type": "string"
          }
        }
      },
      "PromoterTokenAssignmentGroupResponse": {
        "type": "object",
        "properties": {
          "availableTokens": {
            "type": "integer",
            "format": "int32"
          },
          "categoryAccessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "categoryChildGroupingType": {
            "type": "string",
            "enum": [
              "BUNDLE",
              "GROUP",
              "HOTEL_ROOM",
              "TABLE"
            ]
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryName": {
            "type": "string"
          },
          "minimumSellingPrice": {
            "type": "number"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "sectionCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenAssignmentGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PromoterTokenAssignmentResponse": {
        "type": "object",
        "properties": {
          "lockToken": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "signedOfferGroupId": {
            "type": "string"
          }
        }
      },
      "PromoterTransactionDetailResponse": {
        "type": "object",
        "properties": {
          "buyerEmail": {
            "type": "string"
          },
          "buyerName": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "emailDate": {
            "type": "string",
            "format": "date-time"
          },
          "inviteStatus": {
            "type": "string",
            "enum": [
              "DECLINED",
              "REVOKED",
              "BOUNCED"
            ]
          },
          "paymentMethodType": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PHYSICAL_POS_SQUARE",
              "ALIPAY",
              "WECHATPAY",
              "STRIPE_KLARNA",
              "STRIPE_AFTERPAY",
              "CASH",
              "NOT_REQUIRED"
            ]
          },
          "payoutDate": {
            "type": "string",
            "format": "date-time"
          },
          "payoutMethod": {
            "type": "string"
          },
          "payoutStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "INITIATED",
              "SUCCESS",
              "FAILED",
              "PREVENTED",
              "CASH_SUCCESS"
            ]
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "PENDING",
              "DECLINED"
            ]
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "totalCashForClient": {
            "type": "number"
          },
          "totalCommission": {
            "type": "number"
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PromoterUserPurchaseInviteThymeleaf": {
        "type": "object",
        "properties": {
          "assigneeEmailAddress": {
            "type": "string"
          },
          "deepLinkPromoterUserAssignment": {
            "type": "string"
          },
          "deepLinkPromoterUserDecline": {
            "type": "string"
          },
          "inventoryData": {
            "$ref": "#/components/schemas/InventoryItemCollectionThymeleaf"
          },
          "offerGroupDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "paymentComplete": {
            "type": "boolean"
          },
          "paymentMethodType": {
            "type": "string"
          },
          "sellingOfferGroupDetails": {
            "$ref": "#/components/schemas/PromoterSellingOfferGroupDetailsThymeleaf"
          }
        }
      },
      "PurchaseCheckoutRequest": {
        "type": "object",
        "required": [
          "offerGroupId"
        ],
        "properties": {
          "inventoryChoiceIds": {
            "description": "The choice config of this purchase.",
            "type": "array",
            "items": {
              "description": "The choice config of this purchase.",
              "type": "integer",
              "format": "int64"
            }
          },
          "numTokens": {
            "description": "The number of tokens to purchase.",
            "type": "integer",
            "format": "int32"
          },
          "offerGroupId": {
            "description": "ID of the offer group for which this purchase request applies to",
            "type": "integer",
            "format": "int64"
          },
          "offerPerTokenPrice": {
            "description": "The price per token to purchase.",
            "type": "number"
          },
          "requestGuid": {
            "type": "string"
          },
          "upgradeCheckoutRequest": {
            "$ref": "#/components/schemas/OfferUpgradeCheckoutRequest"
          }
        }
      },
      "PurchaseOfferRequest": {
        "type": "object",
        "required": [
          "offerGroupId",
          "purchaseToken",
          "seatCodes"
        ],
        "properties": {
          "choiceRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferCategoryChoiceRequest"
            }
          },
          "customerOrderCreationRequestData": {
            "$ref": "#/components/schemas/CustomerOrderCreationRequestData"
          },
          "externalNotificationSubscriptionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fraudSessionId": {
            "description": "The session ID related to any fraud checks performed prior to the purchase.",
            "type": "string"
          },
          "offerAddress": {
            "$ref": "#/components/schemas/AddressRequest"
          },
          "offerChoiceRequest": {
            "$ref": "#/components/schemas/OfferChoiceRequest"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "oldOfferId": {
            "description": "ID of any offer that this purchase replaces. Used when Buy Now is triggered with an existing offer. The old offer will be revoked.",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodId": {
            "description": "The payment method id for this offer",
            "type": "integer",
            "format": "int64"
          },
          "purchaseToken": {
            "description": "The purchase token returned in the checkout response.",
            "type": "string"
          },
          "seatCodes": {
            "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
            "type": "array",
            "items": {
              "description": "The seat codes to purchase. These should be the same codes returned along with the purchase token from checkout.",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          }
        }
      },
      "PurchaseResponse": {
        "type": "object",
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "RedactGatewayRequest": {
        "type": "object",
        "properties": {
          "gatewayToken": {
            "type": "string"
          }
        }
      },
      "RefundCheckoutResponse": {
        "type": "object",
        "properties": {
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundOffer"
            }
          }
        }
      },
      "RefundInventoryItem": {
        "description": "The inventory items that can be refunded.",
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string"
          },
          "row": {
            "type": "string"
          },
          "rowCode": {
            "type": "string"
          },
          "seat": {
            "type": "string"
          },
          "seatCode": {
            "type": "string"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "section": {
            "type": "string"
          },
          "sectionCode": {
            "type": "string"
          },
          "tokenId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RefundOffer": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount per token for this offer",
            "type": "number"
          },
          "customerOrderId": {
            "description": "The ID of the order this offer was a part of",
            "type": "integer",
            "format": "int64"
          },
          "errorString": {
            "type": "string"
          },
          "id": {
            "description": "The ID of the offer",
            "type": "integer",
            "format": "int64"
          },
          "inventoryItems": {
            "description": "The inventory items that can be refunded.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundInventoryItem"
            }
          },
          "paymentMeans": {
            "$ref": "#/components/schemas/PaymentMeans"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "RefundOfferRequest": {
        "type": "object",
        "properties": {
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RejectClientUserEventCollabRequest": {
        "type": "object",
        "required": [
          "approverClientId",
          "inviteId"
        ],
        "properties": {
          "approverClientId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "RelatedOfferGroupListRequest": {
        "type": "object",
        "required": [
          "marketplaceId"
        ],
        "properties": {
          "cartOfferGroupIds": {
            "description": "List of offerGroupId that the user is currently purchasing. If null, the yoop currently in the user inventory is used to calculate this list.",
            "type": "array",
            "items": {
              "description": "List of offerGroupId that the user is currently purchasing. If null, the yoop currently in the user inventory is used to calculate this list.",
              "type": "integer",
              "format": "int64"
            }
          },
          "categoryTypes": {
            "description": "The category types that offer groups should belong to.",
            "type": "array",
            "items": {
              "description": "The category types that offer groups should belong to.",
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "filterCartItems": {
            "description": "Whether to filter offer groups that are already in cartOfferGroupIds",
            "type": "boolean"
          },
          "includeSoldOut": {
            "type": "boolean"
          },
          "marketplaceId": {
            "description": "Marketplace ID to load related offer groups for.",
            "type": "integer",
            "format": "int64"
          },
          "onlyUpsells": {
            "description": "Whether to only return offer groups that are considered for upsell.",
            "type": "boolean"
          },
          "pageSize": {
            "description": "The page size to load. Defaults to 20.",
            "type": "integer",
            "format": "int32"
          },
          "previousPageKey": {
            "description": "The key from the previous page. If null, the first page is returned.",
            "type": "string"
          }
        }
      },
      "RelatedOfferGroupListRequestV2": {
        "type": "object",
        "required": [
          "marketplaceId"
        ],
        "properties": {
          "cartOfferGroupIds": {
            "description": "List of offerGroupId that the user is currently purchasing. If null, the yoop currently in the user inventory is used to calculate this list.",
            "type": "array",
            "items": {
              "description": "List of offerGroupId that the user is currently purchasing. If null, the yoop currently in the user inventory is used to calculate this list.",
              "type": "integer",
              "format": "int64"
            }
          },
          "categoryTypes": {
            "description": "The category types that offer groups should belong to.",
            "type": "array",
            "items": {
              "description": "The category types that offer groups should belong to.",
              "type": "string",
              "enum": [
                "EVENT_ACCESS",
                "MERCHANDISE",
                "ADD_ON",
                "CHARITY",
                "COLLECTIBLE"
              ]
            }
          },
          "includeSoldOut": {
            "type": "boolean"
          },
          "marketplaceId": {
            "description": "Marketplace ID to load related offer groups for.",
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "description": "The page size to load. Defaults to 20.",
            "type": "integer",
            "format": "int32"
          },
          "previousPageKey": {
            "description": "The key from the previous page. If null, the first page is returned.",
            "type": "string"
          }
        }
      },
      "RelatedOfferGroupListResponse": {
        "type": "object",
        "properties": {
          "missingRequirements": {
            "description": "A display string explaining any missing requirements to purchase related offer groups.",
            "type": "string"
          },
          "nextPageKey": {
            "description": "The key to use for requesting the next page. Will be null if there isno more pages.",
            "type": "string"
          },
          "offerGroups": {
            "description": "The list of offer groups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferGroupResponse"
            }
          }
        }
      },
      "RemoveEventCollaboratorsRequest": {
        "type": "object",
        "properties": {
          "clientUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RemoveUserResult": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "ReportingCategoryResponse": {
        "type": "object",
        "properties": {
          "accessTokensPerInventory": {
            "type": "integer",
            "format": "int32"
          },
          "accessedTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "boxOfficeSoldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "soldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalSales": {
            "type": "number"
          },
          "totalTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          }
        }
      },
      "ReportingEventDetailResponse": {
        "type": "object",
        "properties": {
          "boxOfficeSales": {
            "type": "number"
          },
          "boxOfficeSoldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "categoryResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingCategoryResponse"
            }
          },
          "cityName": {
            "type": "string"
          },
          "clientUserEventRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "defaultMediaUrl": {
            "type": "string"
          },
          "doorsCloseDate": {
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "locationName": {
            "type": "string"
          },
          "marketplaceResponseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMarketplaceResponse"
            }
          },
          "onlineHideDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "pendingOffersInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "reportingEventFeeData": {
            "$ref": "#/components/schemas/ReportingEventFeeData"
          },
          "salesByCategoryType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetReportingInventoryCategoryTypeSalesResponse"
            }
          },
          "salesGroupTree": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupNodeResponse"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "totalInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "wonInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "wonSales": {
            "type": "number"
          }
        }
      },
      "ReportingEventFeeData": {
        "type": "object",
        "properties": {
          "feeBreakdown": {
            "$ref": "#/components/schemas/ReportingEventFeeDataListResponse"
          },
          "includedFeeBreakdown": {
            "$ref": "#/components/schemas/ReportingEventFeeDataListResponse"
          },
          "totalRevenueWithSalesAndFees": {
            "type": "number"
          }
        }
      },
      "ReportingEventFeeDataListItemResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "feeName": {
            "type": "string"
          },
          "feeReason": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "PROFIT_SHARE",
              "TAX",
              "YOOP",
              "ORGANIZER_CUT",
              "CUSTOM"
            ]
          }
        }
      },
      "ReportingEventFeeDataListResponse": {
        "type": "object",
        "properties": {
          "feeDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingEventFeeDataListItemResponse"
            }
          },
          "totalFeeAmount": {
            "type": "number"
          }
        }
      },
      "ReportingEventListResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingEventListResponseItem"
            }
          },
          "nextPageKey": {
            "description": "The key to use for requesting the next page. Will be null if there isno more pages.",
            "type": "string"
          }
        }
      },
      "ReportingEventListResponseItem": {
        "type": "object",
        "properties": {
          "activeChildMarketplaceResponse": {
            "$ref": "#/components/schemas/ReportingMarketplaceResponse"
          },
          "activeMarketplaceResponse": {
            "$ref": "#/components/schemas/ReportingMarketplaceResponse"
          },
          "boxOfficeSales": {
            "type": "number"
          },
          "boxOfficeSoldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "categoryDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "cityName": {
            "type": "string"
          },
          "clientUserEventRoleInfo": {
            "$ref": "#/components/schemas/GetClientRoleInfoResponse"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "defaultMediaUrl": {
            "type": "string"
          },
          "doorsCloseDate": {
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "locationName": {
            "type": "string"
          },
          "nextMarketplace": {
            "$ref": "#/components/schemas/ReportingMarketplaceResponse"
          },
          "onlineHideDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "pendingOffersInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "salesByCategoryType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetReportingInventoryCategoryTypeSalesResponse"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "totalInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "wonInventoryCount": {
            "type": "integer",
            "format": "int64"
          },
          "wonSales": {
            "type": "number"
          }
        }
      },
      "ReportingGroupSalesSummary": {
        "type": "object",
        "properties": {
          "boxOfficeSales": {
            "type": "number"
          },
          "boxOfficeSoldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "The id of this group (The section or category id.",
            "type": "integer",
            "format": "int64"
          },
          "groupName": {
            "description": "The name of this group (The section or category name.",
            "type": "string"
          },
          "inventoryCategoryType": {
            "type": "string",
            "enum": [
              "EVENT_ACCESS",
              "MERCHANDISE",
              "ADD_ON",
              "CHARITY",
              "COLLECTIBLE"
            ]
          },
          "offerGroupSectionsWithUnsoldCount": {
            "description": "Count of offer group sections with unsold inventory (active listings).",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupsWithUnsoldCount": {
            "type": "integer",
            "format": "int64"
          },
          "promoterCommissionRate": {
            "type": "number",
            "format": "double"
          },
          "sales": {
            "description": "Total sales from inventory in the group.",
            "type": "number"
          },
          "sectionNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "soldInventorySummary": {
            "$ref": "#/components/schemas/InventorySummary"
          },
          "subcategoryBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingSubcategorySalesSummary"
            }
          },
          "totalUpgradedInto": {
            "type": "integer",
            "format": "int32"
          },
          "totalUpgradedOut": {
            "type": "integer",
            "format": "int32"
          },
          "unsoldInventorySummary": {
            "$ref": "#/components/schemas/InventorySummary"
          }
        }
      },
      "ReportingMarketplaceDetailResponse": {
        "type": "object",
        "properties": {
          "childMarketplaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMarketplaceResponse"
            }
          },
          "primaryMarketplace": {
            "$ref": "#/components/schemas/ReportingMarketplaceResponse"
          }
        }
      },
      "ReportingMarketplaceResponse": {
        "type": "object",
        "properties": {
          "boxOfficeSales": {
            "type": "number"
          },
          "boxOfficeSoldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "cashCollected": {
            "type": "number"
          },
          "endCalculateWinnerTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "forceAllocationDate": {
            "type": "string",
            "format": "date-time"
          },
          "freeClientGuestTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceCode": {
            "type": "string"
          },
          "marketplaceDisplayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingOfferGroupResponse"
            }
          },
          "offerGroupsWithUnsoldCount": {
            "type": "integer",
            "format": "int64"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "pendingOffersSalesSum": {
            "type": "integer",
            "format": "int64"
          },
          "pendingOffersTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "profitFees": {
            "type": "number"
          },
          "sales": {
            "type": "number"
          },
          "soldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "soldTokenCountViaBids": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "enum": [
              "CANCELLED",
              "PAUSED",
              "WINNERS_SELECTED",
              "ALLOCATE_READY"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "unsoldTokenCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReportingMarketplaceSalesResponse": {
        "type": "object",
        "properties": {
          "salesBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingGroupSalesSummary"
            }
          },
          "salesBreakdownByCategoryType": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReportingGroupSalesSummary"
              }
            }
          }
        }
      },
      "ReportingMetricGender": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportingMetricInteger": {
        "type": "object",
        "properties": {
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportingMetricInventoryAssignmentStatus": {
        "description": "The breakdown of assignment status of inventory.",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "BUYER",
              "EMAIL_RECIPIENT",
              "ADULT_GUEST",
              "CHILD_GUEST",
              "UNASSIGNED"
            ]
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportingMetricLocation": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/Location"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportingOfferGroupResponse": {
        "type": "object",
        "properties": {
          "averageQualifyingOfferAmount": {
            "type": "number"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "demand": {
            "type": "string",
            "enum": [
              "NORMAL",
              "HIGH",
              "DEMAND_EXCEEDS_SUPPLY"
            ]
          },
          "description": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "historicalAveragePrice": {
            "type": "number"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lostOfferTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "minimumQualifyingPrice": {
            "type": "number"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "pendingOffersSalesSum": {
            "type": "integer",
            "format": "int64"
          },
          "pendingOffersTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "reservePrice": {
            "type": "number"
          },
          "sales": {
            "type": "number"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "soldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "soldTokenCountViaBids": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "unsoldTokenCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReportingSubcategorySalesSummary": {
        "type": "object",
        "properties": {
          "categoryName": {
            "description": "The name of sub-category",
            "type": "string"
          },
          "discountedBoxOfficeSales": {
            "type": "number"
          },
          "discountedPrice": {
            "type": "number"
          },
          "discountedTotalSales": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "isUpgradeHappen": {
            "type": "boolean"
          },
          "nonUpgradePurchasedAmount": {
            "type": "number"
          },
          "nonUpgradePurchasedCount": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "soldInventoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "totalBoxOfficeSoldInventory": {
            "type": "integer",
            "format": "int32"
          },
          "upgradedIntoAmount": {
            "type": "number"
          },
          "upgradedIntoCount": {
            "type": "integer",
            "format": "int32"
          },
          "upgradedOutAmount": {
            "type": "number"
          },
          "upgradedOutCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReprintMevInvoiceRequest": {
        "type": "object",
        "required": [
          "customerOrderId",
          "serialNumber"
        ],
        "properties": {
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "ResaleForbiddenContext": {
        "type": "object",
        "properties": {
          "resaleForbiddenReason": {
            "type": "string",
            "enum": [
              "ASSIGNED_TOKEN",
              "ORIGIN_MARKETPLACE_TYPE_DRAW",
              "ORIGIN_MARKETPLACE_RESALE_DISALLOWED",
              "CATEGORY_RULES",
              "FREE_TOKEN"
            ]
          },
          "resaleForbiddenReasonName": {
            "type": "string"
          },
          "resaleForbiddenReasonString": {
            "type": "string"
          },
          "resaleProfitSharePercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ResaleInventoryItem": {
        "description": "The list of unsold inventory items.",
        "type": "object",
        "properties": {
          "accessed": {
            "description": "Has this inventory item been used to enter the event",
            "type": "boolean"
          },
          "inventoryItemId": {
            "description": "The ID of the inventory item.",
            "type": "integer",
            "format": "int64"
          },
          "parentInventoryItemId": {
            "description": "The parent ID of the inventory item if part of a group.",
            "type": "integer",
            "format": "int64"
          },
          "row": {
            "description": "The row for this inventory item. Will be null for general admission",
            "type": "string"
          },
          "rowCode": {
            "description": "The row code for this inventory item.",
            "type": "string"
          },
          "seat": {
            "description": "The seat for this inventory item. Will be null for general admission",
            "type": "string"
          },
          "seatCode": {
            "description": "The seat code for this inventory item.",
            "type": "string"
          },
          "section": {
            "description": "The section for this inventory item.",
            "type": "string"
          },
          "sectionCode": {
            "description": "The section code for this inventory item.",
            "type": "string"
          },
          "soldDate": {
            "description": "The Date of the inventory item sold if sold.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResaleMarketplace": {
        "description": "The list of marketplaces with resale offer groups",
        "type": "object",
        "properties": {
          "endDateTime": {
            "description": "End date of this marketplace",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "The ID for the marketplace",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupInformation": {
            "description": "The list of resale offer groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResaleOfferGroup"
            }
          },
          "startDateTime": {
            "description": "Start date of this marketplace",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResaleOfferGroup": {
        "type": "object",
        "properties": {
          "description": {
            "description": "The description of the offer group",
            "type": "string"
          },
          "fineprint": {
            "description": "The fineprint to display based on the current status of the offer group",
            "type": "string"
          },
          "id": {
            "description": "The id of the offer group.",
            "type": "integer",
            "format": "int64"
          },
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethodResponse"
          },
          "payoutReceipt": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "payoutStatus": {
            "description": "The payout status for this offer group",
            "type": "string",
            "enum": [
              "PENDING",
              "INITIATED",
              "SUCCESS",
              "FAILED",
              "PREVENTED",
              "CASH_SUCCESS"
            ]
          },
          "reservePrice": {
            "description": "The reserve price for each token",
            "type": "number"
          },
          "seatConfigurationType": {
            "description": "The seat configuration type - either GENERAL_ADMISSION or SEATED",
            "type": "string"
          },
          "soldInventoryItems": {
            "description": "The list of unsold inventory items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResaleInventoryItem"
            }
          },
          "unsoldInventoryItems": {
            "description": "The list of unsold inventory items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResaleInventoryItem"
            }
          }
        }
      },
      "ResendPurchaseNotificationRequest": {
        "type": "object",
        "properties": {
          "customerOrderIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "RetryRefundClientRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "refundTransactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RevokeClientUserClientInviteRequest": {
        "type": "object",
        "required": [
          "inviteId"
        ],
        "properties": {
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "RevokeClientUserEventCollabInviteRequest": {
        "type": "object",
        "properties": {
          "inviteId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "Route53InfoResponse": {
        "type": "object",
        "properties": {
          "recordName": {
            "type": "string"
          },
          "recordValue": {
            "type": "string"
          }
        }
      },
      "SalesGroupNodeResponse": {
        "type": "object",
        "properties": {
          "carouselMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMediaResponse"
            }
          },
          "categoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupNodeResponse"
            }
          },
          "code": {
            "type": "string"
          },
          "containsPrivateMarketplaceOfferGroups": {
            "type": "boolean"
          },
          "details": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UIDisplaySettings"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "maxPrice": {
            "type": "number"
          },
          "minPrice": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSection"
            }
          },
          "soldOut": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "SalesGroupTranslation": {
        "type": "object",
        "required": [
          "locale",
          "name",
          "title"
        ],
        "properties": {
          "details": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "SalesGroupTreeRequest": {
        "type": "object",
        "required": [
          "marketplaceId",
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "includeSoldOut": {
            "description": "Whether to include sold out sales groups",
            "type": "boolean"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "marketplaceCodeRequests": {
            "description": "Marketplace access codes and event ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceId": {
            "description": "ID of the marketplace to load offer groups for.",
            "type": "integer",
            "format": "int64"
          },
          "marketplaceIds": {
            "description": "ID of the marketplace to load sales group tree for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplace to load sales group tree for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "Number of tokens filter for sales group tree.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SalesGroupTreeResponse": {
        "type": "object",
        "properties": {
          "salesGroupTree": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesGroupNodeResponse"
            }
          }
        }
      },
      "SalesReportDateRange": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SalesReportDateRangesResponse": {
        "type": "object",
        "properties": {
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesReportDateRange"
            }
          }
        }
      },
      "ScheduleAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string"
          },
          "scheduleActionSettings": {
            "$ref": "#/components/schemas/ScheduleActionSettings"
          },
          "scheduleActionStartSettings": {
            "$ref": "#/components/schemas/ScheduleActionStartSettings"
          }
        }
      },
      "ScheduleActionSettings": {
        "type": "object",
        "properties": {
          "hlsId3SegmentTaggingSettings": {
            "$ref": "#/components/schemas/HlsId3SegmentTaggingScheduleActionSettings"
          },
          "hlsTimedMetadataSettings": {
            "$ref": "#/components/schemas/HlsTimedMetadataScheduleActionSettings"
          },
          "inputPrepareSettings": {
            "$ref": "#/components/schemas/InputPrepareScheduleActionSettings"
          },
          "inputSwitchSettings": {
            "$ref": "#/components/schemas/InputSwitchScheduleActionSettings"
          },
          "motionGraphicsImageActivateSettings": {
            "$ref": "#/components/schemas/MotionGraphicsActivateScheduleActionSettings"
          },
          "motionGraphicsImageDeactivateSettings": {
            "$ref": "#/components/schemas/MotionGraphicsDeactivateScheduleActionSettings"
          },
          "pauseStateSettings": {
            "$ref": "#/components/schemas/PauseStateScheduleActionSettings"
          },
          "scte35ReturnToNetworkSettings": {
            "$ref": "#/components/schemas/Scte35ReturnToNetworkScheduleActionSettings"
          },
          "scte35SpliceInsertSettings": {
            "$ref": "#/components/schemas/Scte35SpliceInsertScheduleActionSettings"
          },
          "scte35TimeSignalSettings": {
            "$ref": "#/components/schemas/Scte35TimeSignalScheduleActionSettings"
          },
          "staticImageActivateSettings": {
            "$ref": "#/components/schemas/StaticImageActivateScheduleActionSettings"
          },
          "staticImageDeactivateSettings": {
            "$ref": "#/components/schemas/StaticImageDeactivateScheduleActionSettings"
          }
        }
      },
      "ScheduleActionStartSettings": {
        "type": "object",
        "properties": {
          "fixedModeScheduleActionStartSettings": {
            "$ref": "#/components/schemas/FixedModeScheduleActionStartSettings"
          },
          "followModeScheduleActionStartSettings": {
            "$ref": "#/components/schemas/FollowModeScheduleActionStartSettings"
          },
          "immediateModeScheduleActionStartSettings": {
            "$ref": "#/components/schemas/ImmediateModeScheduleActionStartSettings"
          }
        }
      },
      "Scte35DeliveryRestrictions": {
        "type": "object",
        "properties": {
          "archiveAllowedFlag": {
            "type": "string"
          },
          "deviceRestrictions": {
            "type": "string"
          },
          "noRegionalBlackoutFlag": {
            "type": "string"
          },
          "webDeliveryAllowedFlag": {
            "type": "string"
          }
        }
      },
      "Scte35Descriptor": {
        "type": "object",
        "properties": {
          "scte35DescriptorSettings": {
            "$ref": "#/components/schemas/Scte35DescriptorSettings"
          }
        }
      },
      "Scte35DescriptorSettings": {
        "type": "object",
        "properties": {
          "segmentationDescriptorScte35DescriptorSettings": {
            "$ref": "#/components/schemas/Scte35SegmentationDescriptor"
          }
        }
      },
      "Scte35ReturnToNetworkScheduleActionSettings": {
        "type": "object",
        "properties": {
          "spliceEventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Scte35SegmentationDescriptor": {
        "type": "object",
        "properties": {
          "deliveryRestrictions": {
            "$ref": "#/components/schemas/Scte35DeliveryRestrictions"
          },
          "segmentNum": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationCancelIndicator": {
            "type": "string"
          },
          "segmentationDuration": {
            "type": "integer",
            "format": "int64"
          },
          "segmentationEventId": {
            "type": "integer",
            "format": "int64"
          },
          "segmentationTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationUpid": {
            "type": "string"
          },
          "segmentationUpidType": {
            "type": "integer",
            "format": "int32"
          },
          "segmentsExpected": {
            "type": "integer",
            "format": "int32"
          },
          "subSegmentNum": {
            "type": "integer",
            "format": "int32"
          },
          "subSegmentsExpected": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Scte35SpliceInsertScheduleActionSettings": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "spliceEventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Scte35TimeSignalScheduleActionSettings": {
        "type": "object",
        "properties": {
          "scte35Descriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scte35Descriptor"
            }
          }
        }
      },
      "SearchClientCustomerOrderListResponse": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientCustomerOrderListItemResponse"
            }
          }
        }
      },
      "SeatChartDefaultTypeDataRequest": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventorySectionRequest"
            }
          },
          "svgMediaId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SeatChartLabelDataRequest": {
        "type": "object",
        "properties": {
          "inventoryCategoryCode": {
            "type": "string"
          },
          "salesGroupCode": {
            "type": "string"
          },
          "seatChartLabel": {
            "type": "string"
          }
        }
      },
      "SeatChartLabelRequest": {
        "type": "object",
        "properties": {
          "seatChartLabelData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatChartLabelDataRequest"
            }
          },
          "seatChartTranslationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatChartLabelTranslationRequest"
            }
          }
        }
      },
      "SeatChartLabelTranslationRequest": {
        "type": "object",
        "properties": {
          "seatChartLabel": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryConfigurationGroupTranslation"
            }
          }
        }
      },
      "SeatInventoryDataRequest": {
        "type": "object",
        "properties": {
          "inventorySectionRequest": {
            "$ref": "#/components/schemas/InventorySectionRequest"
          },
          "seatChartId": {
            "type": "integer",
            "format": "int64"
          },
          "seatChartLabelRequest": {
            "$ref": "#/components/schemas/SeatChartLabelRequest"
          }
        }
      },
      "SeatingChartMarketplaceResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatingChartOfferGroupResponse"
            }
          },
          "privateMarketplace": {
            "type": "boolean"
          }
        }
      },
      "SeatingChartOfferGroupResponse": {
        "type": "object",
        "properties": {
          "categoryCode": {
            "type": "string"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string"
          },
          "discountedPrice": {
            "type": "number"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/InventoryCategoryUIDisplaySettings"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupName": {
            "type": "string"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatingChartSectionResponse"
            }
          }
        }
      },
      "SeatingChartResponse": {
        "type": "object",
        "properties": {
          "eventSeatingData": {
            "$ref": "#/components/schemas/AvailableSectionListResponseV2"
          },
          "marketplaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatingChartMarketplaceResponse"
            }
          }
        }
      },
      "SeatingChartSeatResponse": {
        "type": "object",
        "properties": {
          "qualityScore": {
            "type": "number",
            "format": "double"
          },
          "rowCode": {
            "type": "integer",
            "format": "int64"
          },
          "rowName": {
            "type": "string"
          },
          "seatCode": {
            "type": "integer",
            "format": "int64"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "seatName": {
            "type": "string"
          },
          "seatingChartSeatId": {
            "type": "string"
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "SeatingChartSectionResponse": {
        "type": "object",
        "properties": {
          "availableSeatCount": {
            "type": "integer",
            "format": "int32"
          },
          "seatResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatingChartSeatResponse"
            }
          },
          "seatingChartSectionId": {
            "type": "string"
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "sectionName": {
            "type": "string"
          }
        }
      },
      "SecondaryExchangeOfferGroupRequest": {
        "type": "object",
        "required": [
          "payoutMethodId",
          "reservePrice"
        ],
        "properties": {
          "inventoryItemIds": {
            "description": "The list of inventory ids to sell.",
            "type": "array",
            "items": {
              "description": "The list of inventory ids to sell.",
              "type": "integer",
              "format": "int64"
            }
          },
          "oldOfferGroupId": {
            "description": "An existing offer group ID (if the offer group is being edited).",
            "type": "integer",
            "format": "int64"
          },
          "payoutMethodId": {
            "description": "The payout method id to use for this resale.",
            "type": "integer",
            "format": "int64"
          },
          "reservePrice": {
            "description": "The minimum price for each inventory item to sell.",
            "type": "number"
          },
          "shouldFillWithBids": {
            "description": "Whether or not this listing should immediately try to fill using Market Offers instead of maintaining a long-term listing.",
            "type": "boolean"
          }
        }
      },
      "SecondaryListingsResponse": {
        "type": "object",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSecondaryListings"
            }
          }
        }
      },
      "SecondaryMarketplaceDetailsResponse": {
        "type": "object",
        "properties": {
          "categoryPricing": {
            "$ref": "#/components/schemas/MarketplaceCategoryPriceResponse"
          },
          "maxSellPrice": {
            "description": "The maximum price for any listing in this resale marketplace",
            "type": "number"
          },
          "minSellPrice": {
            "description": "The minimum price for any listing in this resale marketplace",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SelectedInventoryChoiceResponse": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "categoryChoiceConfigurationId": {
            "description": "Use choiceSetId instead",
            "type": "integer",
            "format": "int64"
          },
          "choiceSetId": {
            "type": "integer",
            "format": "int64"
          },
          "choiceTagTypes": {
            "description": "The choice tags from the choices of the choice set.",
            "type": "array",
            "items": {
              "description": "The choice tags from the choices of the choice set.",
              "type": "string",
              "enum": [
                "AGE_BASED"
              ]
            }
          },
          "choices": {
            "description": "The choices in this choice set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryChoiceResponse"
            }
          },
          "code": {
            "description": "The code of the choice set.",
            "type": "string"
          },
          "defaultChoice": {
            "$ref": "#/components/schemas/GetInventoryChoiceResponse"
          },
          "description": {
            "description": "The description of the choice set.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the choice set.",
            "type": "integer",
            "format": "int64"
          },
          "inventoryCategoryId": {
            "description": "The ID of the inventory category this choice set belongs to.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the choice set.",
            "type": "string"
          },
          "ranking": {
            "description": "The rank of the choice set.",
            "type": "integer",
            "format": "int32"
          },
          "selectedChoice": {
            "$ref": "#/components/schemas/GetInventoryChoiceResponse"
          },
          "translations": {
            "description": "Translations for the choice set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceSetTranslation"
            }
          }
        }
      },
      "SellerCheckoutResponse": {
        "type": "object",
        "required": [
          "tokenPrice"
        ],
        "properties": {
          "appliedDiscounts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "blacklistedQuantities": {
            "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
            "type": "array",
            "items": {
              "description": "The quantities disallowed when buying from the current offer group. If null or empty, then any quantity up to the event limit is acceptable.",
              "type": "integer",
              "format": "int64"
            }
          },
          "checkoutTermsAndConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutTermsAndConditions"
            }
          },
          "choiceDiscountSetList": {
            "$ref": "#/components/schemas/ChoiceDiscountSetListResponse"
          },
          "fineprint": {
            "type": "string"
          },
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "oldPayoutMethod": {
            "$ref": "#/components/schemas/PayoutMethodResponse"
          },
          "requestGuid": {
            "type": "string"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutSeat"
            }
          },
          "sectionCodes": {
            "description": "The section codes this offer group belongs to",
            "type": "array",
            "items": {
              "description": "The section codes this offer group belongs to",
              "type": "string"
            }
          },
          "serverGuid": {
            "type": "string"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          }
        }
      },
      "SellingOfferGroupDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "archivedOfferGroupDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "description": {
            "type": "string"
          },
          "fineprint": {
            "type": "string"
          },
          "payoutDateTime": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "payoutMethodType": {
            "type": "string"
          },
          "payoutMethodUsername": {
            "type": "string"
          },
          "payoutTransactionId": {
            "type": "integer",
            "format": "int64"
          },
          "resaleOfferGroupDetails": {
            "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
          },
          "soldOfferDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferPricingDetailsThymeleaf"
            }
          }
        }
      },
      "SetBoxOfficeConfigRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "allowAccessControlCheckInAtBoxOffice": {
            "type": "boolean"
          },
          "boxOfficeEnabled": {
            "type": "boolean"
          },
          "completedUserProfileRequired": {
            "type": "boolean"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "qrCodePrintable": {
            "type": "boolean"
          }
        }
      },
      "SetEventAnalyticsTrackerRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "analyticsTrackers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventAnalyticsTrackerRequest"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "SetEventBaseInfoRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventAccessibilityType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventName": {
            "type": "string"
          },
          "eventNameShort": {
            "type": "string"
          },
          "isDiscountCodesAllowed": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "onlineVisibleDate": {
            "type": "string",
            "format": "date-time"
          },
          "optionalLongDescription": {
            "type": "string"
          },
          "optionalShortDescription": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentMaxChainLength": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTranslation"
            }
          },
          "vanityName": {
            "type": "string"
          }
        }
      },
      "SetEventExchangeConfigRequest": {
        "type": "object",
        "required": [
          "eventId",
          "minBidPriceSetting"
        ],
        "properties": {
          "bidExpirationOptions": {
            "description": "The list of expiration options for bids set by clients on an event-level.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidExpirationOption"
            }
          },
          "bidOnlineVisibleDelaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "clientGuestBidPaymentRetryDurationSeconds": {
            "description": "The amount of time (in seconds) that a user may reattempt to complete payment for a bid before their guest-list offer expires.",
            "type": "integer",
            "format": "int32"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "exchangeEnabled": {
            "type": "boolean"
          },
          "inventoryCategoryConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryExchangeConfigRequest"
            }
          },
          "maxBidPrice": {
            "type": "number"
          },
          "minBidPrice": {
            "type": "number"
          },
          "minBidPriceSetting": {
            "type": "string",
            "enum": [
              "EVENT_ONLY",
              "CATEGORY_ONLY"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "verifyPaymentMethodEnabled": {
            "type": "boolean"
          }
        }
      },
      "SetEventExchangeConfigViaCodeRequest": {
        "type": "object",
        "properties": {
          "bidExpirationOptions": {
            "description": "The list of expiration options for bids set by clients on an event-level.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BidExpirationOption"
            }
          },
          "bidOnlineVisibleDelaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "clientGuestBidPaymentRetryDurationSeconds": {
            "description": "The amount of time (in seconds) that a user may reattempt to complete payment for a bid before their guest-list offer expires.",
            "type": "integer",
            "format": "int32"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "exchangeEnabled": {
            "type": "boolean"
          },
          "inventoryCategoryConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryCategoryExchangeConfigViaCodeRequest"
            }
          },
          "maxBidPrice": {
            "type": "number"
          },
          "minBidPrice": {
            "type": "number"
          },
          "minBidPriceSetting": {
            "type": "string",
            "enum": [
              "EVENT_ONLY",
              "CATEGORY_ONLY"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "verifyPaymentMethodEnabled": {
            "type": "boolean"
          }
        }
      },
      "SetEventFeesRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "customFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventCustomFeeRequest"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventTaxable": {
            "type": "boolean"
          },
          "eventTaxesIncludedInBase": {
            "type": "boolean"
          },
          "preconfiguredFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventPreconfiguredFeeOverrideRequest"
            }
          },
          "requestId": {
            "type": "string"
          },
          "resaleProfitFeePercentage": {
            "type": "number"
          }
        }
      },
      "SetEventMediaRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "additionalMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "requestId": {
            "type": "string"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "seatMapMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          }
        }
      },
      "SetEventSeasonMembershipConfigRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "seasonMembershipEventIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SetEventSponsorGroupsRequest": {
        "type": "object",
        "required": [
          "eventId",
          "sponsorGroups"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRankedSponsorGroupRequest"
            }
          }
        }
      },
      "SetEventSubDetailsRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventSubDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEventSubDetailRequest"
            }
          },
          "requestId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "COVID",
              "BAGS",
              "SOCIAL",
              "MERCHANDISE",
              "RECEIPT_EMAIL"
            ]
          }
        }
      },
      "SetEventTimelineGroupRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string"
          },
          "timelineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetEventTimelineRequest"
            }
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupTranslation"
            }
          }
        }
      },
      "SetEventTimelineGroupsRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "eventTimelineGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetEventTimelineGroupRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "SetEventTimelineRequest": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslation"
            }
          }
        }
      },
      "SetExternalNotificationSubscriptionsForEventRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "notificationSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdateExternalNotificationSubscriptionRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "SetInventoryCategoryChoiceSetsRequest": {
        "type": "object",
        "required": [
          "choiceSetsToKeep"
        ],
        "properties": {
          "ageBasedChoiceConfig": {
            "$ref": "#/components/schemas/CreateAgeBasedChoiceSetRequest"
          },
          "choiceSetsToAdd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceSetRequest"
            }
          },
          "choiceSetsToKeep": {
            "description": "If empty, all pre-existing choice sets will be deleted. If non-empty, all choice sets with the given id's will be retained. And each one specified will also be able to be updated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryChoiceSetRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "SetPasswordRequest": {
        "type": "object",
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "properties": {
          "newPassword": {
            "description": "The new password selected by the user",
            "type": "string"
          },
          "oldPassword": {
            "description": "The old password of the user",
            "type": "string"
          }
        }
      },
      "SetUserPriorityResult": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "result": {
            "type": "boolean"
          },
          "tokenId": {
            "type": "string"
          }
        }
      },
      "ShippingAddressRequest": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          },
          "countryCodeISO2": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "ShortcutResponse": {
        "type": "object",
        "properties": {
          "shortcuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortcutResponseItem"
            }
          }
        }
      },
      "ShortcutResponseItem": {
        "type": "object",
        "properties": {
          "deeplink": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "style": {
            "type": "string",
            "enum": [
              "PRIMARY",
              "SECONDARY",
              "TERTIARY",
              "TIME_SENSITIVE"
            ]
          },
          "subtitle": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "SimpleChanceResponse": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "averageOfferPrice": {
            "description": "The average price of offers in this group, null if no offer exists yet",
            "type": "number"
          },
          "chanceMapper": {
            "$ref": "#/components/schemas/ChanceMapperResponse"
          },
          "currentUserChance": {
            "description": "The current user chance",
            "type": "string",
            "enum": [
              "GREAT",
              "GOOD",
              "OK",
              "POOR",
              "NEGLIGIBLE"
            ]
          },
          "demand": {
            "description": "The current demand for this offer group",
            "type": "string",
            "enum": [
              "NORMAL",
              "HIGH",
              "DEMAND_EXCEEDS_SUPPLY"
            ]
          },
          "token": {
            "description": "The token of this offer response to be used in further calls",
            "type": "string"
          }
        }
      },
      "SimpleLocationProfileResponse": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "description": "The address line 1 of the location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the location",
            "type": "string"
          },
          "cityName": {
            "description": "The name of the city of the location",
            "type": "string"
          },
          "countryName": {
            "description": "The country name of the location",
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "description": {
            "description": "The description of the location",
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of the geographic region of the location (e.g. state)",
            "type": "string"
          },
          "id": {
            "description": "The unique id of the location",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the location",
            "type": "string"
          },
          "medias": {
            "description": "Pictures and videos of the location",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "phoneNumber": {
            "description": "The phone number of the location",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the location",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "The location's social media information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaResponse"
            }
          },
          "webAddress": {
            "description": "The web address associated with the location",
            "type": "string"
          }
        }
      },
      "SimpleMarketplaceResponse": {
        "description": "The list of auxiliary marketplaces associated with this event",
        "type": "object",
        "properties": {
          "addOnMinimumPrice": {
            "description": "The minimum price user's could pay within the marketplace for add-ons.",
            "type": "number"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "code": {
            "description": "The code that grants access to this private marketplace. This is not a private marketplace if the code is null",
            "type": "string"
          },
          "endCalculateWinnersTime": {
            "description": "The time before when winners are expected to be determined",
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "description": "The end time for this sale",
            "type": "string",
            "format": "date-time"
          },
          "forceAllocationTime": {
            "description": "The time after which allocation will be forced. No more seat selections allowed",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "The unique identifier for this row",
            "type": "string"
          },
          "limit": {
            "description": "The maximum number of items a user can obtain",
            "type": "integer",
            "format": "int32"
          },
          "lowCapacityThresholdPassed": {
            "type": "boolean"
          },
          "marketplaceDemand": {
            "description": "The demand for the marketplace",
            "type": "string",
            "enum": [
              "NORMAL",
              "HIGH",
              "DEMAND_EXCEEDS_SUPPLY"
            ]
          },
          "maximumPrice": {
            "type": "number"
          },
          "merchMinimumPrice": {
            "description": "The minimum price user's could pay within the marketplace for merch.",
            "type": "number"
          },
          "minimumPrice": {
            "description": "The minimum price user's could pay within the marketplace for access control.",
            "type": "number"
          },
          "name": {
            "description": "The name for this row",
            "type": "string"
          },
          "offerGroupInformation": {
            "description": "Offer groups included in this sale",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferGroupResponse"
            }
          },
          "parentMarketplaceId": {
            "description": "Parent marketplace ID. If present, this means this marketplace is dependent on the parent marketplace and should not be shown independently. Currently it is used to link the purchase marketplace associated with auctions for BUY NOW",
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleForbiddenString": {
            "type": "string"
          },
          "rules": {
            "description": "The rules for this sale",
            "type": "string"
          },
          "startDateTime": {
            "description": "The start time for this sale",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "description": "The state such as CANCELLED or PAUSED",
            "type": "string",
            "enum": [
              "CANCELLED",
              "PAUSED",
              "WINNERS_SELECTED",
              "ALLOCATE_READY"
            ]
          },
          "type": {
            "description": "The type such as DRAW or AUCTION",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "userTicketLimitRemaining": {
            "description": "The number of tickets the user can still get in this marketplace. Will only be returned from user Activity Details",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleOfferGroupListRequest": {
        "type": "object",
        "required": [
          "marketplaceId",
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "cacheKey": {
            "type": "string"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryIds": {
            "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
            "type": "array",
            "items": {
              "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
              "type": "integer",
              "format": "int64"
            }
          },
          "ignoreSalesGroupParam": {
            "type": "boolean"
          },
          "includeSoldOut": {
            "type": "boolean"
          },
          "marketplaceCodeRequests": {
            "description": "List of marketplace codes and event ids use to find marketplaces",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceId": {
            "description": "ID of the marketplace to load offer groups for.",
            "type": "integer",
            "format": "int64"
          },
          "marketplaceIds": {
            "description": "ID of the marketplaces to load offer groups for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplaces to load offer groups for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "The number of requested tokens.",
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "description": "The page size to load. Defaults to 20.",
            "type": "integer",
            "format": "int32"
          },
          "parentOfferGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "previousPageKey": {
            "description": "The key from the previous page. If null, the first page is returned.",
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "sectionCodes": {
            "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
            "type": "array",
            "items": {
              "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
              "type": "string"
            }
          },
          "sortCriteria": {
            "description": "The sort criteria to use. Defaults to QUALIFYING_PRICE.",
            "type": "string",
            "enum": [
              "AVERAGE_OFFER_PRICE",
              "QUALIFYING_PRICE",
              "INVENTORY_QUANTITY",
              "DESCRIPTION",
              "RANK"
            ]
          },
          "sortDescending": {
            "description": "Whether to sort the offer groups by the given criteria in descending order. Defaults to true.",
            "type": "boolean"
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SimpleOfferGroupListRequestV2": {
        "type": "object",
        "required": [
          "marketplaceIds",
          "numberOfTokens"
        ],
        "properties": {
          "cacheKey": {
            "type": "string"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryIds": {
            "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
            "type": "array",
            "items": {
              "description": "A category ID to filter the offer groups on. If null, offer groupsfrom all available categories are returned",
              "type": "integer",
              "format": "int64"
            }
          },
          "ignoreSalesGroupParam": {
            "type": "boolean"
          },
          "includeSoldOut": {
            "type": "boolean"
          },
          "marketplaceCodeRequests": {
            "description": "List of marketplace codes and event ids use to find marketplaces",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMarketplaceWithCodeRequest"
            }
          },
          "marketplaceIds": {
            "description": "ID of the marketplaces to load offer groups for.",
            "type": "array",
            "items": {
              "description": "ID of the marketplaces to load offer groups for.",
              "type": "integer",
              "format": "int64"
            }
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfTokens": {
            "description": "The number of requested tokens.",
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "description": "The page size to load. Defaults to 20.",
            "type": "integer",
            "format": "int32"
          },
          "parentOfferGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "previousPageKey": {
            "description": "The key from the previous page. If null, the first page is returned.",
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "sectionCodes": {
            "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
            "type": "array",
            "items": {
              "description": "A list of section codes to filter the offer groups on. If null, offer groups from all available sections are returned",
              "type": "string"
            }
          },
          "sortCriteria": {
            "description": "The sort criteria to use. Defaults to QUALIFYING_PRICE.",
            "type": "string",
            "enum": [
              "AVERAGE_OFFER_PRICE",
              "QUALIFYING_PRICE",
              "INVENTORY_QUANTITY",
              "DESCRIPTION",
              "RANK"
            ]
          },
          "sortDescending": {
            "description": "Whether to sort the offer groups by the given criteria in descending order. Defaults to true.",
            "type": "boolean"
          },
          "tagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SimpleOfferGroupListResponse": {
        "type": "object",
        "properties": {
          "nextPageKey": {
            "description": "The key to use for requesting the next page. Will be null if there isno more pages.",
            "type": "string"
          },
          "offerGroupList": {
            "description": "The list of offer groups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleOfferGroupResponse"
            }
          }
        }
      },
      "SimpleOfferGroupResponse": {
        "type": "object",
        "properties": {
          "activeOffer": {
            "$ref": "#/components/schemas/SimpleOfferResponse"
          },
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "availableSections": {
            "description": "The sections this offer group belongs to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSectionV2"
            }
          },
          "averageOfferPrice": {
            "description": "The average price of offers in this group, null if no offer exists yet",
            "type": "number"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "categoryDetail": {
            "$ref": "#/components/schemas/CategoryDetailResponse"
          },
          "categoryId": {
            "description": "The category in the venue that this offer group belongs to",
            "type": "string"
          },
          "categoryName": {
            "description": "The category in the venue that this offer group belongs to",
            "type": "string"
          },
          "demand": {
            "description": "The demand of this offer group",
            "type": "string",
            "enum": [
              "NORMAL",
              "HIGH",
              "DEMAND_EXCEEDS_SUPPLY"
            ]
          },
          "description": {
            "description": "The description for the offer group",
            "type": "string"
          },
          "discountedChoiceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "discountedPrice": {
            "description": "The discounted price for this group",
            "type": "number"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UIDisplaySettings"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "gates": {
            "description": "The list of gates for this offer group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationGateResponse"
            }
          },
          "id": {
            "description": "The unique identifier for this group",
            "type": "string"
          },
          "lowCapacityThresholdPassed": {
            "type": "boolean"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "minQualifyingPrice": {
            "description": "The minimum offer price to buy one token",
            "type": "number"
          },
          "missingRequirements": {
            "description": "A display string explaining any missing requirements to purchase from this offer group.",
            "type": "string"
          },
          "numberOfTokens": {
            "description": "The number of tokens in this group",
            "type": "integer",
            "format": "int64"
          },
          "offerGroupInventoryFirestorePath": {
            "type": "string"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "reservePrice": {
            "description": "The reserve price for this group",
            "type": "number"
          },
          "salesGroupNodeResponse": {
            "$ref": "#/components/schemas/SalesGroupNodeResponse"
          },
          "seatConfigurationType": {
            "description": "Whether or not this offer group is GENERAL_ADMISSION or SEATED",
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "sectionCodes": {
            "description": "The section codes this offer group belongs to. Deprecated. Use sections instead",
            "type": "array",
            "items": {
              "description": "The section codes this offer group belongs to. Deprecated. Use sections instead",
              "type": "string"
            }
          },
          "sections": {
            "description": "The sections this offer group belongs to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSection"
            }
          },
          "soldOut": {
            "type": "boolean"
          },
          "suggestedOfferIncrements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedOfferIncrementResponse"
            }
          },
          "tieredDiscountList": {
            "$ref": "#/components/schemas/TieredDiscountListResponse"
          },
          "visibleEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SimpleOfferResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount per token for this offer",
            "type": "number"
          },
          "autoPayEnabled": {
            "description": "Has this offer been archived for display purposes?",
            "type": "boolean"
          },
          "cardType": {
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "chance": {
            "description": "If this entry is for market pricing, this is the chance this entry has for obtaining access",
            "type": "string",
            "enum": [
              "GREAT",
              "GOOD",
              "OK",
              "POOR",
              "NEGLIGIBLE"
            ]
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "displayArchive": {
            "description": "Has this offer been archived for display purposes?",
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the offer",
            "type": "string"
          },
          "inventoryItemIds": {
            "description": "Token IDs associated with this offer",
            "type": "array",
            "items": {
              "description": "Token IDs associated with this offer",
              "type": "integer",
              "format": "int64"
            }
          },
          "inventorySelectionEndTime": {
            "description": "A non-null value indicates if the offer can select seats until the specified time",
            "type": "string",
            "format": "date-time"
          },
          "inventorySelectionStartTime": {
            "description": "A non-null value indicates if the offer can select seats at the specified time",
            "type": "string",
            "format": "date-time"
          },
          "lastDigits": {
            "type": "string"
          },
          "marketplaceCode": {
            "type": "string"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfTokens": {
            "description": "The number of tokens requested with this offer",
            "type": "integer",
            "format": "int32"
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupId": {
            "description": "The ID of the offer group",
            "type": "string"
          },
          "offerStatus": {
            "description": "The status of the offer",
            "type": "string",
            "enum": [
              "DEFAULT",
              "WON_PAYMENT_PROCESSING_PENDING",
              "WON_PAYMENT_PROCESSING_INITIATED",
              "WON_MANUAL_PAYMENT_REQUIRED",
              "WON_PAYMENT_SUCCESSFUL",
              "WON_TOKEN_ASSIGNED",
              "LOST"
            ]
          },
          "offerSubStatus": {
            "description": "The status of the offer",
            "type": "string",
            "enum": [
              "PAYMENT_OPTION_DECLINED",
              "PAYMENT_FAILED_RETRY_ATTEMPTS_EXCEEDED",
              "PAYMENT_FAILED_TIME_EXPIRED",
              "PAYMENT_CLAIM_TIME_EXPIRED",
              "NOT_SELECTED",
              "AUTO_PAYMENT_FAILED",
              "REFUNDED",
              "REVOKED",
              "CANCELLED"
            ]
          },
          "paymentMeans": {
            "$ref": "#/components/schemas/PaymentMeans"
          },
          "purchaseTimestamp": {
            "description": "If this entry has been paid for, this is the timestamp for when it was processed",
            "type": "string",
            "format": "date-time"
          },
          "retryAttemptsLeft": {
            "description": "The number of retry payment attempts left",
            "type": "integer",
            "format": "int32"
          },
          "retryEndTime": {
            "description": "The end time for retry payment attempts",
            "type": "string",
            "format": "date-time"
          },
          "selectedSeats": {
            "description": "A non-null value indicates if the offer can select seats until the specified time",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutSeat"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "tokenPrice": {
            "$ref": "#/components/schemas/TokenPrice"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SimplePerformerProfileResponse": {
        "type": "object",
        "properties": {
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultMinorCategory": {
            "$ref": "#/components/schemas/MinorCategoryResponse"
          },
          "description": {
            "description": "The performer's description",
            "type": "string"
          },
          "homeCity": {
            "description": "The performer's home city",
            "type": "string"
          },
          "homeCountry": {
            "description": "The performer's home country",
            "type": "string"
          },
          "homeGeoRegion": {
            "description": "The performer's home geoRegion",
            "type": "string"
          },
          "homeGeoRegionAbbreviation": {
            "description": "The performer's home geoRegion abbreviation",
            "type": "string"
          },
          "id": {
            "description": "The unique id of the performer",
            "type": "string"
          },
          "majorCategories": {
            "description": "The performer's major categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "medias": {
            "description": "Pictures and Videos of the performer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minorCategories": {
            "description": "The performer's minor categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinorCategoryResponse"
            }
          },
          "name": {
            "description": "The performer's name",
            "type": "string"
          },
          "socialMediaInformation": {
            "description": "The performer's social media information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaResponse"
            }
          },
          "translation": {
            "$ref": "#/components/schemas/PerformerProfileMl"
          }
        }
      },
      "SimpleUserActivityEventResponse": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "description": "The access control mode for ID checks for this event",
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "description": "The access control mode for this event",
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "description": "The access control sub-mode for this event",
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "addressLine1": {
            "description": "The address line 1 for the event location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 for the event location",
            "type": "string"
          },
          "announcement": {
            "description": "Any announcement for the event",
            "type": "string"
          },
          "assigneeTokenInformation": {
            "description": "Information for the tokens that others have assigned to this user for an event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "bids": {
            "description": "Bids submitted by the user for this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          },
          "cityName": {
            "description": "The city name for the event location",
            "type": "string"
          },
          "countryName": {
            "description": "The country name for the event location",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "description": "Event accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "description": "The date and time the event takes place",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventSortDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "forceIdCheck": {
            "type": "boolean"
          },
          "geoRegionAbbreviation": {
            "description": "The geo region abbreviation for the event location",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The geo region name for the event location",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "string"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "liveStreamEndDate": {
            "description": "The date and time the event live stream ends in local time. ",
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStartDate": {
            "description": "The date and time the event live stream takes place in local time. ",
            "type": "string",
            "format": "date-time"
          },
          "locationName": {
            "description": "The location name for the event",
            "type": "string"
          },
          "marketplaceInformation": {
            "description": "Information for the marketplaces that are present for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "nextMarketplace": {
            "$ref": "#/components/schemas/SimpleMarketplaceResponse"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "postalCode": {
            "description": "The postal code for the event location",
            "type": "string"
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "resaleMarketplace": {
            "$ref": "#/components/schemas/SimpleMarketplaceResponse"
          },
          "seatMap": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "shortName": {
            "description": "The short name for the event",
            "type": "string"
          },
          "state": {
            "description": "The state of the event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "timeZoneOffset": {
            "description": "The time zone for the event",
            "type": "string"
          },
          "tokenInformation": {
            "description": "Information for the tokens that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "userEventKey": {
            "description": "The event key the user has",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "The user UUID Prefix",
            "type": "string"
          },
          "usherUUID": {
            "description": "The usher UUID",
            "type": "string"
          },
          "vanityName": {
            "description": "The vanity name for the event",
            "type": "string"
          }
        }
      },
      "SocialMedia": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "parentId": {
            "type": "integer",
            "format": "int64"
          },
          "parentName": {
            "type": "string",
            "enum": [
              "PERFORMER_PROFILE",
              "LOCATION_PROFILE"
            ]
          },
          "socialMediaType": {
            "type": "string",
            "enum": [
              "FACEBOOK",
              "FLICKR",
              "GOOGLE_PLUS",
              "INSTAGRAM",
              "LINKEDIN",
              "PINTEREST",
              "SNAPCHAT",
              "TUMBLR",
              "TWITTER",
              "WEBSITE",
              "YOUTUBE"
            ]
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialMediaMl"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SocialMediaMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "socialMedia": {
            "$ref": "#/components/schemas/SocialMedia"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SocialMediaRequest": {
        "description": "Social media list for the Performer",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of this social media record",
            "type": "string"
          },
          "socialMediaType": {
            "description": "The type of this social media record (e.g. FACEBOOK)",
            "type": "string",
            "enum": [
              "FACEBOOK",
              "FLICKR",
              "GOOGLE_PLUS",
              "INSTAGRAM",
              "LINKEDIN",
              "PINTEREST",
              "SNAPCHAT",
              "TUMBLR",
              "TWITTER",
              "WEBSITE",
              "YOUTUBE"
            ]
          },
          "url": {
            "description": "The url of this social media record",
            "type": "string"
          }
        }
      },
      "SocialMediaResponse": {
        "description": "The performer's social media information",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of this social media record",
            "type": "string"
          },
          "id": {
            "description": "The unique id of this social media record",
            "type": "string"
          },
          "socialMediaType": {
            "description": "The type of this social media record (e.g. FACEBOOL)",
            "type": "string",
            "enum": [
              "FACEBOOK",
              "FLICKR",
              "GOOGLE_PLUS",
              "INSTAGRAM",
              "LINKEDIN",
              "PINTEREST",
              "SNAPCHAT",
              "TUMBLR",
              "TWITTER",
              "WEBSITE",
              "YOUTUBE"
            ]
          },
          "translations": {
            "$ref": "#/components/schemas/SocialMediaMl"
          },
          "url": {
            "description": "The url of this social media record",
            "type": "string"
          }
        }
      },
      "SocialMediaTranslation": {
        "type": "object",
        "required": [
          "locale",
          "url"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Sponsor": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "icon": {
            "$ref": "#/components/schemas/Media"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorMl"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SponsorGroupResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "sponsorList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorResponse"
            }
          }
        }
      },
      "SponsorMl": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "editCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedBy": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sponsor": {
            "$ref": "#/components/schemas/Sponsor"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SponsorResponse": {
        "type": "object",
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "translation": {
            "$ref": "#/components/schemas/SponsorMl"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SponsorTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "name": {
            "description": "The name of the sponsor in provided locale",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "url": {
            "description": "The url for sponsor in provided locale",
            "type": "string"
          }
        }
      },
      "SpreedlyGatewayAccount": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "gateway_type": {
            "type": "string",
            "enum": [
              "NMI",
              "CT_PAYMENT",
              "STRIPE",
              "TEST",
              "UNKNOWN"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SpreedlyGatewayAccountResponse": {
        "type": "object",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/SpreedlyGatewayAccount"
          }
        }
      },
      "SpreedlyGatewayResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "gatewayType": {
            "type": "string",
            "enum": [
              "NMI",
              "CT_PAYMENT",
              "STRIPE",
              "TEST",
              "UNKNOWN"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SpreedlyListGatewayResponse": {
        "type": "object",
        "properties": {
          "gateways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpreedlyGatewayResponse"
            }
          }
        }
      },
      "SpreedlyPaymentMethod": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "card_type": {
            "type": "string",
            "enum": [
              "visa",
              "master",
              "american_express",
              "discover",
              "dankort",
              "jcb",
              "diners_club"
            ]
          },
          "city": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "eligible_for_card_updater": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "fingerprint": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "first_six_digits": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "last_four_digits": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string"
          },
          "payment_method_type": {
            "type": "string",
            "enum": [
              "credit_card",
              "bank_account",
              "dwolla",
              "paypal",
              "sprel",
              "third_party_token",
              "apple_pay"
            ]
          },
          "phone_number": {
            "type": "string"
          },
          "shipping_address1": {
            "type": "string"
          },
          "shipping_address2": {
            "type": "string"
          },
          "shipping_city": {
            "type": "string"
          },
          "shipping_country": {
            "type": "string"
          },
          "shipping_phone_number": {
            "type": "string"
          },
          "shipping_state": {
            "type": "string"
          },
          "shipping_zip": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "storage_state": {
            "type": "string",
            "enum": [
              "retained",
              "cached",
              "redacted"
            ]
          },
          "test": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "verification_value": {
            "type": "string"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "SpreedlyShippingAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "SpreedlyTransactionInnerResponse": {
        "type": "object",
        "properties": {
          "avs_code": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L",
              "M",
              "N",
              "O",
              "P",
              "Q",
              "R",
              "S",
              "T",
              "U",
              "V",
              "W",
              "X",
              "Y",
              "Z",
              "1"
            ]
          },
          "avs_message": {
            "type": "string"
          },
          "cancelled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "cvv_code": {
            "type": "string",
            "enum": [
              "D",
              "I",
              "M",
              "Y",
              "N",
              "P",
              "S",
              "U",
              "X"
            ]
          },
          "cvv_message": {
            "type": "string"
          },
          "error_code": {
            "type": "string"
          },
          "error_detail": {
            "type": "string"
          },
          "fraud_review": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          },
          "pending": {
            "type": "boolean"
          },
          "result_unknown": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SpreedlyTransactionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "basis_payment_method": {
            "$ref": "#/components/schemas/SpreedlyPaymentMethod"
          },
          "client_ip_address": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "currency_code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gateway": {
            "$ref": "#/components/schemas/SpreedlyGatewayAccount"
          },
          "gateway_latency_ms": {
            "type": "string"
          },
          "gateway_token": {
            "type": "string"
          },
          "gateway_transaction_id": {
            "type": "string"
          },
          "merchant_location_descriptor": {
            "type": "string"
          },
          "merchant_name_descriptor": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_key": {
            "type": "string"
          },
          "on_test_gateway": {
            "type": "boolean"
          },
          "order_id": {
            "type": "string"
          },
          "payment_method": {
            "$ref": "#/components/schemas/SpreedlyPaymentMethod"
          },
          "payment_method_added": {
            "type": "boolean"
          },
          "response": {
            "$ref": "#/components/schemas/SpreedlyTransactionInnerResponse"
          },
          "retain_on_success": {
            "type": "boolean"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/SpreedlyShippingAddress"
          },
          "state": {
            "type": "string",
            "enum": [
              "succeeded",
              "processing",
              "pending",
              "failed",
              "gateway_setup_failed",
              "gateway_processing_failed",
              "gateway_processing_result_unknown"
            ]
          },
          "succeeded": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "transaction_type": {
            "type": "string",
            "enum": [
              "Authorization",
              "Capture",
              "Credit",
              "RedactPaymentMethod",
              "RedactGateway",
              "RecacheSensitiveData",
              "Verification",
              "Purchase",
              "Void"
            ]
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SquareInitiatePaymentData": {
        "type": "object",
        "required": [
          "terminalCheckoutId"
        ],
        "properties": {
          "terminalCheckoutId": {
            "type": "string"
          }
        }
      },
      "StartEventCreationDraftRequest": {
        "type": "object",
        "required": [
          "clientId",
          "draftJson"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "draftJson": {
            "type": "string"
          }
        }
      },
      "StartNextEventStreamSegmentRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StartTimecode": {
        "type": "object",
        "properties": {
          "timecode": {
            "type": "string"
          }
        }
      },
      "StaticImageActivateScheduleActionSettings": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "fadeIn": {
            "type": "integer",
            "format": "int32"
          },
          "fadeOut": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "image": {
            "$ref": "#/components/schemas/InputLocation"
          },
          "imageX": {
            "type": "integer",
            "format": "int32"
          },
          "imageY": {
            "type": "integer",
            "format": "int32"
          },
          "layer": {
            "type": "integer",
            "format": "int32"
          },
          "opacity": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StaticImageDeactivateScheduleActionSettings": {
        "type": "object",
        "properties": {
          "fadeOut": {
            "type": "integer",
            "format": "int32"
          },
          "layer": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StopTimecode": {
        "type": "object",
        "properties": {
          "lastFrameClippingBehavior": {
            "type": "string"
          },
          "timecode": {
            "type": "string"
          }
        }
      },
      "StreamSegment": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StripeDirectUserData": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          },
          "requiresShippingAddress": {
            "type": "boolean"
          }
        }
      },
      "StripeKlarnaPaymentKeyData": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string"
          },
          "paymentIntentId": {
            "type": "string"
          }
        }
      },
      "SubDetailTranslation": {
        "type": "object",
        "required": [
          "description",
          "locale"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SubmitEventDraftForReviewRequest": {
        "type": "object",
        "required": [
          "eventDraftId"
        ],
        "properties": {
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SuggestedOfferIncrementResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SuggestedOfferIncrementTranslation": {
        "type": "object",
        "required": [
          "locale"
        ],
        "properties": {
          "locale": {
            "description": "The locale of this translation",
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "SuggestedOfferIncrementTranslationRequest": {
        "type": "object",
        "required": [
          "suggestedOfferIncrementId"
        ],
        "properties": {
          "suggestedOfferIncrementId": {
            "type": "integer",
            "format": "int64"
          },
          "suggestedOfferIncrementTranslationRequestItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedOfferIncrementTranslation"
            }
          }
        }
      },
      "SwitchSelectionGroupRequest": {
        "type": "object",
        "properties": {
          "offerId": {
            "type": "integer",
            "format": "int64"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selectionGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TagInfoResponse": {
        "type": "object",
        "properties": {
          "avatarMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "categoryPageUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "socialMediaDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "sponsorGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "subDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          }
        }
      },
      "TieredDiscountListItemResponse": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int64"
          },
          "discountedPrice": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "isAlmostSoldOut": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SOLD_OUT"
            ]
          }
        }
      },
      "TieredDiscountListResponse": {
        "type": "object",
        "properties": {
          "tieredDiscountList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TieredDiscountListItemResponse"
            }
          }
        }
      },
      "TimeRange": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TokenAssignmentActionData": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "CREATE",
              "ASSIGNEE_ACCEPT",
              "ASSIGNEE_DECLINE",
              "ASSIGNEE_RETURN",
              "ASSIGNER_REVOKE",
              "PROMOTER_SALE",
              "YOOP_ADMIN_REVOKE",
              "ASSIGNMENT_BOUNCE"
            ]
          },
          "actionDate": {
            "type": "string",
            "format": "date-time"
          },
          "assigneeEmailAddress": {
            "type": "string"
          },
          "assigneeFirstName": {
            "type": "string"
          },
          "assigneeLastName": {
            "type": "string"
          }
        }
      },
      "TokenAssignmentDataThymeleaf": {
        "type": "object",
        "properties": {
          "accessibilityType": {
            "type": "string"
          },
          "assignmentInventoryData": {
            "$ref": "#/components/schemas/InventoryItemCollectionThymeleaf"
          },
          "categoryData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryDataThymeleaf"
            }
          },
          "inviteeEmailAddress": {
            "type": "string"
          },
          "inviteeFirstName": {
            "type": "string"
          },
          "inviteeLastName": {
            "type": "string"
          },
          "inviterFirstName": {
            "type": "string"
          },
          "inviterLastName": {
            "type": "string"
          },
          "numTokens": {
            "type": "integer",
            "format": "int32"
          },
          "tokenAssignmentConfirmationDeepLink": {
            "type": "string"
          },
          "tokenAssignmentDeclineLink": {
            "type": "string"
          },
          "tokenAssignmentGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TokenAssignmentGroupResponse": {
        "type": "object",
        "properties": {
          "confirmationString": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "inventoryItemIdToCancelledAssignmentsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TokenAssignmentResponse"
              }
            }
          },
          "inviteGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "responseList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAssignmentResponse"
            }
          },
          "sellerCommission": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "TokenAssignmentNotificationCommonData": {
        "type": "object",
        "properties": {
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "tokenAssignmentGroupId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TokenAssignmentPromoterDetailRequest": {
        "type": "object",
        "properties": {
          "minimumSellingPrice": {
            "type": "number",
            "format": "double"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAssignmentPromoterSectionInventoryRequest"
            }
          },
          "sellerCommission": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "TokenAssignmentPromoterRequest": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenAssignmentPromoterDetailRequestList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAssignmentPromoterDetailRequest"
            }
          }
        }
      },
      "TokenAssignmentPromoterSectionInventoryRequest": {
        "type": "object",
        "properties": {
          "numberOfTokens": {
            "type": "integer",
            "format": "int32"
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TokenAssignmentRequest": {
        "type": "object",
        "required": [
          "emailAddress"
        ],
        "properties": {
          "dateOfBirth": {
            "description": "The DOB of the assignee",
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "description": "The email address of the assignee",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of the assignee",
            "type": "string"
          },
          "gender": {
            "description": "The gender of the assignee",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "inventoryCategoryId": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "description": "The last name of the assignee",
            "type": "string"
          },
          "tokenIds": {
            "description": "The token Id to assign",
            "type": "array",
            "items": {
              "description": "The token Id to assign",
              "type": "string"
            }
          },
          "type": {
            "description": "The type of token assignment",
            "type": "string",
            "enum": [
              "ACCOMPANY_OWNER",
              "ACCOMPANY_OWNER_CHILD",
              "FORCE_ACCOUNT_CREATION",
              "PROMOTER"
            ]
          }
        }
      },
      "TokenAssignmentResponse": {
        "type": "object",
        "properties": {
          "assigneeDateOfBirth": {
            "description": "The dob of the assignee",
            "type": "string",
            "format": "date"
          },
          "assigneeEmailAddress": {
            "description": "The email address of the assignee",
            "type": "string"
          },
          "assigneeEventReady": {
            "description": "Is the assignee event ready",
            "type": "boolean"
          },
          "assigneeFirstName": {
            "description": "The first name of the assignee",
            "type": "string"
          },
          "assigneeGender": {
            "description": "The gender of the assignee",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "assigneeLastName": {
            "description": "The last name of the assignee",
            "type": "string"
          },
          "assigneeProfilePictureUrl": {
            "description": "The Url for the profile picture of the assignee; null if the invitation hasn't been accepted yet",
            "type": "string"
          },
          "assigneeProfilePictureVerificationStatus": {
            "description": "Is the assignee picture verified?",
            "type": "boolean"
          },
          "assigneeSelfAssigned": {
            "description": "Is this token self assigned to the assignee?",
            "type": "boolean"
          },
          "assigneeUserId": {
            "description": "The userId of the assignee; null if the invitation hasn't been accepted yet",
            "type": "string"
          },
          "assignmentStatus": {
            "description": "The token assignment status of the token assignment",
            "type": "string",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "GUEST",
              "GUEST_CHILD"
            ]
          },
          "assignmentType": {
            "description": "The token assignment type of the token assignment",
            "type": "string",
            "enum": [
              "USER",
              "PROMOTER"
            ]
          },
          "eventId": {
            "description": "The id of the event",
            "type": "string"
          },
          "id": {
            "description": "The id of token assignment",
            "type": "string"
          },
          "inventoryItemId": {
            "description": "The id of inventory item",
            "type": "string"
          },
          "inviterDateOfBirth": {
            "description": "The DOB of the inviter",
            "type": "string",
            "format": "date"
          },
          "inviterEmailAddress": {
            "description": "The email address of the inviter",
            "type": "string"
          },
          "inviterEventReady": {
            "description": "Is the inviter event ready",
            "type": "boolean"
          },
          "inviterFirstName": {
            "description": "The first name of the inviter",
            "type": "string"
          },
          "inviterGender": {
            "description": "The gender of the inviter",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "inviterLastName": {
            "description": "The last name of the inviter",
            "type": "string"
          },
          "inviterProfilePictureUrl": {
            "description": "The Url for the profile picture of the inviter",
            "type": "string"
          },
          "inviterProfilePictureVerificationStatus": {
            "description": "Is the inviter's picture verified?",
            "type": "boolean"
          },
          "inviterUserId": {
            "description": "The userId of the inviter",
            "type": "string"
          },
          "numberOfAssignments": {
            "description": "The number of times this token has been assigned (in the assignment chain)",
            "type": "integer",
            "format": "int32"
          },
          "purchaserUserId": {
            "description": "The userId of the purchaser",
            "type": "string"
          },
          "tokenAssignmentGroupId": {
            "description": "The group id of the token assignment",
            "type": "string"
          }
        }
      },
      "TokenHistoryItemResponse": {
        "type": "object",
        "properties": {
          "accessControlActivityReason": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "assigneeEmailAddress": {
            "type": "string"
          },
          "assigneeFirstName": {
            "type": "string"
          },
          "assigneeLastName": {
            "type": "string"
          },
          "assigneeUserId": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "tokenHistoryItemDate": {
            "type": "string",
            "format": "date-time"
          },
          "tokenHistoryItemType": {
            "type": "string",
            "enum": [
              "PURCHASE",
              "TRANSFER_CREATE",
              "TRANSFER_ASSIGNEE_ACCEPT",
              "TRANSFER_ASSIGNEE_DECLINE",
              "TRANSFER_ASSIGNEE_RETURN",
              "TRANSFER_ASSIGNER_REVOKE",
              "TRANSFER_PROMOTER_SALE",
              "TRANSFER_YOOP_ADMIN_REVOKE",
              "TRANSFER_ASSIGNMENT_BOUNCE",
              "USHER_DECLINED",
              "USHER_FINAL_DECLINED",
              "USHER_CHECK_IN_GRANTED",
              "USHER_ID_VERIFY",
              "USHER_MERCHANDISE_PICKED_UP",
              "USHER_CHECK_IN_RESCAN"
            ]
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "TokenHistoryResponse": {
        "type": "object",
        "properties": {
          "tokenHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenHistoryItemResponse"
            }
          }
        }
      },
      "TokenHolderDemographics": {
        "type": "object",
        "properties": {
          "adultDemographics": {
            "$ref": "#/components/schemas/UserDemographics"
          },
          "adultGuestDemographics": {
            "$ref": "#/components/schemas/UserDemographics"
          },
          "assignmentStatusBreakdown": {
            "description": "The breakdown of assignment status of inventory.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricInventoryAssignmentStatus"
            }
          },
          "buyerDemographics": {
            "$ref": "#/components/schemas/UserDemographics"
          },
          "emailRecipientDemographics": {
            "$ref": "#/components/schemas/UserDemographics"
          }
        }
      },
      "TokenInfoResponse": {
        "description": "Information for the tokens that others have assigned to this user for an event",
        "type": "object",
        "properties": {
          "accessControlEntryCount": {
            "type": "integer",
            "format": "int32"
          },
          "accessControlRestrictionData": {
            "$ref": "#/components/schemas/AccessControlRestrictionResponse"
          },
          "accessed": {
            "type": "boolean"
          },
          "canResell": {
            "type": "boolean"
          },
          "categoryDetail": {
            "$ref": "#/components/schemas/CategoryDetailResponse"
          },
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "categoryName": {
            "type": "string"
          },
          "finalTokenAssignment": {
            "$ref": "#/components/schemas/TokenAssignmentResponse"
          },
          "gates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationGateResponse"
            }
          },
          "inventoryItemSeatingData": {
            "$ref": "#/components/schemas/InventoryItemSeatingData"
          },
          "lastActivity": {
            "type": "string",
            "enum": [
              "DECLINED",
              "FINAL_DECLINED",
              "CHECK_IN_GRANTED",
              "CHECK_IN_RESCAN",
              "ID_VERIFY",
              "PROFILE_PICTURE_VERIFY",
              "MERCHANDISE_PICKED_UP"
            ]
          },
          "lastActivityDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastActivityReason": {
            "type": "string",
            "enum": [
              "NOT_SAME_PERSON",
              "ID_MISMATCH",
              "NO_ID",
              "BEHAVIOR",
              "OTHER"
            ]
          },
          "lastTokenAssignmentAction": {
            "type": "string",
            "enum": [
              "CREATE",
              "ASSIGNEE_ACCEPT",
              "ASSIGNEE_DECLINE",
              "ASSIGNEE_RETURN",
              "ASSIGNER_REVOKE",
              "PROMOTER_SALE",
              "YOOP_ADMIN_REVOKE",
              "ASSIGNMENT_BOUNCE"
            ]
          },
          "lastTokenAssignmentActionData": {
            "$ref": "#/components/schemas/TokenAssignmentActionData"
          },
          "lastTokenAssignmentActionDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "merchandisePickedUp": {
            "type": "boolean"
          },
          "numberOfUserRevokes": {
            "type": "integer",
            "format": "int32"
          },
          "offerResponse": {
            "$ref": "#/components/schemas/SimpleOfferResponse"
          },
          "originMarketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "originMarketplaceResaleAllowed": {
            "type": "boolean"
          },
          "originMarketplaceType": {
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "parentInventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "resaleAvailableDate": {
            "type": "string",
            "format": "date-time"
          },
          "resaleForbiddenContext": {
            "$ref": "#/components/schemas/ResaleForbiddenContext"
          },
          "resaleForbiddenReason": {
            "type": "string",
            "enum": [
              "ASSIGNED_TOKEN",
              "ORIGIN_MARKETPLACE_TYPE_DRAW",
              "ORIGIN_MARKETPLACE_RESALE_DISALLOWED",
              "CATEGORY_RULES",
              "FREE_TOKEN"
            ]
          },
          "row": {
            "type": "string"
          },
          "rowCode": {
            "type": "string"
          },
          "salesGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "salesGroupName": {
            "type": "string"
          },
          "seat": {
            "type": "string"
          },
          "seatCode": {
            "type": "string"
          },
          "seatConfigurationType": {
            "type": "string",
            "enum": [
              "GENERAL_ADMISSION",
              "SEATED"
            ]
          },
          "section": {
            "type": "string"
          },
          "sectionCode": {
            "type": "string"
          },
          "selfAssigned": {
            "type": "boolean"
          },
          "sellingOfferGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "sellingPrice": {
            "type": "number"
          },
          "soldDate": {
            "type": "string",
            "format": "date-time"
          },
          "tokenHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenHistoryItemResponse"
            }
          },
          "tokenId": {
            "type": "string"
          },
          "totalRevokesAllowed": {
            "type": "integer",
            "format": "int64"
          },
          "userEventKey": {
            "type": "string"
          },
          "validationStatus": {
            "type": "string",
            "enum": [
              "VALID",
              "INVALID"
            ]
          }
        }
      },
      "TokenPrice": {
        "description": "The price information associated with this offer",
        "type": "object",
        "properties": {
          "amountPerToken": {
            "type": "string"
          },
          "amountPerTokenAfterAutoDiscountsAndInventoryCarryOver": {
            "type": "number"
          },
          "amountPerTokenWithFeesAndDiscounts": {
            "type": "number"
          },
          "feeBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferPricingBreakdownItemResponse"
            }
          },
          "includedDiscountBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferPricingBreakdownItemResponse"
            }
          },
          "processedTokenPriceData": {
            "$ref": "#/components/schemas/ProcessedTokenPriceData"
          },
          "rawAmountPerToken": {
            "type": "number"
          },
          "rawAmountPerTokenWithFeesAndDiscounts": {
            "type": "number"
          },
          "rawTotalAmount": {
            "type": "number"
          },
          "rawTotalFees": {
            "type": "number"
          },
          "rawTotalTokenAmount": {
            "type": "number"
          },
          "rawTotalUpgradeCarryOverAmount": {
            "type": "number"
          },
          "totalAmount": {
            "type": "string"
          },
          "totalFees": {
            "type": "string"
          },
          "totalTokenAmount": {
            "type": "string"
          },
          "totalUpgradeCarryOverAmount": {
            "type": "string"
          }
        }
      },
      "TokenTypePriceConfiguration": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number"
          },
          "tokenTypeId": {
            "type": "string"
          }
        }
      },
      "TourCreateRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The name for this tour",
            "type": "string"
          }
        }
      },
      "TourResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID for the tour",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name of the tour",
            "type": "string"
          }
        }
      },
      "TourTranslationRequest": {
        "type": "object",
        "required": [
          "tourId",
          "tourTranslationRequestItems"
        ],
        "properties": {
          "tourId": {
            "type": "integer",
            "format": "int64"
          },
          "tourTranslationRequestItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TourTranslationRequestItem"
            }
          }
        }
      },
      "TourTranslationRequestItem": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "TourUpdateRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "The id of this tour for update requests",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "The name for this tour",
            "type": "string"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "cardCountry": {
            "type": "string"
          },
          "cardFingerprint": {
            "type": "string"
          },
          "cardHolderName": {
            "type": "string"
          },
          "cardId": {
            "type": "string"
          },
          "cardLastDigits": {
            "type": "string"
          },
          "cardPostalCode": {
            "type": "string"
          },
          "cardType": {
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "clientFees": {
            "type": "number"
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "errorString": {
            "type": "string"
          },
          "externalPaymentTransactionProviderType": {
            "type": "string",
            "enum": [
              "STRIPE_KLARNA",
              "CITCON_WECHATPAY",
              "CITON_ALIPAY",
              "SQUARE",
              "CASH",
              "FREE"
            ]
          },
          "externalTransactionId": {
            "type": "string"
          },
          "fees": {
            "type": "number"
          },
          "gatewayTransactionId": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "itemTokenId": {
            "type": "integer",
            "format": "int64"
          },
          "kountFraudSessionId": {
            "type": "string"
          },
          "kountTransactionId": {
            "type": "string"
          },
          "merchantRefNum": {
            "type": "string"
          },
          "parentTransaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "refundReason": {
            "type": "string"
          },
          "sellerFees": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "transactionAction": {
            "type": "string",
            "enum": [
              "AUTHORIZE_ATTEMPT",
              "AUTHORIZE_SUCCESS",
              "AUTHORIZE_FAILURE",
              "EXTERNAL_PAYMENT_VALIDATION_SUCCESS",
              "PAYMENT_ATTEMPT",
              "PAYMENT_SUCCESS",
              "PAYMENT_FAILURE",
              "REFUND_ATTEMPT",
              "REFUND_SUCCESS",
              "REFUND_SUCCESS_FORCED_WITHOUT_ATTEMPT",
              "REFUND_SUCCESS_FORCED_WITH_FAILURE",
              "REFUND_FAILURE",
              "VERIFICATION_ATTEMPT",
              "VERIFICATION_SUCCESS",
              "VERIFICATION_FAILURE",
              "VOID_ATTEMPT",
              "VOID_SUCCESS",
              "VOID_FAILURE"
            ]
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "BID_PAYMENT_METHOD_VERIFY",
              "CARD_VERIFY",
              "OFFER",
              "OFFER_RETRY",
              "PURCHASE"
            ]
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TransactionDataThymeleaf": {
        "type": "object",
        "properties": {
          "cardHolderName": {
            "type": "string"
          },
          "transactionCardLastDigits": {
            "type": "string"
          },
          "transactionCardType": {
            "type": "string"
          },
          "transactionDate": {
            "$ref": "#/components/schemas/DateThymeleaf"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          }
        }
      },
      "UIDisplaySettings": {
        "type": "object",
        "properties": {
          "flags": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SHOW_ADDITIONAL_DETAILS_ON_LISTINGS",
                "SHOW_MORE_INFO_ICON_ON_LISTINGS",
                "SHOW_INVENTORY_CATEGORY_DETAIL_SCREEN",
                "PRICE_OVERRIDE",
                "PRICE_OVERRIDE_WARNING"
              ]
            }
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UIUserActivityTabConfigurationResponse": {
        "type": "object",
        "properties": {
          "tabResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UIUserActivityTabConfigurationResponseItem"
            }
          }
        }
      },
      "UIUserActivityTabConfigurationResponseItem": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean"
          },
          "showPastEvents": {
            "type": "boolean"
          },
          "tabType": {
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE_EVENTS",
              "STREAMING_EVENTS",
              "ACTIVE_OFFER_EVENTS",
              "SELLING_EVENT",
              "PROMOTER_MANAGEMENT_EVENT",
              "USER_INBOX"
            ]
          }
        }
      },
      "UnBlacklistAccountRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateBidRequest": {
        "type": "object",
        "required": [
          "bidId",
          "price",
          "quantity"
        ],
        "properties": {
          "bidId": {
            "type": "integer",
            "format": "int64"
          },
          "checkedCheckboxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expirationOptionCode": {
            "type": "string"
          },
          "expirationType": {
            "type": "string",
            "enum": [
              "BEFORE_EVENT_2H",
              "BEFORE_EVENT_24H",
              "BEFORE_EVENT_48H",
              "BEFORE_EVENT_72H"
            ]
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "paymentMethodId": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateBoxOfficePrinterRequest": {
        "type": "object",
        "required": [
          "clientId",
          "id"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ipAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateCategoryOfferGroupRequest": {
        "type": "object",
        "required": [
          "inventoryCategory"
        ],
        "properties": {
          "inventoryCategory": {
            "$ref": "#/components/schemas/UpdateInventoryCategoryRequest"
          },
          "numOfferGroupInventory": {
            "description": "Use offerGroupSettings instead.",
            "type": "integer",
            "format": "int32"
          },
          "offerGroupSettings": {
            "$ref": "#/components/schemas/OfferGroupSettings"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateClientChoicePricingRequest": {
        "type": "object",
        "required": [
          "choiceCode",
          "offsetAmount"
        ],
        "properties": {
          "choiceCode": {
            "type": "string"
          },
          "choiceId": {
            "description": "If set, performs and update. If null, creates a new type pricing.",
            "type": "integer",
            "format": "int64"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "offsetAmount": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTranslation"
            }
          },
          "userLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateClientFeaturesRequest": {
        "type": "object",
        "required": [
          "clientId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "dataExportsEnabled": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateClientPromoCodeDiscountRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "discountValue": {
            "type": "number"
          },
          "discountValueType": {
            "type": "string",
            "enum": [
              "PERCENTAGE_DISCOUNT",
              "FLAT_PER_INVENTORY_DISCOUNT",
              "FLAT_PER_PARENT_INVENTORY_DISCOUNT"
            ]
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "globalLimit": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "limitType": {
            "type": "string",
            "enum": [
              "PER_CART",
              "PER_APPLICATION",
              "PER_INVENTORY_ACCESS_TOKEN"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "userLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateClientRequest": {
        "type": "object",
        "required": [
          "clientId"
        ],
        "properties": {
          "avatarMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "bannerMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "clientUIConfig": {
            "$ref": "#/components/schemas/ClientUIConfig"
          },
          "contactEmailAddress": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "countryCodeISO2": {
            "type": "string"
          },
          "freeFormAddress": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "unitInformation": {
            "type": "string"
          }
        }
      },
      "UpdateClientUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateEventCollaboratorRequestItem": {
        "type": "object",
        "required": [
          "clientUserId",
          "role"
        ],
        "properties": {
          "clientUserId": {
            "type": "integer",
            "format": "int64"
          },
          "role": {
            "type": "string",
            "enum": [
              "PERSONAL_ADMINISTRATOR",
              "YOOP_ADMINISTRATOR",
              "YOOP_FINANCE_MANAGER",
              "YOOP_CUSTOMER_SERVICE",
              "ADMINISTRATOR",
              "BOX_OFFICE_MANAGER",
              "BOX_OFFICE_AGENT",
              "EVENT_COORDINATOR",
              "GENERAL_MANAGER",
              "OPERATIONS_MANAGER",
              "OWNER",
              "SALES_ANALYST",
              "USHER_MANAGER",
              "USHER"
            ]
          }
        }
      },
      "UpdateEventCollaboratorsRequest": {
        "type": "object",
        "required": [
          "updates"
        ],
        "properties": {
          "eventDraftId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEventCollaboratorRequestItem"
            }
          }
        }
      },
      "UpdateEventTimelineRequest": {
        "type": "object",
        "required": [
          "description",
          "timelineId"
        ],
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "timelineId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineTranslation"
            }
          }
        }
      },
      "UpdateExternalNotificationSubscriptionRequest": {
        "type": "object",
        "required": [
          "displayString",
          "id"
        ],
        "properties": {
          "displayString": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionTranslation"
            }
          }
        }
      },
      "UpdateInventoryCategoryRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "allowTokenAssignment": {
            "type": "boolean"
          },
          "allowUpgradeFrom": {
            "type": "boolean"
          },
          "allowUpgradeTo": {
            "type": "boolean"
          },
          "blacklistedFeeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "choiceSets": {
            "$ref": "#/components/schemas/SetInventoryCategoryChoiceSetsRequest"
          },
          "details": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UpdateInventoryCategoryUIDisplaySettingsRequest"
          },
          "emailRules": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMediaRequest"
            }
          },
          "merchandiseDeliveryMethod": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "PICKUP"
            ]
          },
          "merchandiseEmailDescription": {
            "type": "string"
          },
          "minimumUserAge": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "requestId": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleMaxPrice": {
            "type": "number"
          },
          "rules": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryCategoryTranslation"
            }
          },
          "upsellAllowed": {
            "type": "boolean"
          }
        }
      },
      "UpdateInventoryCategoryUIDisplaySettingsRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "flagsToKeep"
        ],
        "properties": {
          "color": {
            "type": "string"
          },
          "flagsToAdd": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SHOW_ADDITIONAL_DETAILS_ON_LISTINGS",
                "SHOW_MORE_INFO_ICON_ON_LISTINGS",
                "SHOW_INVENTORY_CATEGORY_DETAIL_SCREEN",
                "PRICE_OVERRIDE",
                "PRICE_OVERRIDE_WARNING"
              ]
            }
          },
          "flagsToKeep": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SHOW_ADDITIONAL_DETAILS_ON_LISTINGS",
                "SHOW_MORE_INFO_ICON_ON_LISTINGS",
                "SHOW_INVENTORY_CATEGORY_DETAIL_SCREEN",
                "PRICE_OVERRIDE",
                "PRICE_OVERRIDE_WARNING"
              ]
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateInventoryChoiceRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isArchived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceTagRequest"
            }
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceTranslation"
            }
          }
        }
      },
      "UpdateInventoryChoiceSetChoicesRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "choicesToKeep"
        ],
        "properties": {
          "choicesToAdd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryChoiceRequest"
            }
          },
          "choicesToKeep": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryChoiceRequest"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UpdateInventoryChoiceSetRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "choices": {
            "$ref": "#/components/schemas/UpdateInventoryChoiceSetChoicesRequest"
          },
          "defaultChoiceCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "description": "The id of the inventory choice set.",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryChoiceSetTranslation"
            }
          }
        }
      },
      "UpdateLiveConferenceConfigRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "inviteExpirationSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxSetupSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnectSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomDisconnects": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "maxWaitingRoomParticipantCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "meetingName": {
            "type": "string"
          },
          "minWaitingRoomSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "notPreviouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "previouslyInvitedPollIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "roomId": {
            "type": "string"
          }
        }
      },
      "UpdateLocationProfileRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string"
          },
          "id": {
            "description": "The ID of the location profile to be updated.",
            "type": "integer",
            "format": "int64"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "timeZoneOffset": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileTranslation"
            }
          },
          "webAddress": {
            "type": "string"
          }
        }
      },
      "UpdateLocationProfileTranslationsRequest": {
        "type": "object",
        "required": [
          "addressLine1",
          "addressLine2",
          "description",
          "id",
          "name",
          "phoneNumber"
        ],
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationProfileTranslation"
            }
          }
        }
      },
      "UpdateMarketplaceRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "marketplaceId"
        ],
        "properties": {
          "capacityDefaultString": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "displayOptions": {
            "type": "string"
          },
          "forceAutoPay": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "lowCapacityPercentageThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "maxManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minManualPaymentDurationSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "requestId": {
            "type": "string"
          },
          "resaleAllowed": {
            "type": "boolean"
          },
          "resaleForbiddenString": {
            "type": "string"
          },
          "rules": {
            "type": "string"
          },
          "shippingMethod": {
            "type": "string"
          },
          "ticketLimit": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceTranslation"
            }
          }
        }
      },
      "UpdateMediaRequest": {
        "type": "object",
        "required": [
          "mediaId",
          "mediaType",
          "url"
        ],
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "longDescription": {
            "type": "string"
          },
          "mediaId": {
            "type": "integer",
            "format": "int64"
          },
          "mediaSubType": {
            "type": "string",
            "enum": [
              "STREAMING_HLS_DRM",
              "STREAMING_DASH_DRM",
              "STREAMING_HLS_RAW",
              "STREAMING_DASH_RAW",
              "VOD_HLS_DRM",
              "VOD_DASH_DRM",
              "VOD_HLS_RAW",
              "VOD_DASH_RAW"
            ]
          },
          "mediaType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "SEATMAP",
              "VIDEO",
              "AUDIO",
              "STREAMING"
            ]
          },
          "requestId": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaTranslation"
            }
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateMevDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "id"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "UpdateOfferGroupBulkRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "properties": {
          "offerGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "offerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateOfferGroupRequest"
            }
          }
        }
      },
      "UpdateOfferGroupRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "offerGroupId"
        ],
        "properties": {
          "additionalDetails": {
            "type": "string"
          },
          "allowDynamicPrice": {
            "type": "boolean"
          },
          "boxOfficeExclusiveSoldOutString": {
            "type": "string"
          },
          "capacityDefaultString": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/UpdateOfferGroupRequest"
          },
          "choicePricingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateClientChoicePricingRequest"
            }
          },
          "description": {
            "type": "string"
          },
          "displaySettings": {
            "$ref": "#/components/schemas/UIDisplaySettings"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "inventoryCount": {
            "$ref": "#/components/schemas/GAInventoryCount"
          },
          "inventoryReferences": {
            "description": "Cannot be used together with inventoryCount.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryReferenceV2"
            }
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "onlineEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "pricingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrUpdatePricingTierRequest"
            }
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "type": "string"
          },
          "reservePrice": {
            "type": "number"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferGroupTranslation"
            }
          },
          "visibleEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateSeatConfigRequest": {
        "type": "object",
        "required": [
          "seatConfigId"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "requestId": {
            "type": "string"
          },
          "seatConfigId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpdateSponsorRequest": {
        "description": "This is a partial-update PATCH style request.",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "iconMedia": {
            "$ref": "#/components/schemas/CreateMediaRequest"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "ranking": {
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorTranslation"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "UpdateSquareTerminalDeviceRequest": {
        "type": "object",
        "required": [
          "clientId",
          "pairingId"
        ],
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int64"
          },
          "deviceName": {
            "type": "string"
          },
          "pairingId": {
            "type": "string"
          }
        }
      },
      "UpdateSubDetailRequest": {
        "type": "object",
        "required": [
          "description",
          "subDetailId"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "eventTagType": {
            "type": "string",
            "enum": [
              "CLIENT",
              "LOCATION_PROFILE",
              "PERFORMER_PROFILE"
            ]
          },
          "icon": {
            "$ref": "#/components/schemas/UpdateMediaRequest"
          },
          "requestId": {
            "type": "string"
          },
          "secondaryDescription": {
            "type": "string"
          },
          "subDetailId": {
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubDetailTranslation"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "COVID",
              "BAGS",
              "SOCIAL",
              "MERCHANDISE",
              "RECEIPT_EMAIL"
            ]
          },
          "url": {
            "type": "string"
          }
        }
      },
      "UpgradeOfferSourceRequest": {
        "type": "object",
        "properties": {
          "inventoryItemIdsForUpgrade": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sourceOfferId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UpsellDetailsThymeleaf": {
        "type": "object",
        "properties": {
          "deepLinkOfferGroup": {
            "type": "string"
          },
          "mediaUrl": {
            "type": "string"
          },
          "offerGroupDescription": {
            "type": "string"
          },
          "offerGroupReservePrice": {
            "type": "string"
          },
          "offerGroupSoldOut": {
            "type": "boolean"
          }
        }
      },
      "UrlResponse": {
        "type": "object",
        "properties": {
          "url": {
            "description": "A url",
            "type": "string"
          }
        }
      },
      "UserActivityEventDetailResponse": {
        "type": "object",
        "properties": {
          "accessControlConfigurationResponse": {
            "$ref": "#/components/schemas/EventAccessControlConfigurationResponse"
          },
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "additionalDescription": {
            "description": "Additional description for the event",
            "type": "string"
          },
          "addressLine1": {
            "description": "The address line 1 of the location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the location",
            "type": "string"
          },
          "analyticsTrackers": {
            "description": "Analytics trackers for this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventAnalyticsTrackerResponse"
            }
          },
          "announcement": {
            "description": "Any announcement for the event",
            "type": "string"
          },
          "assigneeTokenInformation": {
            "description": "Information for the tokens that others have assigned to this user for an event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "auxiliaryMarketplaceInformation": {
            "description": "The list of auxiliary marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "avatarMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "bids": {
            "description": "Information for the bids that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          },
          "boxOfficeConfig": {
            "$ref": "#/components/schemas/GetBoxOfficeConfigResponse"
          },
          "categoryDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetailResponse"
            }
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "clientIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "countryName": {
            "description": "The country in which the event takes place",
            "type": "string"
          },
          "creatorClientName": {
            "description": "The creator client name of the event",
            "type": "string"
          },
          "currency": {
            "description": "The currency for the recommended price",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "deepLinkForStreaming": {
            "description": "The deepLink to my yoop streaming page",
            "type": "string"
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "defaultPurchasePeopleQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "discountCodesAllowed": {
            "type": "boolean"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "emailMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "eventAccessibilityType": {
            "description": "An event's accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventDate": {
            "description": "The date time of this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventRestrictions": {
            "description": "The restrictions to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubDetailResponse"
            }
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "eventTimelineGroups": {
            "description": "The timeline to display for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTimelineGroupResponse"
            }
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "facebookPixelId": {
            "type": "string"
          },
          "feeConfigurationResponse": {
            "$ref": "#/components/schemas/EventFeeConfigurationResponse"
          },
          "forceIdCheck": {
            "type": "boolean"
          },
          "gateUrl": {
            "description": "The gate url for this event",
            "type": "string"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of the geographic region in which the event takes place (e.g. state)",
            "type": "string"
          },
          "hasActiveOrFuturePrivateMarketplace": {
            "description": "Represent if event contain at least one active password protected marketplace in open or open in future state",
            "type": "boolean"
          },
          "hasAtLeastOneSalesGroup": {
            "description": "Represent if event contain at least one sales group",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of this event",
            "type": "string"
          },
          "inventoryChangesAllowed": {
            "type": "boolean"
          },
          "language": {
            "description": "The primary language of the event in ISO2 ('en', 'fr', etc.)",
            "type": "string"
          },
          "latitude": {
            "description": "The latitude of the event location",
            "type": "number"
          },
          "liveConferenceGreeterMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "liveStreamEndDate": {
            "description": "The date time this event's live stream ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "liveStreamReplaySeconds": {
            "description": "The amount of time, in seconds, the live stream can be replayed",
            "type": "integer",
            "format": "int32"
          },
          "liveStreamStartDate": {
            "description": "The date and time the event live stream takes place in local time. ",
            "type": "string",
            "format": "date-time"
          },
          "locationId": {
            "description": "The name of the event location",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location",
            "type": "string"
          },
          "longitude": {
            "description": "The longitude of the event location",
            "type": "number"
          },
          "marketplaceInformation": {
            "description": "The list of marketplaces associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "media": {
            "description": "Additional images and video for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minimumOwnershipBeforeResaleSeconds": {
            "description": "The amount of time, in seconds, purchased items must hold before being able to resale",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "notificationSubscriptions": {
            "description": "The subscription options for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalNotificationSubscriptionResponse"
            }
          },
          "numInTour": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "optionalLongDescription": {
            "description": "An optional long description of the event",
            "type": "string"
          },
          "optionalShortDescription": {
            "description": "An optional short description of the event",
            "type": "string"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "A list of performers that will be performing at the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicPerformerResponse"
            }
          },
          "postalCode": {
            "description": "The postal code for the location",
            "type": "string"
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "private": {
            "type": "boolean"
          },
          "receiptResponseList": {
            "description": "The receipts associated with this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderReceiptResponse"
            }
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "scheduleMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatChart": {
            "$ref": "#/components/schemas/GetSeatChartResponse"
          },
          "seatMap": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "seatsIOChartEventKey": {
            "type": "string"
          },
          "shippingGeoRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventGeoRestrictionResponse"
            }
          },
          "shortName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "sponsorGroups": {
            "description": "The sponsor groups for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorGroupResponse"
            }
          },
          "state": {
            "description": "The state of this event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "ticketLimit": {
            "description": "The maximum number of tickets a user can buy for this event",
            "type": "string"
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "tokenInformation": {
            "description": "Information for the tokens that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "tourResponse": {
            "$ref": "#/components/schemas/TourResponse"
          },
          "transactionPeriodMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "userEventKey": {
            "description": "The event key the user has",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "The user uuid prefix for the event",
            "type": "string"
          },
          "usherUUID": {
            "description": "The usher uuid for the event",
            "type": "string"
          },
          "vanityName": {
            "description": "The short name of this event",
            "type": "string"
          },
          "videoStreamMedias": {
            "description": "Video stream medias for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          }
        }
      },
      "UserActivityEventListResponse": {
        "type": "object",
        "properties": {
          "userActivityList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleUserActivityEventResponse"
            }
          }
        }
      },
      "UserActivityListSummaryResponse": {
        "type": "object",
        "properties": {
          "userActivityList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserActivityListSummaryResponseItem"
            }
          }
        }
      },
      "UserActivityListSummaryResponseItem": {
        "type": "object",
        "properties": {
          "assigneeTokenInformation": {
            "description": "Information for the tokens that others have assigned to this user for an event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          },
          "bids": {
            "description": "Bids submitted by the user for this event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidResponse"
            }
          },
          "id": {
            "description": "The ID for the event",
            "type": "string"
          },
          "marketplaceInformation": {
            "description": "Information for the marketplaces that are present for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleMarketplaceResponse"
            }
          },
          "tokenInformation": {
            "description": "Information for the tokens that a user has for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenInfoResponse"
            }
          }
        }
      },
      "UserAddressCreateRequest": {
        "type": "object",
        "required": [
          "countryCodeISO2",
          "description",
          "geoRegionId",
          "postalCode"
        ],
        "properties": {
          "addressLine1": {
            "description": "The address line 2 of the address the user is creating",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the address the user is creating",
            "type": "string"
          },
          "cityName": {
            "description": "The City name of the address the user is creating",
            "type": "string"
          },
          "countryCodeISO2": {
            "description": "The two letter Country Code of the address the user is creating",
            "type": "string"
          },
          "description": {
            "description": "The description of the address the user is creating",
            "type": "string"
          },
          "geoRegionId": {
            "description": "The ID for the GeoRegion of the address the user is creating",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address the user is creating",
            "type": "string"
          }
        }
      },
      "UserAddressResponse": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "description": "The address line 1 of the address",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the address",
            "type": "string"
          },
          "cityName": {
            "description": "The City name of the address",
            "type": "string"
          },
          "countryCode": {
            "description": "The country code of the Country of the address",
            "type": "string"
          },
          "countryId": {
            "description": "The ID for the Country of the address",
            "type": "string"
          },
          "countryName": {
            "description": "The name of the Country of the address",
            "type": "string"
          },
          "description": {
            "description": "The description of the address",
            "type": "string"
          },
          "geoRegionId": {
            "description": "The ID for the GeoRegion of the address",
            "type": "string"
          },
          "geoRegionName": {
            "description": "The name of the GeoRegion of the address",
            "type": "string"
          },
          "id": {
            "description": "The ID of the address",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address",
            "type": "string"
          }
        }
      },
      "UserAddressUpdateRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "addressLine1": {
            "description": "The address line 2 of the address the user is creating",
            "type": "string"
          },
          "addressLine2": {
            "description": "The address line 2 of the address the user is creating",
            "type": "string"
          },
          "cityName": {
            "description": "The City name of the address the user is creating",
            "type": "string"
          },
          "countryCodeISO2": {
            "description": "The two letter Country Code of the address the user is creating",
            "type": "string"
          },
          "description": {
            "description": "The description of the address the user is creating",
            "type": "string"
          },
          "geoRegionId": {
            "description": "The ID for the GeoRegion of the address the user is creating",
            "type": "string"
          },
          "id": {
            "description": "The ID of the address the user is updating",
            "type": "integer",
            "format": "int64"
          },
          "postalCode": {
            "description": "The postal code of the address the user is creating",
            "type": "string"
          }
        }
      },
      "UserAuthenticationResponse": {
        "type": "object",
        "required": [
          "authToken",
          "needsEmailVerification"
        ],
        "properties": {
          "authToken": {
            "description": "The user's authentication token",
            "type": "string"
          },
          "city": {
            "description": "The user's city of residence",
            "type": "string"
          },
          "country": {
            "description": "The user's country of residence",
            "type": "string"
          },
          "countryCode": {
            "description": "The user's country of residence",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The user's date of birth",
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "description": "The email address of the user",
            "type": "string"
          },
          "eventReady": {
            "description": "Is this user event ready?",
            "type": "boolean"
          },
          "firstName": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "geographicRegion": {
            "description": "The user's Geographic Region",
            "type": "string"
          },
          "id": {
            "description": "The user's id",
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "description": "The user's last name",
            "type": "string"
          },
          "latestPictureVerificationDate": {
            "description": "The last date when an usher verified the user",
            "type": "string",
            "format": "date-time"
          },
          "mobileCountry": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "mobileNumber": {
            "description": "The user's mobile number",
            "type": "string"
          },
          "mobileNumberVerificationStatus": {
            "description": "Whether or not the user's mobile phone number has been verified",
            "type": "boolean"
          },
          "needsEmailVerification": {
            "description": "Status of whether or not the user needs to verify their email address",
            "type": "boolean"
          },
          "paymentMeans": {
            "description": "The means of payment the user has provided",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMeans"
            }
          },
          "postalCode": {
            "description": "The user's postal code",
            "type": "string"
          },
          "profilePictureUrl": {
            "description": "A signed URL to download the profile picture",
            "type": "string"
          },
          "profilePictureVerificationStatus": {
            "description": "Whether or not the user's profile picture has been verified",
            "type": "boolean"
          },
          "secretKey": {
            "description": "The secret key associated with the User",
            "type": "string"
          },
          "seenProfilePictureVerificationState": {
            "description": "Has the user seen the verified status. ONLY USE IF USER IS PROFILE PICTURE VERIFIED!",
            "type": "boolean"
          },
          "userAuthenticationState": {
            "description": "The user's account status",
            "type": "string",
            "enum": [
              "EMAIL_UNVERIFIED",
              "EMAIL_VERIFIED",
              "BLACK_LISTED"
            ]
          },
          "userLocale": {
            "description": "The user's locale",
            "type": "string"
          }
        }
      },
      "UserCategoryEventStreamInfo": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int64"
          },
          "cslMaxSessions": {
            "type": "integer",
            "format": "int32"
          },
          "drmAssetId": {
            "type": "string"
          },
          "drmSessionId": {
            "type": "string"
          },
          "drmToken": {
            "type": "string"
          },
          "drmTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "drmTokenIssueTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "liveStreamEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "streamViewerToken": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "videoStreamMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          }
        }
      },
      "UserCheckInInfoLogResponse": {
        "type": "object",
        "properties": {
          "accessControlActivityLastAction": {
            "type": "string",
            "enum": [
              "DECLINED",
              "FINAL_DECLINED",
              "CHECK_IN_GRANTED",
              "CHECK_IN_RESCAN",
              "ID_VERIFY",
              "PROFILE_PICTURE_VERIFY",
              "MERCHANDISE_PICKED_UP"
            ]
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "UserCheckInInfoResponse": {
        "type": "object",
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "lastName": {
            "type": "string"
          },
          "profilePictureVerificationStatus": {
            "type": "boolean"
          },
          "userId": {
            "type": "string"
          },
          "userProfilePictureUrl": {
            "type": "string"
          }
        }
      },
      "UserCheckoutInfo": {
        "type": "object",
        "properties": {
          "offerGroupItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCheckoutInfoOfferGroupItem"
            }
          },
          "pricingData": {
            "$ref": "#/components/schemas/UserCheckoutInfoPricingData"
          },
          "tokenExpiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserCheckoutInfoOfferGroupItem": {
        "type": "object",
        "properties": {
          "appliedDiscounts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "uniqueItems": true
          },
          "inventoryItemIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "lockToken": {
            "type": "string"
          },
          "offerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "offerPerTokenPrice": {
            "type": "number"
          },
          "seatCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sectionCode": {
            "type": "integer",
            "format": "int64"
          },
          "serverGuid": {
            "type": "string"
          },
          "upgradeCheckoutData": {
            "$ref": "#/components/schemas/OfferUpgradeCheckoutRequest"
          }
        }
      },
      "UserCheckoutInfoPricingData": {
        "type": "object",
        "properties": {
          "totalAmount": {
            "type": "number"
          }
        }
      },
      "UserCustomIdGenerationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "UserDemographicData": {
        "type": "object",
        "properties": {
          "ageData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricInteger"
            }
          },
          "genderData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricGender"
            }
          },
          "locationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricLocation"
            }
          }
        }
      },
      "UserDemographics": {
        "type": "object",
        "properties": {
          "ageData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricInteger"
            }
          },
          "demographicDataByCategoryType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserDemographicData"
            }
          },
          "genderData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricGender"
            }
          },
          "locationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportingMetricLocation"
            }
          }
        }
      },
      "UserEventFirebaseInfoResponse": {
        "type": "object",
        "properties": {
          "appConfigs": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "eventDocInfo": {
            "$ref": "#/components/schemas/FirestoreDocInfoResponse"
          },
          "eventInventoryCategoryDocInfo": {
            "$ref": "#/components/schemas/FirestoreDocInfoResponse"
          },
          "firebaseLoginToken": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "userEventStreamDocInfo": {
            "$ref": "#/components/schemas/FirestoreDocInfoResponse"
          }
        }
      },
      "UserEventVideoStreamInfoResponse": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventDetailResponse"
          },
          "firebase": {
            "$ref": "#/components/schemas/UserEventFirebaseInfoResponse"
          },
          "serverTime": {
            "type": "string",
            "format": "date-time"
          },
          "streamInfo": {
            "$ref": "#/components/schemas/UserCategoryEventStreamInfo"
          }
        }
      },
      "UserGetEventExchangeInfoResponse": {
        "description": "This is used for the user app facing exchange info.",
        "type": "object",
        "properties": {
          "bidExpirationOptions": {
            "description": "Used for showing the list of bid expiration options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetBidExpirationOptionsResponse"
            }
          },
          "bidSubmissionWindow": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "dynamicPricingEnabled": {
            "type": "boolean"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "exchangeEnabled": {
            "type": "boolean"
          },
          "inventoryCategories": {
            "description": "Used for showing the list of categories a user can submit bids on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGetInventoryCategoryExchangeInfoResponse"
            }
          },
          "verifyPaymentMethodEnabled": {
            "type": "boolean"
          }
        }
      },
      "UserGetExchangeInfoRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "locale": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "iso3Country": {
                "type": "string"
              },
              "iso3Language": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "unicodeLocaleKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              },
              "variant": {
                "type": "string"
              }
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "UserGetInventoryCategoryExchangeInfoResponse": {
        "description": "Used for showing the list of categories a user can submit bids on.",
        "type": "object",
        "properties": {
          "dynamicPricingEnabled": {
            "type": "boolean"
          },
          "inventoryCategory": {
            "$ref": "#/components/schemas/GetInventoryCategoryResponse"
          },
          "marketplaceDataResponse": {
            "$ref": "#/components/schemas/GetInventoryCategoryMarketplaceDataResponse"
          },
          "maxBidPrice": {
            "description": "This is the maximum amount a user can enter when performing bid checkout.",
            "type": "number"
          },
          "minBidPrice": {
            "description": "This is the minimum amount a user must enter when performing bid checkout.",
            "type": "number"
          },
          "sectionCodeStrings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectionCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "verifyPaymentMethodEnabled": {
            "type": "boolean"
          }
        }
      },
      "UserMasterListAssigneeEs": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "UserMasterListResponse": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "guestAssignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMasterListAssigneeEs"
            }
          },
          "lastName": {
            "type": "string"
          },
          "offerIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "pendingAssigneeEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "UserNotificationSettingUpdateRequest": {
        "type": "object",
        "required": [
          "notificationDeliveryType",
          "notificationGroup",
          "shouldSend"
        ],
        "properties": {
          "notificationDeliveryType": {
            "description": "The notification delivery type for the user notification setting",
            "type": "string",
            "enum": [
              "EMAIL",
              "SMS",
              "PUSH",
              "INBOX"
            ]
          },
          "notificationGroup": {
            "description": "The notification group for the user notification setting",
            "type": "string",
            "enum": [
              "MARKETPLACE",
              "PAYMENT",
              "SYSTEM"
            ]
          },
          "shouldSend": {
            "description": "A flag for whether or not the user should get notifications for the notification group",
            "type": "boolean"
          }
        }
      },
      "UserProfilePictureRequest": {
        "type": "object",
        "required": [
          "inventoryItemId",
          "userId"
        ],
        "properties": {
          "inventoryItemId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UserProfilePictureResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UserProfilePicturesRequest": {
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProfilePictureRequest"
            }
          }
        }
      },
      "UserProfilePicturesResponse": {
        "type": "object",
        "properties": {
          "pictures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProfilePictureResponse"
            }
          }
        }
      },
      "UserProfileRequest": {
        "type": "object",
        "properties": {
          "countryCode": {
            "description": "The user's country code",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The user's date of birth",
            "type": "string",
            "format": "date"
          },
          "firstName": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "lastName": {
            "description": "The user's last name",
            "type": "string"
          },
          "mobileCountryCodeISO2": {
            "description": "The user's two digit country code of the user's mobile number",
            "type": "string"
          },
          "mobileNumber": {
            "description": "The user's mobile number",
            "type": "string"
          },
          "postalCode": {
            "description": "The user's postal code",
            "type": "string"
          },
          "userLocale": {
            "description": "The user's locale",
            "type": "string"
          }
        }
      },
      "UserProfileResponse": {
        "type": "object",
        "properties": {
          "city": {
            "description": "The user's city of residence",
            "type": "string"
          },
          "country": {
            "description": "The user's country of residence",
            "type": "string"
          },
          "countryCode": {
            "description": "The user's country of residence",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The user's date of birth",
            "type": "string",
            "format": "date"
          },
          "emailAddress": {
            "description": "The email address of the user",
            "type": "string"
          },
          "eventReady": {
            "description": "Is this user event ready?",
            "type": "boolean"
          },
          "firstName": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNDECLARED"
            ]
          },
          "geographicRegion": {
            "description": "The user's Geographic Region",
            "type": "string"
          },
          "id": {
            "description": "The user's id",
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "description": "The user's last name",
            "type": "string"
          },
          "latestPictureVerificationDate": {
            "description": "The last date when an usher verified the user",
            "type": "string",
            "format": "date-time"
          },
          "mobileCountry": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "mobileNumber": {
            "description": "The user's mobile number",
            "type": "string"
          },
          "mobileNumberVerificationStatus": {
            "description": "Whether or not the user's mobile phone number has been verified",
            "type": "boolean"
          },
          "paymentMeans": {
            "description": "The means of payment the user has provided",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMeans"
            }
          },
          "postalCode": {
            "description": "The user's postal code",
            "type": "string"
          },
          "profilePictureUrl": {
            "description": "A signed URL to download the profile picture",
            "type": "string"
          },
          "profilePictureVerificationStatus": {
            "description": "Whether or not the user's profile picture has been verified",
            "type": "boolean"
          },
          "secretKey": {
            "description": "The secret key associated with the User",
            "type": "string"
          },
          "seenProfilePictureVerificationState": {
            "description": "Has the user seen the verified status. ONLY USE IF USER IS PROFILE PICTURE VERIFIED!",
            "type": "boolean"
          },
          "userAuthenticationState": {
            "description": "The user's account status",
            "type": "string",
            "enum": [
              "EMAIL_UNVERIFIED",
              "EMAIL_VERIFIED",
              "BLACK_LISTED"
            ]
          },
          "userLocale": {
            "description": "The user's locale",
            "type": "string"
          }
        }
      },
      "UserRefundRequest": {
        "type": "object",
        "properties": {
          "refundOfferRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundOfferRequest"
            }
          }
        }
      },
      "UserSecondaryListings": {
        "type": "object",
        "properties": {
          "offerGroups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "UserTransactionListResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTransactionResponse"
            }
          }
        }
      },
      "UserTransactionResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "VERIFICATION",
              "PAYMENT",
              "REFUND",
              "CHARGEBACK",
              "REVOKE_WITHOUT_REFUND",
              "EXTERNAL_PAYMENT"
            ]
          },
          "amount": {
            "type": "number"
          },
          "cardCountry": {
            "type": "string"
          },
          "cardHolderName": {
            "type": "string"
          },
          "cardLastFour": {
            "type": "string"
          },
          "cardPostalCode": {
            "type": "string"
          },
          "cardType": {
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMEX"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "customerOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "string"
          },
          "refundReason": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UsherEventListResponse": {
        "type": "object",
        "properties": {
          "accessControlIdCheckMode": {
            "type": "string",
            "enum": [
              "NO_ID",
              "FORCE_ID",
              "TRUE_YOOP"
            ]
          },
          "accessControlMode": {
            "type": "string",
            "enum": [
              "EXTERNAL",
              "YOOP"
            ]
          },
          "accessControlSubMode": {
            "type": "string",
            "enum": [
              "BLE",
              "NFC_BLE",
              "QR_CODE"
            ]
          },
          "activeMarketplaceEndDateTime": {
            "description": "Date that indicates the end time of the current draw",
            "type": "string",
            "format": "date-time"
          },
          "activeMarketplaceType": {
            "description": "Date that indicates the end time of the current live market",
            "type": "string",
            "enum": [
              "DRAW",
              "AUCTION",
              "PURCHASE",
              "PROMOTER",
              "CLIENT_GUEST",
              "SECONDARY_EXCHANGE"
            ]
          },
          "announcement": {
            "description": "Any announcement string for the event",
            "type": "string"
          },
          "cityName": {
            "description": "The name of the city in which the event takes place",
            "type": "string"
          },
          "currency": {
            "description": "The currency used for this event",
            "type": "string",
            "enum": [
              "USD",
              "CAD"
            ]
          },
          "defaultListingTitle": {
            "type": "string"
          },
          "defaultMedia": {
            "$ref": "#/components/schemas/MediaResponse"
          },
          "doorsCloseDate": {
            "description": "The date time the doors close for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "doorsOpenDate": {
            "description": "The date time the doors open for this event in local time",
            "type": "string",
            "format": "date-time"
          },
          "earliestMarketplaceStartDateTime": {
            "description": "Date that indicates the earliest marketplace start date for this event",
            "type": "string",
            "format": "date-time"
          },
          "eventAccessibilityType": {
            "description": "Event accessibility type",
            "type": "string",
            "enum": [
              "LIVE_ATTENDANCE",
              "HYBRID",
              "STREAMING",
              "STREAMING_BASIC"
            ]
          },
          "eventActiveMarketplaceDetails": {
            "$ref": "#/components/schemas/EventActiveMarketplaceDetailsQo"
          },
          "eventCheckInCountResponse": {
            "$ref": "#/components/schemas/EventCheckInCountResponse"
          },
          "eventDate": {
            "description": "The date and time the event takes place in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "description": "The date time this event ends in local time",
            "type": "string",
            "format": "date-time"
          },
          "eventStartDate": {
            "description": "The date and time the event takes place in local time. Can be null for events which have been POSTPONED.",
            "type": "string",
            "format": "date-time"
          },
          "exchangeInfo": {
            "$ref": "#/components/schemas/UserGetEventExchangeInfoResponse"
          },
          "geoRegionAbbreviation": {
            "description": "String with the abbreviation of the geo region (i.e NY)",
            "type": "string"
          },
          "id": {
            "description": "The ID for the event",
            "type": "string"
          },
          "inventoryCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetInventoryCategoryResponse"
            }
          },
          "language": {
            "description": "The primary language of the event",
            "type": "string"
          },
          "locationName": {
            "description": "The name of the event location profile",
            "type": "string"
          },
          "majorCategories": {
            "description": "List of major categories for the event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorCategoryResponse"
            }
          },
          "media": {
            "description": "The list of media for this event",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "minQualifyingPrice": {
            "description": "The minimum offer price to buy one token. For Lotteries the price is constant and for Auctions it may change once the demand is higher than the inventory",
            "type": "number"
          },
          "name": {
            "description": "The name of the event",
            "type": "string"
          },
          "offerGroupCountInActiveMarketplace": {
            "description": "The number of offer groups in the active marketplace",
            "type": "integer",
            "format": "int32"
          },
          "originalEventDate": {
            "description": "The date and time the event was originally scheduled to take place in local time. This is only set when the event state is RESCHEDULED.",
            "type": "string",
            "format": "date-time"
          },
          "payoutDate": {
            "description": "The date and time payouts would occur if resale is present.",
            "type": "string",
            "format": "date-time"
          },
          "performers": {
            "description": "The performer names and ids ONLY",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformerProfileResponse"
            }
          },
          "primaryClientId": {
            "description": "Client ID for Event",
            "type": "integer",
            "format": "int64"
          },
          "refundDeadline": {
            "description": "An event refund deadline (for events that are postponed or rescheduled.",
            "type": "string",
            "format": "date-time"
          },
          "shortName": {
            "description": "The short name of the event",
            "type": "string"
          },
          "soldOut": {
            "type": "boolean"
          },
          "state": {
            "description": "The state of the event",
            "type": "string",
            "enum": [
              "CANCELLED",
              "POSTPONED",
              "RESCHEDULED",
              "UPCOMING"
            ]
          },
          "timeZoneOffset": {
            "description": "The timezone of the event",
            "type": "string"
          },
          "userUUIDPrefix": {
            "description": "UUID used by the Usher to scan for Users. Only returned to Ushers",
            "type": "string"
          },
          "usherUUID": {
            "description": "UUID to be used by the Usher App. Only returned to Ushers",
            "type": "string"
          },
          "vanityName": {
            "description": "The vanity name of the event",
            "type": "string"
          }
        }
      },
      "ValidateDuplicatedDiscountCodesRequest": {
        "type": "object",
        "required": [
          "codes"
        ],
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "ValidatePrivateMarketplaceCodeRequest": {
        "type": "object",
        "required": [
          "code",
          "eventId"
        ],
        "properties": {
          "code": {
            "description": "The code of a private marketplace.",
            "type": "string"
          },
          "eventId": {
            "description": "The ID of the event.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "VenueStreamInfraInfoResponse": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mediaLive": {
            "$ref": "#/components/schemas/MediaLiveInfoResponse"
          },
          "mediaPackage": {
            "$ref": "#/components/schemas/MediaPackageInfoResponse"
          },
          "previewUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VerifyMobileRequest": {
        "type": "object",
        "required": [
          "mobileVerificationCode"
        ],
        "properties": {
          "mobileVerificationCode": {
            "description": "The code sent to the user that is used to verify mobile number of the email address",
            "type": "string"
          }
        }
      },
      "VideoOverview": {
        "type": "object",
        "properties": {
          "accessedTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "activeSessions": {
            "type": "integer",
            "format": "int32"
          },
          "avgEffectiveHours": {
            "type": "number",
            "format": "float"
          },
          "completionRate": {
            "type": "number",
            "format": "float"
          },
          "liveStreamEnd": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStart": {
            "type": "string",
            "format": "date-time"
          },
          "soldTokenCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalTokenCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "VideoTimeseries": {
        "type": "object",
        "properties": {
          "dataGrouping": {
            "type": "string",
            "enum": [
              "GENDER",
              "AGE",
              "LOCATION",
              "ALL"
            ]
          },
          "liveStreamEnd": {
            "type": "string",
            "format": "date-time"
          },
          "liveStreamStart": {
            "type": "string",
            "format": "date-time"
          },
          "videoTimeseriesMetrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTimeseriesMetric"
            }
          }
        }
      },
      "VideoTimeseriesMetric": {
        "type": "object",
        "properties": {
          "quantities": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Offer User Activity Controller",
      "description": "General User functionality pertaining to all offer types"
    },
    {
      "name": "Client API Marketplace Controller",
      "description": "APIs for Clients to manage Marketplaces"
    },
    {
      "name": "Reporting Transactions Controller",
      "description": "Reporting Functions that return transactions"
    },
    {
      "name": "Payment gateway Admin Controller",
      "description": "Yoop Admin to manage payment Spreedly gateway"
    },
    {
      "name": "User configuration controller",
      "description": "Functions for reading client configurations."
    },
    {
      "name": "User API Exchange Controller",
      "description": "APIs for Users to manage bids"
    },
    {
      "name": "Client API Event Sponsor Controller",
      "description": "Client API for Event Sponsors."
    },
    {
      "name": "Tour Admin Controller",
      "description": "Yoop Admin and Client User APIs to create and maintain tour information"
    },
    {
      "name": "Client API Client Refund Fee Controller",
      "description": "Client API for client refund fee related actions."
    },
    {
      "name": "Client API Event Affiliate Code Controller",
      "description": "Client API for Event Affiliate Codes."
    },
    {
      "name": "Client API Collaboration Controller",
      "description": "Client API for "
    },
    {
      "name": "Token Assignment Controller",
      "description": "User APIs pertaining to the assignment and transfer of tokens to other users"
    },
    {
      "name": "Clint User Management Controller",
      "description": "User APIs for clients to create or find users in order to do actions on their behalf"
    },
    {
      "name": "Load test Account Controller",
      "description": "Load test API mocks user login"
    },
    {
      "name": "GeoData Controller",
      "description": "Public APIs to retrieve Geographic Location information"
    },
    {
      "name": "Resale Controller",
      "description": "User APIs pertaining to setting up/processing listings in the secondary market"
    },
    {
      "name": "Marketplace Administration Controller",
      "description": "APIs for Yoop Admins and Clients to create, update and maintain Marketplaces"
    },
    {
      "name": "User Device Token Controller",
      "description": "User APIs to set and update the device token for push notifications"
    },
    {
      "name": "Performer Controller",
      "description": "Public APIs to pertaining to performers"
    },
    {
      "name": "User API Sales Group Controller",
      "description": "APIs for Users to get sales groups"
    },
    {
      "name": "Performer Admin Controller",
      "description": "Yoop Admin and Client User APIs to create and maintain performer profiles"
    },
    {
      "name": "Newsletter Controller",
      "description": "User APIs pertaining to newsletters"
    },
    {
      "name": "Client API Fee Controller",
      "description": "Client API for Fee related actions."
    },
    {
      "name": "Live Streaming DRM Controller",
      "description": "DRM endpoints for Live Streaming"
    },
    {
      "name": "Event Access Control Controller",
      "description": "APIs for the Usher and Usher Manger to check in Event Goers"
    },
    {
      "name": "Client API Exchange Controller",
      "description": "APIs for Clients to manage bid/ask exchanges"
    },
    {
      "name": "Auction and Draw Controller",
      "description": "User APIs for unique operations shared by both Auction and Draw marketplaces."
    },
    {
      "name": "Client API Sales Group Controller",
      "description": "APIs for Clients to manage Marketplaces"
    },
    {
      "name": "List/Draw Controller",
      "description": "User APIs pertaining to Lists/Draws"
    },
    {
      "name": "Client API Location Controller",
      "description": "Client API for creating and maintaining Locations, Venues, and Seat Configurations."
    },
    {
      "name": "Manual Notification Admin Controller",
      "description": "Yoop Admin APIs to manually send push, email and inbox notifications"
    },
    {
      "name": "Client User Administration Controller",
      "description": "Functions for maintaining Client Users"
    },
    {
      "name": "User Account Controller",
      "description": "User APIs to manage user accounts - login/logout, create/delete account, etc. "
    },
    {
      "name": "Purchase Controller - Client",
      "description": "Client user APIs pertaining to buying tickets at a set price on behalf of user outside of Auctions or Lists/Draws"
    },
    {
      "name": "Integration Test Controller",
      "description": "Util endpoints for integration tests."
    },
    {
      "name": "Event User Refund Controller",
      "description": "User functionality pertaining to refunds for Yoop they own"
    },
    {
      "name": "User Notification Settings Controller",
      "description": "User APIs to set notification preferences"
    },
    {
      "name": "Client API Event Controller",
      "description": "Client API for Events."
    },
    {
      "name": "Venue/Location Controller",
      "description": "Public APIs to retrieve Venues and Event Locations"
    },
    {
      "name": "Client API Event Timeline Controller",
      "description": "Client API for Event Timelines."
    },
    {
      "name": "Shortcut Controller",
      "description": "Controller for retrieving the latest shortcuts to be displayed in the app."
    },
    {
      "name": "Notification Admin Controller",
      "description": "Yoop Admin and Client User APIs to create and maintain notification templates"
    },
    {
      "name": "Event Access Control Controller",
      "description": "APIs for the Client users to get event information"
    },
    {
      "name": "User Profile Controller",
      "description": "User APIs to create, update and view personal user profile information"
    },
    {
      "name": "Sponsor Administration Controller",
      "description": "Functions for maintaining sponsors"
    },
    {
      "name": "Event Notifications Controller",
      "description": "Yoop Client APIs to manually send push, email and inbox notifications"
    },
    {
      "name": "Client API Auth Controller",
      "description": "Client API for authentication."
    },
    {
      "name": "User Account Controller",
      "description": "User APIs to manage generate ids for user. "
    },
    {
      "name": "Client API Inventory Controller",
      "description": "Client API for managing inventory."
    },
    {
      "name": "Marketplace User Controller",
      "description": "General User functionality pertaining to all marketplace types"
    },
    {
      "name": "Yoop Internal Administration Controller",
      "description": "Internal Yoop Administrator APIs to create and maintain other internal Yoop Administrators"
    },
    {
      "name": "Event User Controller",
      "description": "User APIs pertaining to Events"
    },
    {
      "name": "Reporting Controller",
      "description": "Reporting Functions for the Client Dashboard"
    },
    {
      "name": "User Address Controller",
      "description": "User APIs to create, update and view addresses in the address book"
    },
    {
      "name": "Offer Group User Controller",
      "description": "General User functionality pertaining to all offer group types"
    },
    {
      "name": "Client API Event Sub-Details Controller",
      "description": "Client API for Event Sub-Details."
    },
    {
      "name": "Client API Event Notifications Controller",
      "description": "Client API for Event Notifications."
    },
    {
      "name": "Auction Controller",
      "description": "User APIs pertaining to Auctions"
    },
    {
      "name": "Client User Activity Controller",
      "description": "User APIs for client to control user's activity on events"
    },
    {
      "name": "Inbox Controller",
      "description": "User APIs pertaining to the user's inbox"
    },
    {
      "name": "Internal User Controller",
      "description": "APIs to verify that the user accessing the system is internal"
    },
    {
      "name": "User Activity Controller",
      "description": "User APIs to view user activity on events"
    }
  ]
}