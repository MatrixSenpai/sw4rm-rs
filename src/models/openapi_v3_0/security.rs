use std::collections::HashMap;
use serde::{Deserialize, Serialize};
use serde_json::Value;

use super::oauth_flow::OAuthFlows;

/// Security Scheme Object
///
/// Defines a security scheme that can be used by the operations. Supported schemes are HTTP
/// authentication, an API key (either as a header, a cookie parameter or as a query parameter),
/// OAuth2's common flows (implicit, password, client credentials and authorization code) as
/// defined in RFC6749, and OpenID Connect Discovery.
#[derive(Debug, Serialize, Deserialize, Default, Clone, PartialEq)]
#[serde(default, rename_all = "camelCase")]
pub struct SecurityScheme {
    /// REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2",
    /// "openIdConnect".
    pub scheme_type: String,
    /// A short description for security scheme. CommonMark syntax MAY be used for rich text
    /// representation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// REQUIRED. The name of the header, query or cookie parameter to be used.
    pub name: String,
    /// REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
    pub location: String,
    /// REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header
    /// as defined in RFC7235. The values used SHOULD be registered in the IANA Authentication
    /// Scheme registry.
    pub scheme: String,
    /// A hint to the client to identify how the bearer token is formatted. Bearer tokens are
    /// usually generated by an authorization server, so this information is primarily for
    /// documentation purposes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bearer_format: Option<String>,
    /// REQUIRED. An object containing configuration information for the flow types supported.
    pub flows: OAuthFlows,
    /// REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the
    /// form of a URL.
    pub open_id_connect_url: String,

    /// Allows extensions to the Swagger Schema. The field name MUST begin with x-, for example,
    /// x-internal-id. The value can be null, a primitive, an array or an object. See Vendor
    /// Extensions for further details.
    #[serde(flatten, skip_serializing_if = "HashMap::is_empty")]
    pub x_fields: HashMap<String, Value>,
}